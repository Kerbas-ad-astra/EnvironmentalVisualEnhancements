// Compiled shader for all platforms, uncompressed size: 2706.6KB

// Skipping shader variants that would not be included into build of current scene.

Shader "EVE/PlanetCityLight" {
Properties {
 _Color ("Color Tint", Color) = (1,1,1,1)
 _MainTex ("Main (RGB)", 2D) = "white" { }
 _BumpMap ("Normalmap", 2D) = "bump" { }
 _SpecularColor ("Specular tint", Color) = (1,1,1,1)
 _SpecularPower ("Shininess", Float) = 0.078125
 _DetailDist ("Detail Distance", Range(0,1)) = 0.00875
 _CityOverlayTex ("Overlay (RGB)", 2D) = "white" { }
 _CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
 _CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" { }
 _CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" { }
 _PlanetOpacity ("PlanetOpacity", Float) = 1
 _SunDir ("SunDir", Vector) = (0,0,0,1)
}
SubShader { 
 Tags { "QUEUE"="Geometry+1" "IGNOREPROJECTOR"="true" "RenderMode"="Transparent" }


 // Stats for Vertex shader:
 //       d3d11 : 51 avg math (50..53)
 //        d3d9 : 55 avg math (52..58)
 //        gles : 271 avg math (231..307), 7 avg texture (5..11), 6 avg branch (6..9)
 //       metal : 26 avg math (25..28)
 //      opengl : 272 avg math (235..307), 7 avg texture (5..11), 6 avg branch (6..9)
 // Stats for Fragment shader:
 //       d3d11 : 112 avg math (102..125), 0 avg texture (0..2)
 //        d3d9 : 114 avg math (106..124), 19 avg texture (13..31)
 //       metal : 272 avg math (235..307), 7 avg texture (5..11), 6 avg branch (6..9)
 Pass {
  Tags { "QUEUE"="Geometry+1" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderMode"="Transparent" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  GpuProgramID 2915
Program "vp" {
SubProgram "opengl " {
// Stats: 300 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  vec4 tmpvar_28;
  tmpvar_28 = texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw);
  cityoverlay_3.xyz = tmpvar_28.xyz;
  vec2 uv_29;
  vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_30);
  float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  float tmpvar_33;
  tmpvar_33 = float((max (tmpvar_31.x, tmpvar_31.z) >= tmpvar_31.y));
  float tmpvar_34;
  tmpvar_34 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_32), tmpvar_33));
  vec3 tmpvar_35;
  tmpvar_35.xz = vec2(1.0, -1.0);
  tmpvar_35.y = -(tmpvar_34);
  vec3 tmpvar_36;
  tmpvar_36.xz = vec2(1.0, -1.0);
  tmpvar_36.y = tmpvar_34;
  vec3 tmpvar_37;
  tmpvar_37.xy = vec2(1.0, 1.0);
  tmpvar_37.z = tmpvar_34;
  vec3 tmpvar_38;
  tmpvar_38 = mix ((tmpvar_37 * tmpvar_30.yxz), mix ((tmpvar_35 * tmpvar_30.xzy), (tmpvar_36 * tmpvar_30.zxy), vec3(tmpvar_32)), vec3(tmpvar_33));
  uv_29 = (((
    (0.5 * tmpvar_38.yz)
   / 
    abs(tmpvar_38.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_39;
  vec2 tmpvar_40;
  float tmpvar_41;
  tmpvar_41 = (0.5 * _CityOverlayDetailScale);
  tmpvar_40 = abs((uv_29 - tmpvar_41));
  uvCont_39.x = max (tmpvar_40.x, tmpvar_40.y);
  uvCont_39.y = min (tmpvar_40.x, tmpvar_40.y);
  vec4 tmpvar_42;
  tmpvar_42.xy = dFdx(uvCont_39);
  tmpvar_42.zw = dFdy(uvCont_39);
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_29, tmpvar_42.xy, tmpvar_42.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_43.xyz;
  vec2 uv_44;
  vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_30);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_46), tmpvar_47));
  vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, -1.0);
  tmpvar_49.y = -(tmpvar_48);
  vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = tmpvar_48;
  vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = tmpvar_48;
  vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_30.yxz), mix ((tmpvar_49 * tmpvar_30.xzy), (tmpvar_50 * tmpvar_30.zxy), vec3(tmpvar_46)), vec3(tmpvar_47));
  uv_44 = (((
    (0.5 * tmpvar_52.yz)
   / 
    abs(tmpvar_52.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_53;
  vec2 tmpvar_54;
  tmpvar_54 = abs((uv_44 - tmpvar_41));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  vec4 tmpvar_55;
  tmpvar_55.xy = dFdx(uvCont_53);
  tmpvar_55.zw = dFdy(uvCont_53);
  vec4 tmpvar_56;
  tmpvar_56 = texture2DGradARB (_CityLightOverlayDetailTex, uv_44, tmpvar_55.xy, tmpvar_55.zw);
  citylightoverlaydetail_1.xyz = tmpvar_56.xyz;
  cityoverlay_3.w = (tmpvar_28.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_43.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_56.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_56.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_57;
  vec3 tmpvar_58;
  tmpvar_58 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_59;
  tmpvar_59 = normalize(normal_20);
  float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_58);
  c_57.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_60) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_58 + normalize(xlv_TEXCOORD1)))
    , tmpvar_59), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_57.w = (tmpvar_60 * 2.0);
  float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_57 * mix (1.0, clamp (
    floor((1.01 + tmpvar_61))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_61))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_62;
  tmpvar_62 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_62;
  gl_FragData[0] = tmpvar_62;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 296 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  mediump vec2 uv_36;
  mediump vec3 detailCoords_37;
  mediump float s_38;
  mediump float nylerp_39;
  mediump float zxlerp_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  highp float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_40);
  s_38 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, s_38, nylerp_39));
  s_38 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xz = vec2(1.0, -1.0);
  tmpvar_47.y = -(s_38);
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, -1.0);
  tmpvar_48.y = s_38;
  highp vec3 tmpvar_49;
  tmpvar_49 = mix ((tmpvar_47 * tmpvar_41.xzy), (tmpvar_48 * tmpvar_41.zxy), vec3(zxlerp_40));
  detailCoords_37 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xy = vec2(1.0, 1.0);
  tmpvar_50.z = s_38;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_50 * tmpvar_41.yxz), detailCoords_37, vec3(nylerp_39));
  detailCoords_37 = tmpvar_51;
  uv_36 = (((
    (0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_52;
  uv_52 = uv_36;
  highp vec2 uvCont_53;
  highp vec2 tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (0.5 * _CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_53);
  tmpvar_56.zw = dFdy(uvCont_53);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_36, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  mediump vec2 uv_59;
  mediump vec3 detailCoords_60;
  mediump float s_61;
  mediump float nylerp_62;
  mediump float zxlerp_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  highp float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_63);
  s_61 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, s_61, nylerp_62));
  s_61 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = -(s_61);
  mediump vec3 tmpvar_70;
  tmpvar_70.xz = vec2(1.0, -1.0);
  tmpvar_70.y = s_61;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix ((tmpvar_69 * tmpvar_41.xzy), (tmpvar_70 * tmpvar_41.zxy), vec3(zxlerp_63));
  detailCoords_60 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xy = vec2(1.0, 1.0);
  tmpvar_72.z = s_61;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix ((tmpvar_72 * tmpvar_41.yxz), detailCoords_60, vec3(nylerp_62));
  detailCoords_60 = tmpvar_73;
  uv_59 = (((
    (0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_74;
  uv_74 = uv_59;
  highp vec2 uvCont_75;
  highp vec2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_75);
  tmpvar_77.zw = dFdy(uvCont_75);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_59, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_80;
  lightDir_80 = xlv_TEXCOORD5;
  mediump vec3 viewDir_81;
  viewDir_81 = xlv_TEXCOORD1;
  mediump vec4 c_82;
  mediump vec3 tmpvar_83;
  tmpvar_83 = normalize(lightDir_80);
  lightDir_80 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = normalize(viewDir_81);
  viewDir_81 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = normalize(normT_5);
  mediump float tmpvar_86;
  tmpvar_86 = dot (tmpvar_85, tmpvar_83);
  highp float tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp (dot (normalize(
    (tmpvar_83 + tmpvar_84)
  ), tmpvar_85), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = (pow (tmpvar_87, _SpecularPower) * _SpecularColor.w);
  c_82.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_86) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_89)) * 2.0);
  c_82.w = (tmpvar_86 * 2.0);
  highp vec3 tmpvar_90;
  tmpvar_90 = normalize(_SunDir);
  mediump vec3 lightDir_91;
  lightDir_91 = tmpvar_90;
  mediump vec3 normal_92;
  normal_92 = xlv_TEXCOORD3;
  mediump float tmpvar_93;
  tmpvar_93 = dot (normal_92, lightDir_91);
  color_6 = (c_82 * mix (1.0, clamp (
    floor((1.01 + tmpvar_93))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_93))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_94;
  tmpvar_94 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_94;
  tmpvar_1 = tmpvar_94;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_13;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
bool tb19;
highp float t20;
mediump float t16_22;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    tb19 = t10_19>=1.0;
    t16_4 = (tb19) ? 0.0 : 1.0;
    t10_19 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_5.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4 = t16_4 * t10_19;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_13.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t0.xx);
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t0.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_13.x = t16_4 * t10_3.w;
    t16_4 = t16_4 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_22 = dot(t10_5.xyz, t10_5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_7.xyz = vec3(t16_22) * t10_5.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_8.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_7.xyz, t16_8.xyz);
    t16_22 = t16_22 + t16_22;
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_31 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_31 + 1.00999999;
    t16_31 = t16_31 * -10.0;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_31 = t16_31 * t16_33 + 1.0;
    t16_22 = t16_31 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_31 = t16_13.x * t16_22 + (-t16_4);
    t16_13.x = t16_22 * t16_13.x;
    t16_1.w = t16_13.x * t16_31 + t16_4;
    t16_1.xyz = t16_13.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
float t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13 = t7 * 0.0208350997 + -0.0851330012;
    t13 = t7 * t13 + 0.180141002;
    t13 = t7 * t13 + -0.330299497;
    t7 = t7 * t13 + 0.999866009;
    t13 = t7 * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7 + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    tb13 = t10_4.w>=1.0;
    t13 = (tb13) ? 0.0 : 1.0;
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t1.x = t13 * t10_4.w;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13 = tb13 ? 1.0 : float(0.0);
    t7 = t13 * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = vec3(t13) * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t1.x = t1.x + t1.x;
    t13 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13 = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13 + 1.00999999;
    t13 = t13 * -10.0;
    t13 = clamp(t13, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13 = t13 * t19 + 1.0;
    t1.x = t13 * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 302 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  vec4 tmpvar_28;
  tmpvar_28 = texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw);
  cityoverlay_3.xyz = tmpvar_28.xyz;
  vec2 uv_29;
  vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_30);
  float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  float tmpvar_33;
  tmpvar_33 = float((max (tmpvar_31.x, tmpvar_31.z) >= tmpvar_31.y));
  float tmpvar_34;
  tmpvar_34 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_32), tmpvar_33));
  vec3 tmpvar_35;
  tmpvar_35.xz = vec2(1.0, -1.0);
  tmpvar_35.y = -(tmpvar_34);
  vec3 tmpvar_36;
  tmpvar_36.xz = vec2(1.0, -1.0);
  tmpvar_36.y = tmpvar_34;
  vec3 tmpvar_37;
  tmpvar_37.xy = vec2(1.0, 1.0);
  tmpvar_37.z = tmpvar_34;
  vec3 tmpvar_38;
  tmpvar_38 = mix ((tmpvar_37 * tmpvar_30.yxz), mix ((tmpvar_35 * tmpvar_30.xzy), (tmpvar_36 * tmpvar_30.zxy), vec3(tmpvar_32)), vec3(tmpvar_33));
  uv_29 = (((
    (0.5 * tmpvar_38.yz)
   / 
    abs(tmpvar_38.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_39;
  vec2 tmpvar_40;
  float tmpvar_41;
  tmpvar_41 = (0.5 * _CityOverlayDetailScale);
  tmpvar_40 = abs((uv_29 - tmpvar_41));
  uvCont_39.x = max (tmpvar_40.x, tmpvar_40.y);
  uvCont_39.y = min (tmpvar_40.x, tmpvar_40.y);
  vec4 tmpvar_42;
  tmpvar_42.xy = dFdx(uvCont_39);
  tmpvar_42.zw = dFdy(uvCont_39);
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_29, tmpvar_42.xy, tmpvar_42.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_43.xyz;
  vec2 uv_44;
  vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_30);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_46), tmpvar_47));
  vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, -1.0);
  tmpvar_49.y = -(tmpvar_48);
  vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = tmpvar_48;
  vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = tmpvar_48;
  vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_30.yxz), mix ((tmpvar_49 * tmpvar_30.xzy), (tmpvar_50 * tmpvar_30.zxy), vec3(tmpvar_46)), vec3(tmpvar_47));
  uv_44 = (((
    (0.5 * tmpvar_52.yz)
   / 
    abs(tmpvar_52.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_53;
  vec2 tmpvar_54;
  tmpvar_54 = abs((uv_44 - tmpvar_41));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  vec4 tmpvar_55;
  tmpvar_55.xy = dFdx(uvCont_53);
  tmpvar_55.zw = dFdy(uvCont_53);
  vec4 tmpvar_56;
  tmpvar_56 = texture2DGradARB (_CityLightOverlayDetailTex, uv_44, tmpvar_55.xy, tmpvar_55.zw);
  citylightoverlaydetail_1.xyz = tmpvar_56.xyz;
  cityoverlay_3.w = (tmpvar_28.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_43.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_56.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_56.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_58;
  vec3 tmpvar_59;
  tmpvar_59 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_60;
  tmpvar_60 = normalize(normal_20);
  float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_59);
  c_58.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_61) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_59 + normalize(xlv_TEXCOORD1)))
    , tmpvar_60), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_57.x * 2.0));
  c_58.w = (tmpvar_61 * (tmpvar_57.x * 2.0));
  float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_58 * mix (1.0, clamp (
    floor((1.01 + tmpvar_62))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_62))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_63;
  tmpvar_63 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_63;
  gl_FragData[0] = tmpvar_63;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 302 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  mediump vec2 uv_36;
  mediump vec3 detailCoords_37;
  mediump float s_38;
  mediump float nylerp_39;
  mediump float zxlerp_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  highp float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_40);
  s_38 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, s_38, nylerp_39));
  s_38 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xz = vec2(1.0, -1.0);
  tmpvar_47.y = -(s_38);
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, -1.0);
  tmpvar_48.y = s_38;
  highp vec3 tmpvar_49;
  tmpvar_49 = mix ((tmpvar_47 * tmpvar_41.xzy), (tmpvar_48 * tmpvar_41.zxy), vec3(zxlerp_40));
  detailCoords_37 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xy = vec2(1.0, 1.0);
  tmpvar_50.z = s_38;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_50 * tmpvar_41.yxz), detailCoords_37, vec3(nylerp_39));
  detailCoords_37 = tmpvar_51;
  uv_36 = (((
    (0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_52;
  uv_52 = uv_36;
  highp vec2 uvCont_53;
  highp vec2 tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (0.5 * _CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_53);
  tmpvar_56.zw = dFdy(uvCont_53);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_36, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  mediump vec2 uv_59;
  mediump vec3 detailCoords_60;
  mediump float s_61;
  mediump float nylerp_62;
  mediump float zxlerp_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  highp float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_63);
  s_61 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, s_61, nylerp_62));
  s_61 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = -(s_61);
  mediump vec3 tmpvar_70;
  tmpvar_70.xz = vec2(1.0, -1.0);
  tmpvar_70.y = s_61;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix ((tmpvar_69 * tmpvar_41.xzy), (tmpvar_70 * tmpvar_41.zxy), vec3(zxlerp_63));
  detailCoords_60 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xy = vec2(1.0, 1.0);
  tmpvar_72.z = s_61;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix ((tmpvar_72 * tmpvar_41.yxz), detailCoords_60, vec3(nylerp_62));
  detailCoords_60 = tmpvar_73;
  uv_59 = (((
    (0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_74;
  uv_74 = uv_59;
  highp vec2 uvCont_75;
  highp vec2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_75);
  tmpvar_77.zw = dFdy(uvCont_75);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_59, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_80 = tmpvar_81;
  mediump vec3 lightDir_82;
  lightDir_82 = xlv_TEXCOORD5;
  mediump vec3 viewDir_83;
  viewDir_83 = xlv_TEXCOORD1;
  mediump float atten_84;
  atten_84 = tmpvar_80;
  mediump vec4 c_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(lightDir_82);
  lightDir_82 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(viewDir_83);
  viewDir_83 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(normT_5);
  mediump float tmpvar_89;
  tmpvar_89 = dot (tmpvar_88, tmpvar_86);
  highp float tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (dot (normalize(
    (tmpvar_86 + tmpvar_87)
  ), tmpvar_88), 0.0, 1.0);
  tmpvar_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (pow (tmpvar_90, _SpecularPower) * _SpecularColor.w);
  c_85.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_89) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_92)) * (atten_84 * 2.0));
  c_85.w = (tmpvar_89 * (atten_84 * 2.0));
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(_SunDir);
  mediump vec3 lightDir_94;
  lightDir_94 = tmpvar_93;
  mediump vec3 normal_95;
  normal_95 = xlv_TEXCOORD3;
  mediump float tmpvar_96;
  tmpvar_96 = dot (normal_95, lightDir_94);
  color_6 = (c_85 * mix (1.0, clamp (
    floor((1.01 + tmpvar_96))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_96))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_97;
  tmpvar_97 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_97;
  tmpvar_1 = tmpvar_97;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
vec2 t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13.x = t7 * 0.0208350997 + -0.0851330012;
    t13.x = t7 * t13.x + 0.180141002;
    t13.x = t7 * t13.x + -0.330299497;
    t7 = t7 * t13.x + 0.999866009;
    t13.x = t7 * t1.x;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13.x = tb19 ? t13.x : float(0.0);
    t1.x = t1.x * t7 + t13.x;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13.x = tb7.y ? t20 : float(0.0);
    t13.x = t19 * t14 + t13.x;
    t2.y = t13.x * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    tb13 = t10_4.w>=1.0;
    t13.x = (tb13) ? 0.0 : 1.0;
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t1.x = t13.x * t10_4.w;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t7 = t13.x * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_2 = texture(_ShadowMapTexture, t13.xy);
    t1.x = dot(t10_2.xx, t1.xx);
    t13.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13.x = inversesqrt(t13.x);
    t2.xyz = t13.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13.x = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13.x + 1.00999999;
    t13.x = t13.x * -10.0;
    t13.x = clamp(t13.x, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13.x = t13.x * t19 + 1.0;
    t1.x = t13.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 300 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  vec4 tmpvar_28;
  tmpvar_28 = texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw);
  cityoverlay_3.xyz = tmpvar_28.xyz;
  vec2 uv_29;
  vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_30);
  float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  float tmpvar_33;
  tmpvar_33 = float((max (tmpvar_31.x, tmpvar_31.z) >= tmpvar_31.y));
  float tmpvar_34;
  tmpvar_34 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_32), tmpvar_33));
  vec3 tmpvar_35;
  tmpvar_35.xz = vec2(1.0, -1.0);
  tmpvar_35.y = -(tmpvar_34);
  vec3 tmpvar_36;
  tmpvar_36.xz = vec2(1.0, -1.0);
  tmpvar_36.y = tmpvar_34;
  vec3 tmpvar_37;
  tmpvar_37.xy = vec2(1.0, 1.0);
  tmpvar_37.z = tmpvar_34;
  vec3 tmpvar_38;
  tmpvar_38 = mix ((tmpvar_37 * tmpvar_30.yxz), mix ((tmpvar_35 * tmpvar_30.xzy), (tmpvar_36 * tmpvar_30.zxy), vec3(tmpvar_32)), vec3(tmpvar_33));
  uv_29 = (((
    (0.5 * tmpvar_38.yz)
   / 
    abs(tmpvar_38.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_39;
  vec2 tmpvar_40;
  float tmpvar_41;
  tmpvar_41 = (0.5 * _CityOverlayDetailScale);
  tmpvar_40 = abs((uv_29 - tmpvar_41));
  uvCont_39.x = max (tmpvar_40.x, tmpvar_40.y);
  uvCont_39.y = min (tmpvar_40.x, tmpvar_40.y);
  vec4 tmpvar_42;
  tmpvar_42.xy = dFdx(uvCont_39);
  tmpvar_42.zw = dFdy(uvCont_39);
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_29, tmpvar_42.xy, tmpvar_42.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_43.xyz;
  vec2 uv_44;
  vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_30);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_46), tmpvar_47));
  vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, -1.0);
  tmpvar_49.y = -(tmpvar_48);
  vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = tmpvar_48;
  vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = tmpvar_48;
  vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_30.yxz), mix ((tmpvar_49 * tmpvar_30.xzy), (tmpvar_50 * tmpvar_30.zxy), vec3(tmpvar_46)), vec3(tmpvar_47));
  uv_44 = (((
    (0.5 * tmpvar_52.yz)
   / 
    abs(tmpvar_52.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_53;
  vec2 tmpvar_54;
  tmpvar_54 = abs((uv_44 - tmpvar_41));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  vec4 tmpvar_55;
  tmpvar_55.xy = dFdx(uvCont_53);
  tmpvar_55.zw = dFdy(uvCont_53);
  vec4 tmpvar_56;
  tmpvar_56 = texture2DGradARB (_CityLightOverlayDetailTex, uv_44, tmpvar_55.xy, tmpvar_55.zw);
  citylightoverlaydetail_1.xyz = tmpvar_56.xyz;
  cityoverlay_3.w = (tmpvar_28.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_43.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_56.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_56.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_57;
  vec3 tmpvar_58;
  tmpvar_58 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_59;
  tmpvar_59 = normalize(normal_20);
  float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_58);
  c_57.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_60) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_58 + normalize(xlv_TEXCOORD1)))
    , tmpvar_59), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_57.w = (tmpvar_60 * 2.0);
  float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_57 * mix (1.0, clamp (
    floor((1.01 + tmpvar_61))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_61))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_62;
  tmpvar_62 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_62;
  gl_FragData[0] = tmpvar_62;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 296 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  mediump vec2 uv_36;
  mediump vec3 detailCoords_37;
  mediump float s_38;
  mediump float nylerp_39;
  mediump float zxlerp_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  highp float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_40);
  s_38 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, s_38, nylerp_39));
  s_38 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xz = vec2(1.0, -1.0);
  tmpvar_47.y = -(s_38);
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, -1.0);
  tmpvar_48.y = s_38;
  highp vec3 tmpvar_49;
  tmpvar_49 = mix ((tmpvar_47 * tmpvar_41.xzy), (tmpvar_48 * tmpvar_41.zxy), vec3(zxlerp_40));
  detailCoords_37 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xy = vec2(1.0, 1.0);
  tmpvar_50.z = s_38;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_50 * tmpvar_41.yxz), detailCoords_37, vec3(nylerp_39));
  detailCoords_37 = tmpvar_51;
  uv_36 = (((
    (0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_52;
  uv_52 = uv_36;
  highp vec2 uvCont_53;
  highp vec2 tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (0.5 * _CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_53);
  tmpvar_56.zw = dFdy(uvCont_53);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_36, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  mediump vec2 uv_59;
  mediump vec3 detailCoords_60;
  mediump float s_61;
  mediump float nylerp_62;
  mediump float zxlerp_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  highp float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_63);
  s_61 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, s_61, nylerp_62));
  s_61 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = -(s_61);
  mediump vec3 tmpvar_70;
  tmpvar_70.xz = vec2(1.0, -1.0);
  tmpvar_70.y = s_61;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix ((tmpvar_69 * tmpvar_41.xzy), (tmpvar_70 * tmpvar_41.zxy), vec3(zxlerp_63));
  detailCoords_60 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xy = vec2(1.0, 1.0);
  tmpvar_72.z = s_61;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix ((tmpvar_72 * tmpvar_41.yxz), detailCoords_60, vec3(nylerp_62));
  detailCoords_60 = tmpvar_73;
  uv_59 = (((
    (0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_74;
  uv_74 = uv_59;
  highp vec2 uvCont_75;
  highp vec2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_75);
  tmpvar_77.zw = dFdy(uvCont_75);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_59, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_80;
  lightDir_80 = xlv_TEXCOORD5;
  mediump vec3 viewDir_81;
  viewDir_81 = xlv_TEXCOORD1;
  mediump vec4 c_82;
  mediump vec3 tmpvar_83;
  tmpvar_83 = normalize(lightDir_80);
  lightDir_80 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = normalize(viewDir_81);
  viewDir_81 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = normalize(normT_5);
  mediump float tmpvar_86;
  tmpvar_86 = dot (tmpvar_85, tmpvar_83);
  highp float tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp (dot (normalize(
    (tmpvar_83 + tmpvar_84)
  ), tmpvar_85), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = (pow (tmpvar_87, _SpecularPower) * _SpecularColor.w);
  c_82.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_86) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_89)) * 2.0);
  c_82.w = (tmpvar_86 * 2.0);
  highp vec3 tmpvar_90;
  tmpvar_90 = normalize(_SunDir);
  mediump vec3 lightDir_91;
  lightDir_91 = tmpvar_90;
  mediump vec3 normal_92;
  normal_92 = xlv_TEXCOORD3;
  mediump float tmpvar_93;
  tmpvar_93 = dot (normal_92, lightDir_91);
  color_6 = (c_82 * mix (1.0, clamp (
    floor((1.01 + tmpvar_93))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_93))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_94;
  tmpvar_94 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_94;
  tmpvar_1 = tmpvar_94;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_13;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
bool tb19;
highp float t20;
mediump float t16_22;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    tb19 = t10_19>=1.0;
    t16_4 = (tb19) ? 0.0 : 1.0;
    t10_19 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_5.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4 = t16_4 * t10_19;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_13.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t0.xx);
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t0.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_13.x = t16_4 * t10_3.w;
    t16_4 = t16_4 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_22 = dot(t10_5.xyz, t10_5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_7.xyz = vec3(t16_22) * t10_5.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_8.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_7.xyz, t16_8.xyz);
    t16_22 = t16_22 + t16_22;
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_31 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_31 + 1.00999999;
    t16_31 = t16_31 * -10.0;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_31 = t16_31 * t16_33 + 1.0;
    t16_22 = t16_31 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_31 = t16_13.x * t16_22 + (-t16_4);
    t16_13.x = t16_22 * t16_13.x;
    t16_1.w = t16_13.x * t16_31 + t16_4;
    t16_1.xyz = t16_13.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
float t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13 = t7 * 0.0208350997 + -0.0851330012;
    t13 = t7 * t13 + 0.180141002;
    t13 = t7 * t13 + -0.330299497;
    t7 = t7 * t13 + 0.999866009;
    t13 = t7 * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7 + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    tb13 = t10_4.w>=1.0;
    t13 = (tb13) ? 0.0 : 1.0;
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t1.x = t13 * t10_4.w;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13 = tb13 ? 1.0 : float(0.0);
    t7 = t13 * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = vec3(t13) * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t1.x = t1.x + t1.x;
    t13 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13 = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13 + 1.00999999;
    t13 = t13 * -10.0;
    t13 = clamp(t13, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13 = t13 * t19 + 1.0;
    t1.x = t13 * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 302 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  vec4 tmpvar_28;
  tmpvar_28 = texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw);
  cityoverlay_3.xyz = tmpvar_28.xyz;
  vec2 uv_29;
  vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_30);
  float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  float tmpvar_33;
  tmpvar_33 = float((max (tmpvar_31.x, tmpvar_31.z) >= tmpvar_31.y));
  float tmpvar_34;
  tmpvar_34 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_32), tmpvar_33));
  vec3 tmpvar_35;
  tmpvar_35.xz = vec2(1.0, -1.0);
  tmpvar_35.y = -(tmpvar_34);
  vec3 tmpvar_36;
  tmpvar_36.xz = vec2(1.0, -1.0);
  tmpvar_36.y = tmpvar_34;
  vec3 tmpvar_37;
  tmpvar_37.xy = vec2(1.0, 1.0);
  tmpvar_37.z = tmpvar_34;
  vec3 tmpvar_38;
  tmpvar_38 = mix ((tmpvar_37 * tmpvar_30.yxz), mix ((tmpvar_35 * tmpvar_30.xzy), (tmpvar_36 * tmpvar_30.zxy), vec3(tmpvar_32)), vec3(tmpvar_33));
  uv_29 = (((
    (0.5 * tmpvar_38.yz)
   / 
    abs(tmpvar_38.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_39;
  vec2 tmpvar_40;
  float tmpvar_41;
  tmpvar_41 = (0.5 * _CityOverlayDetailScale);
  tmpvar_40 = abs((uv_29 - tmpvar_41));
  uvCont_39.x = max (tmpvar_40.x, tmpvar_40.y);
  uvCont_39.y = min (tmpvar_40.x, tmpvar_40.y);
  vec4 tmpvar_42;
  tmpvar_42.xy = dFdx(uvCont_39);
  tmpvar_42.zw = dFdy(uvCont_39);
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_29, tmpvar_42.xy, tmpvar_42.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_43.xyz;
  vec2 uv_44;
  vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_30);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, tmpvar_46), tmpvar_47));
  vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, -1.0);
  tmpvar_49.y = -(tmpvar_48);
  vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = tmpvar_48;
  vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = tmpvar_48;
  vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_30.yxz), mix ((tmpvar_49 * tmpvar_30.xzy), (tmpvar_50 * tmpvar_30.zxy), vec3(tmpvar_46)), vec3(tmpvar_47));
  uv_44 = (((
    (0.5 * tmpvar_52.yz)
   / 
    abs(tmpvar_52.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_53;
  vec2 tmpvar_54;
  tmpvar_54 = abs((uv_44 - tmpvar_41));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  vec4 tmpvar_55;
  tmpvar_55.xy = dFdx(uvCont_53);
  tmpvar_55.zw = dFdy(uvCont_53);
  vec4 tmpvar_56;
  tmpvar_56 = texture2DGradARB (_CityLightOverlayDetailTex, uv_44, tmpvar_55.xy, tmpvar_55.zw);
  citylightoverlaydetail_1.xyz = tmpvar_56.xyz;
  cityoverlay_3.w = (tmpvar_28.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_43.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_56.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_56.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_58;
  vec3 tmpvar_59;
  tmpvar_59 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_60;
  tmpvar_60 = normalize(normal_20);
  float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_59);
  c_58.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_61) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_59 + normalize(xlv_TEXCOORD1)))
    , tmpvar_60), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_57.x * 2.0));
  c_58.w = (tmpvar_61 * (tmpvar_57.x * 2.0));
  float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_58 * mix (1.0, clamp (
    floor((1.01 + tmpvar_62))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_62))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_63;
  tmpvar_63 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_63;
  gl_FragData[0] = tmpvar_63;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 302 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  mediump vec2 uv_36;
  mediump vec3 detailCoords_37;
  mediump float s_38;
  mediump float nylerp_39;
  mediump float zxlerp_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  highp float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_40);
  s_38 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, s_38, nylerp_39));
  s_38 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xz = vec2(1.0, -1.0);
  tmpvar_47.y = -(s_38);
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, -1.0);
  tmpvar_48.y = s_38;
  highp vec3 tmpvar_49;
  tmpvar_49 = mix ((tmpvar_47 * tmpvar_41.xzy), (tmpvar_48 * tmpvar_41.zxy), vec3(zxlerp_40));
  detailCoords_37 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xy = vec2(1.0, 1.0);
  tmpvar_50.z = s_38;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_50 * tmpvar_41.yxz), detailCoords_37, vec3(nylerp_39));
  detailCoords_37 = tmpvar_51;
  uv_36 = (((
    (0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_52;
  uv_52 = uv_36;
  highp vec2 uvCont_53;
  highp vec2 tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (0.5 * _CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_53);
  tmpvar_56.zw = dFdy(uvCont_53);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_36, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  mediump vec2 uv_59;
  mediump vec3 detailCoords_60;
  mediump float s_61;
  mediump float nylerp_62;
  mediump float zxlerp_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  highp float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_63);
  s_61 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, s_61, nylerp_62));
  s_61 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = -(s_61);
  mediump vec3 tmpvar_70;
  tmpvar_70.xz = vec2(1.0, -1.0);
  tmpvar_70.y = s_61;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix ((tmpvar_69 * tmpvar_41.xzy), (tmpvar_70 * tmpvar_41.zxy), vec3(zxlerp_63));
  detailCoords_60 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xy = vec2(1.0, 1.0);
  tmpvar_72.z = s_61;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix ((tmpvar_72 * tmpvar_41.yxz), detailCoords_60, vec3(nylerp_62));
  detailCoords_60 = tmpvar_73;
  uv_59 = (((
    (0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_74;
  uv_74 = uv_59;
  highp vec2 uvCont_75;
  highp vec2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_75);
  tmpvar_77.zw = dFdy(uvCont_75);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_59, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_80 = tmpvar_81;
  mediump vec3 lightDir_82;
  lightDir_82 = xlv_TEXCOORD5;
  mediump vec3 viewDir_83;
  viewDir_83 = xlv_TEXCOORD1;
  mediump float atten_84;
  atten_84 = tmpvar_80;
  mediump vec4 c_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(lightDir_82);
  lightDir_82 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(viewDir_83);
  viewDir_83 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(normT_5);
  mediump float tmpvar_89;
  tmpvar_89 = dot (tmpvar_88, tmpvar_86);
  highp float tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (dot (normalize(
    (tmpvar_86 + tmpvar_87)
  ), tmpvar_88), 0.0, 1.0);
  tmpvar_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (pow (tmpvar_90, _SpecularPower) * _SpecularColor.w);
  c_85.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_89) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_92)) * (atten_84 * 2.0));
  c_85.w = (tmpvar_89 * (atten_84 * 2.0));
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(_SunDir);
  mediump vec3 lightDir_94;
  lightDir_94 = tmpvar_93;
  mediump vec3 normal_95;
  normal_95 = xlv_TEXCOORD3;
  mediump float tmpvar_96;
  tmpvar_96 = dot (normal_95, lightDir_94);
  color_6 = (c_85 * mix (1.0, clamp (
    floor((1.01 + tmpvar_96))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_96))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_97;
  tmpvar_97 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_97;
  tmpvar_1 = tmpvar_97;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
vec2 t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13.x = t7 * 0.0208350997 + -0.0851330012;
    t13.x = t7 * t13.x + 0.180141002;
    t13.x = t7 * t13.x + -0.330299497;
    t7 = t7 * t13.x + 0.999866009;
    t13.x = t7 * t1.x;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13.x = tb19 ? t13.x : float(0.0);
    t1.x = t1.x * t7 + t13.x;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13.x = tb7.y ? t20 : float(0.0);
    t13.x = t19 * t14 + t13.x;
    t2.y = t13.x * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    tb13 = t10_4.w>=1.0;
    t13.x = (tb13) ? 0.0 : 1.0;
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t1.x = t13.x * t10_4.w;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t7 = t13.x * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_2 = texture(_ShadowMapTexture, t13.xy);
    t1.x = dot(t10_2.xx, t1.xx);
    t13.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13.x = inversesqrt(t13.x);
    t2.xyz = t13.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13.x = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13.x + 1.00999999;
    t13.x = t13.x * -10.0;
    t13.x = clamp(t13.x, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13.x = t13.x * t19 + 1.0;
    t1.x = t13.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 301 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  mediump vec2 uv_36;
  mediump vec3 detailCoords_37;
  mediump float s_38;
  mediump float nylerp_39;
  mediump float zxlerp_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  highp float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_40);
  s_38 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, s_38, nylerp_39));
  s_38 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xz = vec2(1.0, -1.0);
  tmpvar_47.y = -(s_38);
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, -1.0);
  tmpvar_48.y = s_38;
  highp vec3 tmpvar_49;
  tmpvar_49 = mix ((tmpvar_47 * tmpvar_41.xzy), (tmpvar_48 * tmpvar_41.zxy), vec3(zxlerp_40));
  detailCoords_37 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xy = vec2(1.0, 1.0);
  tmpvar_50.z = s_38;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_50 * tmpvar_41.yxz), detailCoords_37, vec3(nylerp_39));
  detailCoords_37 = tmpvar_51;
  uv_36 = (((
    (0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_52;
  uv_52 = uv_36;
  highp vec2 uvCont_53;
  highp vec2 tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (0.5 * _CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_53);
  tmpvar_56.zw = dFdy(uvCont_53);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_36, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  mediump vec2 uv_59;
  mediump vec3 detailCoords_60;
  mediump float s_61;
  mediump float nylerp_62;
  mediump float zxlerp_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  highp float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_63);
  s_61 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, s_61, nylerp_62));
  s_61 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = -(s_61);
  mediump vec3 tmpvar_70;
  tmpvar_70.xz = vec2(1.0, -1.0);
  tmpvar_70.y = s_61;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix ((tmpvar_69 * tmpvar_41.xzy), (tmpvar_70 * tmpvar_41.zxy), vec3(zxlerp_63));
  detailCoords_60 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xy = vec2(1.0, 1.0);
  tmpvar_72.z = s_61;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix ((tmpvar_72 * tmpvar_41.yxz), detailCoords_60, vec3(nylerp_62));
  detailCoords_60 = tmpvar_73;
  uv_59 = (((
    (0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_74;
  uv_74 = uv_59;
  highp vec2 uvCont_75;
  highp vec2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_75);
  tmpvar_77.zw = dFdy(uvCont_75);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_59, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_80;
  shadow_80 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_81;
  lightDir_81 = xlv_TEXCOORD5;
  mediump vec3 viewDir_82;
  viewDir_82 = xlv_TEXCOORD1;
  mediump float atten_83;
  atten_83 = shadow_80;
  mediump vec4 c_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = normalize(lightDir_81);
  lightDir_81 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(viewDir_82);
  viewDir_82 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(normT_5);
  mediump float tmpvar_88;
  tmpvar_88 = dot (tmpvar_87, tmpvar_85);
  highp float tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp (dot (normalize(
    (tmpvar_85 + tmpvar_86)
  ), tmpvar_87), 0.0, 1.0);
  tmpvar_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (pow (tmpvar_89, _SpecularPower) * _SpecularColor.w);
  c_84.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_88) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_91)) * (atten_83 * 2.0));
  c_84.w = (tmpvar_88 * (atten_83 * 2.0));
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_SunDir);
  mediump vec3 lightDir_93;
  lightDir_93 = tmpvar_92;
  mediump vec3 normal_94;
  normal_94 = xlv_TEXCOORD3;
  mediump float tmpvar_95;
  tmpvar_95 = dot (normal_94, lightDir_93);
  color_6 = (c_84 * mix (1.0, clamp (
    floor((1.01 + tmpvar_95))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_95))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_96;
  tmpvar_96 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_96;
  tmpvar_1 = tmpvar_96;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_13;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
bool tb19;
highp float t20;
mediump float t16_22;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    tb19 = t10_19>=1.0;
    t16_4 = (tb19) ? 0.0 : 1.0;
    t10_19 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_5.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4 = t16_4 * t10_19;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_13.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t0.xx);
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t0.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_13.x = t16_4 * t10_3.w;
    t16_4 = t16_4 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_22 = dot(t10_5.xyz, t10_5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_7.xyz = vec3(t16_22) * t10_5.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_8.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_7.xyz, t16_8.xyz);
    vec3 txVec11 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_31 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_31 = t16_31 * t16_33 + _LightShadowData.x;
    t16_22 = dot(vec2(t16_31), vec2(t16_22));
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_31 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_31 + 1.00999999;
    t16_31 = t16_31 * -10.0;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_31 = t16_31 * t16_33 + 1.0;
    t16_22 = t16_31 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_31 = t16_13.x * t16_22 + (-t16_4);
    t16_13.x = t16_22 * t16_13.x;
    t16_1.w = t16_13.x * t16_31 + t16_4;
    t16_1.xyz = t16_13.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 301 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  mediump vec2 uv_36;
  mediump vec3 detailCoords_37;
  mediump float s_38;
  mediump float nylerp_39;
  mediump float zxlerp_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  highp float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_40);
  s_38 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, s_38, nylerp_39));
  s_38 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xz = vec2(1.0, -1.0);
  tmpvar_47.y = -(s_38);
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, -1.0);
  tmpvar_48.y = s_38;
  highp vec3 tmpvar_49;
  tmpvar_49 = mix ((tmpvar_47 * tmpvar_41.xzy), (tmpvar_48 * tmpvar_41.zxy), vec3(zxlerp_40));
  detailCoords_37 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xy = vec2(1.0, 1.0);
  tmpvar_50.z = s_38;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_50 * tmpvar_41.yxz), detailCoords_37, vec3(nylerp_39));
  detailCoords_37 = tmpvar_51;
  uv_36 = (((
    (0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_52;
  uv_52 = uv_36;
  highp vec2 uvCont_53;
  highp vec2 tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (0.5 * _CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_53);
  tmpvar_56.zw = dFdy(uvCont_53);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_36, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  mediump vec2 uv_59;
  mediump vec3 detailCoords_60;
  mediump float s_61;
  mediump float nylerp_62;
  mediump float zxlerp_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  highp float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, zxlerp_63);
  s_61 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, s_61, nylerp_62));
  s_61 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = -(s_61);
  mediump vec3 tmpvar_70;
  tmpvar_70.xz = vec2(1.0, -1.0);
  tmpvar_70.y = s_61;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix ((tmpvar_69 * tmpvar_41.xzy), (tmpvar_70 * tmpvar_41.zxy), vec3(zxlerp_63));
  detailCoords_60 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xy = vec2(1.0, 1.0);
  tmpvar_72.z = s_61;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix ((tmpvar_72 * tmpvar_41.yxz), detailCoords_60, vec3(nylerp_62));
  detailCoords_60 = tmpvar_73;
  uv_59 = (((
    (0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_74;
  uv_74 = uv_59;
  highp vec2 uvCont_75;
  highp vec2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_75);
  tmpvar_77.zw = dFdy(uvCont_75);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_59, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_80;
  shadow_80 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_81;
  lightDir_81 = xlv_TEXCOORD5;
  mediump vec3 viewDir_82;
  viewDir_82 = xlv_TEXCOORD1;
  mediump float atten_83;
  atten_83 = shadow_80;
  mediump vec4 c_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = normalize(lightDir_81);
  lightDir_81 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(viewDir_82);
  viewDir_82 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(normT_5);
  mediump float tmpvar_88;
  tmpvar_88 = dot (tmpvar_87, tmpvar_85);
  highp float tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp (dot (normalize(
    (tmpvar_85 + tmpvar_86)
  ), tmpvar_87), 0.0, 1.0);
  tmpvar_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (pow (tmpvar_89, _SpecularPower) * _SpecularColor.w);
  c_84.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_88) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_91)) * (atten_83 * 2.0));
  c_84.w = (tmpvar_88 * (atten_83 * 2.0));
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_SunDir);
  mediump vec3 lightDir_93;
  lightDir_93 = tmpvar_92;
  mediump vec3 normal_94;
  normal_94 = xlv_TEXCOORD3;
  mediump float tmpvar_95;
  tmpvar_95 = dot (normal_94, lightDir_93);
  color_6 = (c_84 * mix (1.0, clamp (
    floor((1.01 + tmpvar_95))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_95))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_96;
  tmpvar_96 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_96;
  tmpvar_1 = tmpvar_96;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_13;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
bool tb19;
highp float t20;
mediump float t16_22;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    tb19 = t10_19>=1.0;
    t16_4 = (tb19) ? 0.0 : 1.0;
    t10_19 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_5.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4 = t16_4 * t10_19;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_13.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t0.xx);
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t0.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_13.x = t16_4 * t10_3.w;
    t16_4 = t16_4 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_22 = dot(t10_5.xyz, t10_5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_7.xyz = vec3(t16_22) * t10_5.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_8.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_7.xyz, t16_8.xyz);
    vec3 txVec21 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_31 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec21, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_31 = t16_31 * t16_33 + _LightShadowData.x;
    t16_22 = dot(vec2(t16_31), vec2(t16_22));
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_31 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_31 + 1.00999999;
    t16_31 = t16_31 * -10.0;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_31 = t16_31 * t16_33 + 1.0;
    t16_22 = t16_31 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_31 = t16_13.x * t16_22 + (-t16_4);
    t16_13.x = t16_22 * t16_13.x;
    t16_1.w = t16_13.x * t16_31 + t16_4;
    t16_1.xyz = t16_13.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 305 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  float tmpvar_28;
  vec4 v_29;
  v_29 = (texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw) * alphaMask1);
  tmpvar_28 = ((v_29.x + v_29.y) + (v_29.z + v_29.w));
  vec4 tmpvar_30;
  tmpvar_30.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_30.w = tmpvar_28;
  cityoverlay_3.xyz = tmpvar_30.xyz;
  vec2 uv_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_32);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  float tmpvar_35;
  tmpvar_35 = float((max (tmpvar_33.x, tmpvar_33.z) >= tmpvar_33.y));
  float tmpvar_36;
  tmpvar_36 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_34), tmpvar_35));
  vec3 tmpvar_37;
  tmpvar_37.xz = vec2(1.0, -1.0);
  tmpvar_37.y = -(tmpvar_36);
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = tmpvar_36;
  vec3 tmpvar_39;
  tmpvar_39.xy = vec2(1.0, 1.0);
  tmpvar_39.z = tmpvar_36;
  vec3 tmpvar_40;
  tmpvar_40 = mix ((tmpvar_39 * tmpvar_32.yxz), mix ((tmpvar_37 * tmpvar_32.xzy), (tmpvar_38 * tmpvar_32.zxy), vec3(tmpvar_34)), vec3(tmpvar_35));
  uv_31 = (((
    (0.5 * tmpvar_40.yz)
   / 
    abs(tmpvar_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_41;
  vec2 tmpvar_42;
  float tmpvar_43;
  tmpvar_43 = (0.5 * _CityOverlayDetailScale);
  tmpvar_42 = abs((uv_31 - tmpvar_43));
  uvCont_41.x = max (tmpvar_42.x, tmpvar_42.y);
  uvCont_41.y = min (tmpvar_42.x, tmpvar_42.y);
  vec4 tmpvar_44;
  tmpvar_44.xy = dFdx(uvCont_41);
  tmpvar_44.zw = dFdy(uvCont_41);
  vec4 tmpvar_45;
  tmpvar_45 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_31, tmpvar_44.xy, tmpvar_44.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_45.xyz;
  vec2 uv_46;
  vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_32);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  float tmpvar_49;
  tmpvar_49 = float((max (tmpvar_47.x, tmpvar_47.z) >= tmpvar_47.y));
  float tmpvar_50;
  tmpvar_50 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_48), tmpvar_49));
  vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = -(tmpvar_50);
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = tmpvar_50;
  vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = tmpvar_50;
  vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_32.yxz), mix ((tmpvar_51 * tmpvar_32.xzy), (tmpvar_52 * tmpvar_32.zxy), vec3(tmpvar_48)), vec3(tmpvar_49));
  uv_46 = (((
    (0.5 * tmpvar_54.yz)
   / 
    abs(tmpvar_54.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_55;
  vec2 tmpvar_56;
  tmpvar_56 = abs((uv_46 - tmpvar_43));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  vec4 tmpvar_58;
  tmpvar_58 = texture2DGradARB (_CityLightOverlayDetailTex, uv_46, tmpvar_57.xy, tmpvar_57.zw);
  citylightoverlaydetail_1.xyz = tmpvar_58.xyz;
  cityoverlay_3.w = (tmpvar_28 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_45.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_58.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_58.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_59;
  vec3 tmpvar_60;
  tmpvar_60 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_61;
  tmpvar_61 = normalize(normal_20);
  float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_60);
  c_59.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_62) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_60 + normalize(xlv_TEXCOORD1)))
    , tmpvar_61), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_59.w = (tmpvar_62 * 2.0);
  float tmpvar_63;
  tmpvar_63 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_59 * mix (1.0, clamp (
    floor((1.01 + tmpvar_63))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_63))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_64;
  tmpvar_64 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_64;
  gl_FragData[0] = tmpvar_64;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 301 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump float tmpvar_36;
  mediump vec4 v_37;
  v_37 = (tmpvar_35 * alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  mediump vec2 uv_39;
  mediump vec3 detailCoords_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_43);
  s_41 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, s_41, nylerp_42));
  s_41 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = -(s_41);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = s_41;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_50 * tmpvar_44.xzy), (tmpvar_51 * tmpvar_44.zxy), vec3(zxlerp_43));
  detailCoords_40 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = s_41;
  highp vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_44.yxz), detailCoords_40, vec3(nylerp_42));
  detailCoords_40 = tmpvar_54;
  uv_39 = (((
    (0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_55;
  uv_55 = uv_39;
  highp vec2 uvCont_56;
  highp vec2 tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (0.5 * _CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  highp vec4 tmpvar_59;
  tmpvar_59.xy = dFdx(uvCont_56);
  tmpvar_59.zw = dFdy(uvCont_56);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_39, tmpvar_59.xy, tmpvar_59.zw);
  mediump vec4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_44.xzy), (tmpvar_73 * tmpvar_44.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_44.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_80;
  tmpvar_80.xy = dFdx(uvCont_78);
  tmpvar_80.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_62, tmpvar_80.xy, tmpvar_80.zw);
  mediump vec4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_83;
  lightDir_83 = xlv_TEXCOORD5;
  mediump vec3 viewDir_84;
  viewDir_84 = xlv_TEXCOORD1;
  mediump vec4 c_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(lightDir_83);
  lightDir_83 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(viewDir_84);
  viewDir_84 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(normT_5);
  mediump float tmpvar_89;
  tmpvar_89 = dot (tmpvar_88, tmpvar_86);
  highp float tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (dot (normalize(
    (tmpvar_86 + tmpvar_87)
  ), tmpvar_88), 0.0, 1.0);
  tmpvar_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (pow (tmpvar_90, _SpecularPower) * _SpecularColor.w);
  c_85.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_89) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_92)) * 2.0);
  c_85.w = (tmpvar_89 * 2.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(_SunDir);
  mediump vec3 lightDir_94;
  lightDir_94 = tmpvar_93;
  mediump vec3 normal_95;
  normal_95 = xlv_TEXCOORD3;
  mediump float tmpvar_96;
  tmpvar_96 = dot (normal_95, lightDir_94);
  color_6 = (c_85 * mix (1.0, clamp (
    floor((1.01 + tmpvar_96))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_96))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_97;
  tmpvar_97 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_97;
  tmpvar_1 = tmpvar_97;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec2 t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
highp vec3 t11;
highp int ti11;
bvec2 tb11;
mediump vec2 t16_15;
highp vec2 t20;
highp float t21;
lowp float t10_21;
highp int ti21;
highp float t22;
mediump float t16_25;
highp float t30;
highp float t31;
bool tb31;
highp float t32;
mediump float t16_35;
mediump float t16_37;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t10.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t10.z), abs(t10.y));
    t1.x = float(1.0) / t1.x;
    t11.x = min(abs(t10.z), abs(t10.y));
    t1.x = t1.x * t11.x;
    t11.x = t1.x * t1.x;
    t21 = t11.x * 0.0208350997 + -0.0851330012;
    t21 = t11.x * t21 + 0.180141002;
    t21 = t11.x * t21 + -0.330299497;
    t11.x = t11.x * t21 + 0.999866009;
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 1.57079637;
    tb31 = abs(t10.z)<abs(t10.y);
    t21 = tb31 ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    tb11.xy = lessThan(t10.zxzz, (-t10.zxzz)).xy;
    t11.x = tb11.x ? -3.14159274 : float(0.0);
    t1.x = t11.x + t1.x;
    t11.x = min(t10.z, t10.y);
    tb11.x = t11.x<(-t11.x);
    t31 = max(t10.z, t10.y);
    tb31 = t31>=(-t31);
    ti11 = int(uint(tb31) * 0xffffffffu & uint(tb11.x) * 0xffffffffu);
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    t11.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t11.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t31 = abs(t10.x) * -0.0187292993 + 0.0742610022;
    t31 = t31 * abs(t10.x) + -0.212114394;
    t31 = t31 * abs(t10.x) + 1.57072878;
    t22 = -abs(t10.x) + 1.0;
    t22 = sqrt(t22);
    t32 = t31 * t22;
    t32 = t32 * -2.0 + 3.14159274;
    t21 = tb11.y ? t32 : float(0.0);
    t21 = t31 * t22 + t21;
    t2.y = t21 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_5.xy = t10_4.xy * alphaMask1.xy;
    t16_5.x = t16_5.y + t16_5.x;
    t16_5.x = t10_4.z * alphaMask1.z + t16_5.x;
    t16_5.x = t10_4.w * alphaMask1.w + t16_5.x;
    t10_21 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_6.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_21>=1.0;
    t16_15.x = (tb1) ? 0.0 : 1.0;
    t16_5.x = t16_15.x * t16_5.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t10.y);
    tb11.x = abs(t10.z)>=abs(t10.y);
    t11.x = tb11.x ? 1.0 : float(0.0);
    t1.x = t11.x * t1.x + t10.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t10.z), abs(t10.y));
    tb1 = t1.x>=abs(t10.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t10.x;
    ti21 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti21) + ti0;
    t16_7.y = float(ti0);
    t16_8.y = (-t16_7.y);
    t16_8.xz = vec2(1.0, -1.0);
    t2.xyz = t10.yzx * t16_8.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t3.xyz = t16_7.xyz * t10.zyx + (-t2.xyz);
    t11.xyz = t11.xxx * t3.xyz + t2.xyz;
    t11.xyz = (-t16_7.xxy) * t10.xyz + t11.xyz;
    t0.xyz = t10.xyz * t16_7.xxy;
    t0.xyz = t1.xxx * t11.xyz + t0.xyz;
    t16_15.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_15.xy = t16_15.xy / abs(t0.xx);
    t16_15.xy = t16_15.xy + vec2(0.5, 0.5);
    t0.xy = t16_15.xy * vec2(_CityOverlayDetailScale);
    t20.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t20.y), abs(t20.x));
    t20.x = min(abs(t20.y), abs(t20.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t20.x);
    t1.y = dFdy(t20.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_15.x = t16_5.x * t10_3.w;
    t16_5.x = t16_5.x * t10_0.w;
    t16_7.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_25 = dot(t10_6.xyz, t10_6.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_8.xyz = vec3(t16_25) * t10_6.xyz;
    t16_25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_9.xyz = vec3(t16_25) * vs_TEXCOORD5.xyz;
    t16_25 = dot(t16_8.xyz, t16_9.xyz);
    t16_25 = t16_25 + t16_25;
    t30 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t30 = inversesqrt(t30);
    t1.xyz = vec3(float(t30) * _SunDir.xxyz.y, float(t30) * _SunDir.xxyz.z, float(t30) * float(_SunDir.z));
    t16_35 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_37 = t16_35 + 1.00999999;
    t16_35 = t16_35 * -10.0;
    t16_35 = clamp(t16_35, 0.0, 1.0);
    t16_37 = floor(t16_37);
    t16_37 = clamp(t16_37, 0.0, 1.0);
    t16_37 = t16_37 + -1.0;
    t16_35 = t16_35 * t16_37 + 1.0;
    t16_25 = t16_35 * t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    t16_25 = (-t16_25) + 1.0;
    t16_35 = t16_15.x * t16_25 + (-t16_5.x);
    t16_15.x = t16_25 * t16_15.x;
    t16_1.w = t16_15.x * t16_35 + t16_5.x;
    t16_1.xyz = t16_15.xxx * t16_7.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
bool tb1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
vec2 t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13.x = t7 * 0.0208350997 + -0.0851330012;
    t13.x = t7 * t13.x + 0.180141002;
    t13.x = t7 * t13.x + -0.330299497;
    t7 = t7 * t13.x + 0.999866009;
    t13.x = t7 * t1.x;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13.x = tb19 ? t13.x : float(0.0);
    t1.x = t1.x * t7 + t13.x;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13.x = tb7.y ? t20 : float(0.0);
    t13.x = t19 * t14 + t13.x;
    t2.y = t13.x * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t13.xy = t10_4.xy * alphaMask1.xy;
    t13.x = t13.y + t13.x;
    t13.x = t10_4.z * alphaMask1.z + t13.x;
    t13.x = t10_4.w * alphaMask1.w + t13.x;
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb1 = t10_4.w>=1.0;
    t1.x = (tb1) ? 0.0 : 1.0;
    t1.x = t1.x * t13.x;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t7 = t13.x * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t1.x = t1.x + t1.x;
    t13.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13.x = inversesqrt(t13.x);
    t2.xyz = t13.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13.x = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13.x + 1.00999999;
    t13.x = t13.x * -10.0;
    t13.x = clamp(t13.x, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13.x = t13.x * t19 + 1.0;
    t1.x = t13.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 307 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  float tmpvar_28;
  vec4 v_29;
  v_29 = (texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw) * alphaMask1);
  tmpvar_28 = ((v_29.x + v_29.y) + (v_29.z + v_29.w));
  vec4 tmpvar_30;
  tmpvar_30.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_30.w = tmpvar_28;
  cityoverlay_3.xyz = tmpvar_30.xyz;
  vec2 uv_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_32);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  float tmpvar_35;
  tmpvar_35 = float((max (tmpvar_33.x, tmpvar_33.z) >= tmpvar_33.y));
  float tmpvar_36;
  tmpvar_36 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_34), tmpvar_35));
  vec3 tmpvar_37;
  tmpvar_37.xz = vec2(1.0, -1.0);
  tmpvar_37.y = -(tmpvar_36);
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = tmpvar_36;
  vec3 tmpvar_39;
  tmpvar_39.xy = vec2(1.0, 1.0);
  tmpvar_39.z = tmpvar_36;
  vec3 tmpvar_40;
  tmpvar_40 = mix ((tmpvar_39 * tmpvar_32.yxz), mix ((tmpvar_37 * tmpvar_32.xzy), (tmpvar_38 * tmpvar_32.zxy), vec3(tmpvar_34)), vec3(tmpvar_35));
  uv_31 = (((
    (0.5 * tmpvar_40.yz)
   / 
    abs(tmpvar_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_41;
  vec2 tmpvar_42;
  float tmpvar_43;
  tmpvar_43 = (0.5 * _CityOverlayDetailScale);
  tmpvar_42 = abs((uv_31 - tmpvar_43));
  uvCont_41.x = max (tmpvar_42.x, tmpvar_42.y);
  uvCont_41.y = min (tmpvar_42.x, tmpvar_42.y);
  vec4 tmpvar_44;
  tmpvar_44.xy = dFdx(uvCont_41);
  tmpvar_44.zw = dFdy(uvCont_41);
  vec4 tmpvar_45;
  tmpvar_45 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_31, tmpvar_44.xy, tmpvar_44.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_45.xyz;
  vec2 uv_46;
  vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_32);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  float tmpvar_49;
  tmpvar_49 = float((max (tmpvar_47.x, tmpvar_47.z) >= tmpvar_47.y));
  float tmpvar_50;
  tmpvar_50 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_48), tmpvar_49));
  vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = -(tmpvar_50);
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = tmpvar_50;
  vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = tmpvar_50;
  vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_32.yxz), mix ((tmpvar_51 * tmpvar_32.xzy), (tmpvar_52 * tmpvar_32.zxy), vec3(tmpvar_48)), vec3(tmpvar_49));
  uv_46 = (((
    (0.5 * tmpvar_54.yz)
   / 
    abs(tmpvar_54.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_55;
  vec2 tmpvar_56;
  tmpvar_56 = abs((uv_46 - tmpvar_43));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  vec4 tmpvar_58;
  tmpvar_58 = texture2DGradARB (_CityLightOverlayDetailTex, uv_46, tmpvar_57.xy, tmpvar_57.zw);
  citylightoverlaydetail_1.xyz = tmpvar_58.xyz;
  cityoverlay_3.w = (tmpvar_28 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_45.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_58.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_58.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_59;
  tmpvar_59 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_60;
  vec3 tmpvar_61;
  tmpvar_61 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_62;
  tmpvar_62 = normalize(normal_20);
  float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_61);
  c_60.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_63) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_61 + normalize(xlv_TEXCOORD1)))
    , tmpvar_62), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_59.x * 2.0));
  c_60.w = (tmpvar_63 * (tmpvar_59.x * 2.0));
  float tmpvar_64;
  tmpvar_64 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_60 * mix (1.0, clamp (
    floor((1.01 + tmpvar_64))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_64))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_65;
  tmpvar_65 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_65;
  gl_FragData[0] = tmpvar_65;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 307 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump float tmpvar_36;
  mediump vec4 v_37;
  v_37 = (tmpvar_35 * alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  mediump vec2 uv_39;
  mediump vec3 detailCoords_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_43);
  s_41 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, s_41, nylerp_42));
  s_41 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = -(s_41);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = s_41;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_50 * tmpvar_44.xzy), (tmpvar_51 * tmpvar_44.zxy), vec3(zxlerp_43));
  detailCoords_40 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = s_41;
  highp vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_44.yxz), detailCoords_40, vec3(nylerp_42));
  detailCoords_40 = tmpvar_54;
  uv_39 = (((
    (0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_55;
  uv_55 = uv_39;
  highp vec2 uvCont_56;
  highp vec2 tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (0.5 * _CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  highp vec4 tmpvar_59;
  tmpvar_59.xy = dFdx(uvCont_56);
  tmpvar_59.zw = dFdy(uvCont_56);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_39, tmpvar_59.xy, tmpvar_59.zw);
  mediump vec4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_44.xzy), (tmpvar_73 * tmpvar_44.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_44.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_80;
  tmpvar_80.xy = dFdx(uvCont_78);
  tmpvar_80.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_62, tmpvar_80.xy, tmpvar_80.zw);
  mediump vec4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_83 = tmpvar_84;
  mediump vec3 lightDir_85;
  lightDir_85 = xlv_TEXCOORD5;
  mediump vec3 viewDir_86;
  viewDir_86 = xlv_TEXCOORD1;
  mediump float atten_87;
  atten_87 = tmpvar_83;
  mediump vec4 c_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(lightDir_85);
  lightDir_85 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = normalize(viewDir_86);
  viewDir_86 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91 = normalize(normT_5);
  mediump float tmpvar_92;
  tmpvar_92 = dot (tmpvar_91, tmpvar_89);
  highp float tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (normalize(
    (tmpvar_89 + tmpvar_90)
  ), tmpvar_91), 0.0, 1.0);
  tmpvar_93 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = (pow (tmpvar_93, _SpecularPower) * _SpecularColor.w);
  c_88.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_92) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_95)) * (atten_87 * 2.0));
  c_88.w = (tmpvar_92 * (atten_87 * 2.0));
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_SunDir);
  mediump vec3 lightDir_97;
  lightDir_97 = tmpvar_96;
  mediump vec3 normal_98;
  normal_98 = xlv_TEXCOORD3;
  mediump float tmpvar_99;
  tmpvar_99 = dot (normal_98, lightDir_97);
  color_6 = (c_88 * mix (1.0, clamp (
    floor((1.01 + tmpvar_99))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_99))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_100;
  tmpvar_100 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_100;
  tmpvar_1 = tmpvar_100;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
bool tb1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
vec2 t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13.x = t7 * 0.0208350997 + -0.0851330012;
    t13.x = t7 * t13.x + 0.180141002;
    t13.x = t7 * t13.x + -0.330299497;
    t7 = t7 * t13.x + 0.999866009;
    t13.x = t7 * t1.x;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13.x = tb19 ? t13.x : float(0.0);
    t1.x = t1.x * t7 + t13.x;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13.x = tb7.y ? t20 : float(0.0);
    t13.x = t19 * t14 + t13.x;
    t2.y = t13.x * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t13.xy = t10_4.xy * alphaMask1.xy;
    t13.x = t13.y + t13.x;
    t13.x = t10_4.z * alphaMask1.z + t13.x;
    t13.x = t10_4.w * alphaMask1.w + t13.x;
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb1 = t10_4.w>=1.0;
    t1.x = (tb1) ? 0.0 : 1.0;
    t1.x = t1.x * t13.x;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t7 = t13.x * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_2 = texture(_ShadowMapTexture, t13.xy);
    t1.x = dot(t10_2.xx, t1.xx);
    t13.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13.x = inversesqrt(t13.x);
    t2.xyz = t13.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13.x = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13.x + 1.00999999;
    t13.x = t13.x * -10.0;
    t13.x = clamp(t13.x, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13.x = t13.x * t19 + 1.0;
    t1.x = t13.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 305 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  float tmpvar_28;
  vec4 v_29;
  v_29 = (texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw) * alphaMask1);
  tmpvar_28 = ((v_29.x + v_29.y) + (v_29.z + v_29.w));
  vec4 tmpvar_30;
  tmpvar_30.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_30.w = tmpvar_28;
  cityoverlay_3.xyz = tmpvar_30.xyz;
  vec2 uv_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_32);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  float tmpvar_35;
  tmpvar_35 = float((max (tmpvar_33.x, tmpvar_33.z) >= tmpvar_33.y));
  float tmpvar_36;
  tmpvar_36 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_34), tmpvar_35));
  vec3 tmpvar_37;
  tmpvar_37.xz = vec2(1.0, -1.0);
  tmpvar_37.y = -(tmpvar_36);
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = tmpvar_36;
  vec3 tmpvar_39;
  tmpvar_39.xy = vec2(1.0, 1.0);
  tmpvar_39.z = tmpvar_36;
  vec3 tmpvar_40;
  tmpvar_40 = mix ((tmpvar_39 * tmpvar_32.yxz), mix ((tmpvar_37 * tmpvar_32.xzy), (tmpvar_38 * tmpvar_32.zxy), vec3(tmpvar_34)), vec3(tmpvar_35));
  uv_31 = (((
    (0.5 * tmpvar_40.yz)
   / 
    abs(tmpvar_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_41;
  vec2 tmpvar_42;
  float tmpvar_43;
  tmpvar_43 = (0.5 * _CityOverlayDetailScale);
  tmpvar_42 = abs((uv_31 - tmpvar_43));
  uvCont_41.x = max (tmpvar_42.x, tmpvar_42.y);
  uvCont_41.y = min (tmpvar_42.x, tmpvar_42.y);
  vec4 tmpvar_44;
  tmpvar_44.xy = dFdx(uvCont_41);
  tmpvar_44.zw = dFdy(uvCont_41);
  vec4 tmpvar_45;
  tmpvar_45 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_31, tmpvar_44.xy, tmpvar_44.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_45.xyz;
  vec2 uv_46;
  vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_32);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  float tmpvar_49;
  tmpvar_49 = float((max (tmpvar_47.x, tmpvar_47.z) >= tmpvar_47.y));
  float tmpvar_50;
  tmpvar_50 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_48), tmpvar_49));
  vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = -(tmpvar_50);
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = tmpvar_50;
  vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = tmpvar_50;
  vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_32.yxz), mix ((tmpvar_51 * tmpvar_32.xzy), (tmpvar_52 * tmpvar_32.zxy), vec3(tmpvar_48)), vec3(tmpvar_49));
  uv_46 = (((
    (0.5 * tmpvar_54.yz)
   / 
    abs(tmpvar_54.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_55;
  vec2 tmpvar_56;
  tmpvar_56 = abs((uv_46 - tmpvar_43));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  vec4 tmpvar_58;
  tmpvar_58 = texture2DGradARB (_CityLightOverlayDetailTex, uv_46, tmpvar_57.xy, tmpvar_57.zw);
  citylightoverlaydetail_1.xyz = tmpvar_58.xyz;
  cityoverlay_3.w = (tmpvar_28 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_45.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_58.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_58.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_59;
  vec3 tmpvar_60;
  tmpvar_60 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_61;
  tmpvar_61 = normalize(normal_20);
  float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_60);
  c_59.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_62) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_60 + normalize(xlv_TEXCOORD1)))
    , tmpvar_61), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_59.w = (tmpvar_62 * 2.0);
  float tmpvar_63;
  tmpvar_63 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_59 * mix (1.0, clamp (
    floor((1.01 + tmpvar_63))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_63))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_64;
  tmpvar_64 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_64;
  gl_FragData[0] = tmpvar_64;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 301 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump float tmpvar_36;
  mediump vec4 v_37;
  v_37 = (tmpvar_35 * alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  mediump vec2 uv_39;
  mediump vec3 detailCoords_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_43);
  s_41 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, s_41, nylerp_42));
  s_41 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = -(s_41);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = s_41;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_50 * tmpvar_44.xzy), (tmpvar_51 * tmpvar_44.zxy), vec3(zxlerp_43));
  detailCoords_40 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = s_41;
  highp vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_44.yxz), detailCoords_40, vec3(nylerp_42));
  detailCoords_40 = tmpvar_54;
  uv_39 = (((
    (0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_55;
  uv_55 = uv_39;
  highp vec2 uvCont_56;
  highp vec2 tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (0.5 * _CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  highp vec4 tmpvar_59;
  tmpvar_59.xy = dFdx(uvCont_56);
  tmpvar_59.zw = dFdy(uvCont_56);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_39, tmpvar_59.xy, tmpvar_59.zw);
  mediump vec4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_44.xzy), (tmpvar_73 * tmpvar_44.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_44.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_80;
  tmpvar_80.xy = dFdx(uvCont_78);
  tmpvar_80.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_62, tmpvar_80.xy, tmpvar_80.zw);
  mediump vec4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_83;
  lightDir_83 = xlv_TEXCOORD5;
  mediump vec3 viewDir_84;
  viewDir_84 = xlv_TEXCOORD1;
  mediump vec4 c_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(lightDir_83);
  lightDir_83 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(viewDir_84);
  viewDir_84 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(normT_5);
  mediump float tmpvar_89;
  tmpvar_89 = dot (tmpvar_88, tmpvar_86);
  highp float tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (dot (normalize(
    (tmpvar_86 + tmpvar_87)
  ), tmpvar_88), 0.0, 1.0);
  tmpvar_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (pow (tmpvar_90, _SpecularPower) * _SpecularColor.w);
  c_85.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_89) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_92)) * 2.0);
  c_85.w = (tmpvar_89 * 2.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(_SunDir);
  mediump vec3 lightDir_94;
  lightDir_94 = tmpvar_93;
  mediump vec3 normal_95;
  normal_95 = xlv_TEXCOORD3;
  mediump float tmpvar_96;
  tmpvar_96 = dot (normal_95, lightDir_94);
  color_6 = (c_85 * mix (1.0, clamp (
    floor((1.01 + tmpvar_96))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_96))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_97;
  tmpvar_97 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_97;
  tmpvar_1 = tmpvar_97;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec2 t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
highp vec3 t11;
highp int ti11;
bvec2 tb11;
mediump vec2 t16_15;
highp vec2 t20;
highp float t21;
lowp float t10_21;
highp int ti21;
highp float t22;
mediump float t16_25;
highp float t30;
highp float t31;
bool tb31;
highp float t32;
mediump float t16_35;
mediump float t16_37;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t10.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t10.z), abs(t10.y));
    t1.x = float(1.0) / t1.x;
    t11.x = min(abs(t10.z), abs(t10.y));
    t1.x = t1.x * t11.x;
    t11.x = t1.x * t1.x;
    t21 = t11.x * 0.0208350997 + -0.0851330012;
    t21 = t11.x * t21 + 0.180141002;
    t21 = t11.x * t21 + -0.330299497;
    t11.x = t11.x * t21 + 0.999866009;
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 1.57079637;
    tb31 = abs(t10.z)<abs(t10.y);
    t21 = tb31 ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    tb11.xy = lessThan(t10.zxzz, (-t10.zxzz)).xy;
    t11.x = tb11.x ? -3.14159274 : float(0.0);
    t1.x = t11.x + t1.x;
    t11.x = min(t10.z, t10.y);
    tb11.x = t11.x<(-t11.x);
    t31 = max(t10.z, t10.y);
    tb31 = t31>=(-t31);
    ti11 = int(uint(tb31) * 0xffffffffu & uint(tb11.x) * 0xffffffffu);
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    t11.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t11.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t31 = abs(t10.x) * -0.0187292993 + 0.0742610022;
    t31 = t31 * abs(t10.x) + -0.212114394;
    t31 = t31 * abs(t10.x) + 1.57072878;
    t22 = -abs(t10.x) + 1.0;
    t22 = sqrt(t22);
    t32 = t31 * t22;
    t32 = t32 * -2.0 + 3.14159274;
    t21 = tb11.y ? t32 : float(0.0);
    t21 = t31 * t22 + t21;
    t2.y = t21 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_5.xy = t10_4.xy * alphaMask1.xy;
    t16_5.x = t16_5.y + t16_5.x;
    t16_5.x = t10_4.z * alphaMask1.z + t16_5.x;
    t16_5.x = t10_4.w * alphaMask1.w + t16_5.x;
    t10_21 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_6.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_21>=1.0;
    t16_15.x = (tb1) ? 0.0 : 1.0;
    t16_5.x = t16_15.x * t16_5.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t10.y);
    tb11.x = abs(t10.z)>=abs(t10.y);
    t11.x = tb11.x ? 1.0 : float(0.0);
    t1.x = t11.x * t1.x + t10.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t10.z), abs(t10.y));
    tb1 = t1.x>=abs(t10.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t10.x;
    ti21 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti21) + ti0;
    t16_7.y = float(ti0);
    t16_8.y = (-t16_7.y);
    t16_8.xz = vec2(1.0, -1.0);
    t2.xyz = t10.yzx * t16_8.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t3.xyz = t16_7.xyz * t10.zyx + (-t2.xyz);
    t11.xyz = t11.xxx * t3.xyz + t2.xyz;
    t11.xyz = (-t16_7.xxy) * t10.xyz + t11.xyz;
    t0.xyz = t10.xyz * t16_7.xxy;
    t0.xyz = t1.xxx * t11.xyz + t0.xyz;
    t16_15.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_15.xy = t16_15.xy / abs(t0.xx);
    t16_15.xy = t16_15.xy + vec2(0.5, 0.5);
    t0.xy = t16_15.xy * vec2(_CityOverlayDetailScale);
    t20.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t20.y), abs(t20.x));
    t20.x = min(abs(t20.y), abs(t20.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t20.x);
    t1.y = dFdy(t20.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_15.x = t16_5.x * t10_3.w;
    t16_5.x = t16_5.x * t10_0.w;
    t16_7.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_25 = dot(t10_6.xyz, t10_6.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_8.xyz = vec3(t16_25) * t10_6.xyz;
    t16_25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_9.xyz = vec3(t16_25) * vs_TEXCOORD5.xyz;
    t16_25 = dot(t16_8.xyz, t16_9.xyz);
    t16_25 = t16_25 + t16_25;
    t30 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t30 = inversesqrt(t30);
    t1.xyz = vec3(float(t30) * _SunDir.xxyz.y, float(t30) * _SunDir.xxyz.z, float(t30) * float(_SunDir.z));
    t16_35 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_37 = t16_35 + 1.00999999;
    t16_35 = t16_35 * -10.0;
    t16_35 = clamp(t16_35, 0.0, 1.0);
    t16_37 = floor(t16_37);
    t16_37 = clamp(t16_37, 0.0, 1.0);
    t16_37 = t16_37 + -1.0;
    t16_35 = t16_35 * t16_37 + 1.0;
    t16_25 = t16_35 * t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    t16_25 = (-t16_25) + 1.0;
    t16_35 = t16_15.x * t16_25 + (-t16_5.x);
    t16_15.x = t16_25 * t16_15.x;
    t16_1.w = t16_15.x * t16_35 + t16_5.x;
    t16_1.xyz = t16_15.xxx * t16_7.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
bool tb1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
vec2 t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13.x = t7 * 0.0208350997 + -0.0851330012;
    t13.x = t7 * t13.x + 0.180141002;
    t13.x = t7 * t13.x + -0.330299497;
    t7 = t7 * t13.x + 0.999866009;
    t13.x = t7 * t1.x;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13.x = tb19 ? t13.x : float(0.0);
    t1.x = t1.x * t7 + t13.x;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13.x = tb7.y ? t20 : float(0.0);
    t13.x = t19 * t14 + t13.x;
    t2.y = t13.x * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t13.xy = t10_4.xy * alphaMask1.xy;
    t13.x = t13.y + t13.x;
    t13.x = t10_4.z * alphaMask1.z + t13.x;
    t13.x = t10_4.w * alphaMask1.w + t13.x;
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb1 = t10_4.w>=1.0;
    t1.x = (tb1) ? 0.0 : 1.0;
    t1.x = t1.x * t13.x;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t7 = t13.x * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t1.x = t1.x + t1.x;
    t13.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13.x = inversesqrt(t13.x);
    t2.xyz = t13.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13.x = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13.x + 1.00999999;
    t13.x = t13.x * -10.0;
    t13.x = clamp(t13.x, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13.x = t13.x * t19 + 1.0;
    t1.x = t13.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 307 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2);
  vec2 uv_22;
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (min (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0) / max (abs(
    (tmpvar_21.x / tmpvar_21.z)
  ), 1.0));
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  tmpvar_25 = (((
    ((((
      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)
     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)
   * tmpvar_25) + 0.9999793) * tmpvar_24);
  tmpvar_25 = (tmpvar_25 + (float(
    (abs((tmpvar_21.x / tmpvar_21.z)) > 1.0)
  ) * (
    (tmpvar_25 * -2.0)
   + 1.570796)));
  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.z)));
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.141593;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.141593);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);
  };
  uv_22.x = (0.5 + (0.1591549 * tmpvar_23));
  uv_22.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_21.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.570796 + (
      abs(tmpvar_21.y)
     * 
      (-0.2146018 + (abs(tmpvar_21.y) * (0.08656672 + (
        abs(tmpvar_21.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_26;
  uvCont_26.y = uv_22.y;
  uvCont_26.x = abs((uv_22.x - 0.5));
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_26);
  tmpvar_27.zw = dFdy(uvCont_26);
  float tmpvar_28;
  vec4 v_29;
  v_29 = (texture2DGradARB (_CityOverlayTex, uv_22, tmpvar_27.xy, tmpvar_27.zw) * alphaMask1);
  tmpvar_28 = ((v_29.x + v_29.y) + (v_29.z + v_29.w));
  vec4 tmpvar_30;
  tmpvar_30.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_30.w = tmpvar_28;
  cityoverlay_3.xyz = tmpvar_30.xyz;
  vec2 uv_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_32);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  float tmpvar_35;
  tmpvar_35 = float((max (tmpvar_33.x, tmpvar_33.z) >= tmpvar_33.y));
  float tmpvar_36;
  tmpvar_36 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_34), tmpvar_35));
  vec3 tmpvar_37;
  tmpvar_37.xz = vec2(1.0, -1.0);
  tmpvar_37.y = -(tmpvar_36);
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = tmpvar_36;
  vec3 tmpvar_39;
  tmpvar_39.xy = vec2(1.0, 1.0);
  tmpvar_39.z = tmpvar_36;
  vec3 tmpvar_40;
  tmpvar_40 = mix ((tmpvar_39 * tmpvar_32.yxz), mix ((tmpvar_37 * tmpvar_32.xzy), (tmpvar_38 * tmpvar_32.zxy), vec3(tmpvar_34)), vec3(tmpvar_35));
  uv_31 = (((
    (0.5 * tmpvar_40.yz)
   / 
    abs(tmpvar_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_41;
  vec2 tmpvar_42;
  float tmpvar_43;
  tmpvar_43 = (0.5 * _CityOverlayDetailScale);
  tmpvar_42 = abs((uv_31 - tmpvar_43));
  uvCont_41.x = max (tmpvar_42.x, tmpvar_42.y);
  uvCont_41.y = min (tmpvar_42.x, tmpvar_42.y);
  vec4 tmpvar_44;
  tmpvar_44.xy = dFdx(uvCont_41);
  tmpvar_44.zw = dFdy(uvCont_41);
  vec4 tmpvar_45;
  tmpvar_45 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_31, tmpvar_44.xy, tmpvar_44.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_45.xyz;
  vec2 uv_46;
  vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_32);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  float tmpvar_49;
  tmpvar_49 = float((max (tmpvar_47.x, tmpvar_47.z) >= tmpvar_47.y));
  float tmpvar_50;
  tmpvar_50 = sign(mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_48), tmpvar_49));
  vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = -(tmpvar_50);
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = tmpvar_50;
  vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = tmpvar_50;
  vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_32.yxz), mix ((tmpvar_51 * tmpvar_32.xzy), (tmpvar_52 * tmpvar_32.zxy), vec3(tmpvar_48)), vec3(tmpvar_49));
  uv_46 = (((
    (0.5 * tmpvar_54.yz)
   / 
    abs(tmpvar_54.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_55;
  vec2 tmpvar_56;
  tmpvar_56 = abs((uv_46 - tmpvar_43));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  vec4 tmpvar_58;
  tmpvar_58 = texture2DGradARB (_CityLightOverlayDetailTex, uv_46, tmpvar_57.xy, tmpvar_57.zw);
  citylightoverlaydetail_1.xyz = tmpvar_58.xyz;
  cityoverlay_3.w = (tmpvar_28 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_45.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_58.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_58.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_59;
  tmpvar_59 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_60;
  vec3 tmpvar_61;
  tmpvar_61 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_62;
  tmpvar_62 = normalize(normal_20);
  float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_61);
  c_60.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_63) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_61 + normalize(xlv_TEXCOORD1)))
    , tmpvar_62), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_59.x * 2.0));
  c_60.w = (tmpvar_63 * (tmpvar_59.x * 2.0));
  float tmpvar_64;
  tmpvar_64 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_60 * mix (1.0, clamp (
    floor((1.01 + tmpvar_64))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_64))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_65;
  tmpvar_65 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_65;
  gl_FragData[0] = tmpvar_65;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 307 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump float tmpvar_36;
  mediump vec4 v_37;
  v_37 = (tmpvar_35 * alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  mediump vec2 uv_39;
  mediump vec3 detailCoords_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_43);
  s_41 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, s_41, nylerp_42));
  s_41 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = -(s_41);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = s_41;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_50 * tmpvar_44.xzy), (tmpvar_51 * tmpvar_44.zxy), vec3(zxlerp_43));
  detailCoords_40 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = s_41;
  highp vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_44.yxz), detailCoords_40, vec3(nylerp_42));
  detailCoords_40 = tmpvar_54;
  uv_39 = (((
    (0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_55;
  uv_55 = uv_39;
  highp vec2 uvCont_56;
  highp vec2 tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (0.5 * _CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  highp vec4 tmpvar_59;
  tmpvar_59.xy = dFdx(uvCont_56);
  tmpvar_59.zw = dFdy(uvCont_56);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_39, tmpvar_59.xy, tmpvar_59.zw);
  mediump vec4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_44.xzy), (tmpvar_73 * tmpvar_44.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_44.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_80;
  tmpvar_80.xy = dFdx(uvCont_78);
  tmpvar_80.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_62, tmpvar_80.xy, tmpvar_80.zw);
  mediump vec4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_83 = tmpvar_84;
  mediump vec3 lightDir_85;
  lightDir_85 = xlv_TEXCOORD5;
  mediump vec3 viewDir_86;
  viewDir_86 = xlv_TEXCOORD1;
  mediump float atten_87;
  atten_87 = tmpvar_83;
  mediump vec4 c_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(lightDir_85);
  lightDir_85 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = normalize(viewDir_86);
  viewDir_86 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91 = normalize(normT_5);
  mediump float tmpvar_92;
  tmpvar_92 = dot (tmpvar_91, tmpvar_89);
  highp float tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (normalize(
    (tmpvar_89 + tmpvar_90)
  ), tmpvar_91), 0.0, 1.0);
  tmpvar_93 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = (pow (tmpvar_93, _SpecularPower) * _SpecularColor.w);
  c_88.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_92) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_95)) * (atten_87 * 2.0));
  c_88.w = (tmpvar_92 * (atten_87 * 2.0));
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_SunDir);
  mediump vec3 lightDir_97;
  lightDir_97 = tmpvar_96;
  mediump vec3 normal_98;
  normal_98 = xlv_TEXCOORD3;
  mediump float tmpvar_99;
  tmpvar_99 = dot (normal_98, lightDir_97);
  color_6 = (c_88 * mix (1.0, clamp (
    floor((1.01 + tmpvar_99))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_99))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_100;
  tmpvar_100 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_100;
  tmpvar_1 = tmpvar_100;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D _CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
bool tb1;
vec3 t2;
lowp vec4 t10_2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec4 t5;
vec3 t6;
float t7;
int ti7;
bvec2 tb7;
vec2 t12;
vec2 t13;
bool tb13;
float t14;
float t19;
int ti19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7 = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7;
    t7 = t1.x * t1.x;
    t13.x = t7 * 0.0208350997 + -0.0851330012;
    t13.x = t7 * t13.x + 0.180141002;
    t13.x = t7 * t13.x + -0.330299497;
    t7 = t7 * t13.x + 0.999866009;
    t13.x = t7 * t1.x;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13.x = tb19 ? t13.x : float(0.0);
    t1.x = t1.x * t7 + t13.x;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7 = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7 + t1.x;
    t7 = min(t6.z, t6.y);
    tb7.x = t7<(-t7);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7 = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13.x = tb7.y ? t20 : float(0.0);
    t13.x = t19 * t14 + t13.x;
    t2.y = t13.x * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t13.xy = t10_4.xy * alphaMask1.xy;
    t13.x = t13.y + t13.x;
    t13.x = t10_4.z * alphaMask1.z + t13.x;
    t13.x = t10_4.w * alphaMask1.w + t13.x;
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t2.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb1 = t10_4.w>=1.0;
    t1.x = (tb1) ? 0.0 : 1.0;
    t1.x = t1.x * t13.x;
    t7 = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb13 = abs(t6.z)>=abs(t6.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t7 = t13.x * t7 + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t7;
    t7 = max(abs(t6.z), abs(t6.y));
    tb7.x = t7>=abs(t6.x);
    t7 = tb7.x ? 1.0 : float(0.0);
    t0.x = t7 * t0.x + t6.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t3.xxy) * t6.xyz + t4.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = vec3(t7) * t4.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t7 = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t7);
    t4.x = dFdy(t7);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t5 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t7 = t1.x * t5.w;
    t0.w = t1.x * t0.w;
    t1.x = dot(t2.xy, t2.xy);
    t1.x = min(t1.x, 1.0);
    t1.x = (-t1.x) + 1.0;
    t2.z = sqrt(t1.x);
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xzw = t1.xxx * t2.xyz;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xzw, t2.xyz);
    t13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_2 = texture(_ShadowMapTexture, t13.xy);
    t1.x = dot(t10_2.xx, t1.xx);
    t13.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t13.x = inversesqrt(t13.x);
    t2.xyz = t13.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t13.x = dot(vs_TEXCOORD3.xyz, t2.xyz);
    t19 = t13.x + 1.00999999;
    t13.x = t13.x * -10.0;
    t13.x = clamp(t13.x, 0.0, 1.0);
    t19 = floor(t19);
    t19 = clamp(t19, 0.0, 1.0);
    t19 = t19 + -1.0;
    t13.x = t13.x * t19 + 1.0;
    t1.x = t13.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t5.w = t1.x * t7;
    t1 = (-t0) + t5;
    SV_Target0 = t5.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 306 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump float tmpvar_36;
  mediump vec4 v_37;
  v_37 = (tmpvar_35 * alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  mediump vec2 uv_39;
  mediump vec3 detailCoords_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_43);
  s_41 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, s_41, nylerp_42));
  s_41 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = -(s_41);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = s_41;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_50 * tmpvar_44.xzy), (tmpvar_51 * tmpvar_44.zxy), vec3(zxlerp_43));
  detailCoords_40 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = s_41;
  highp vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_44.yxz), detailCoords_40, vec3(nylerp_42));
  detailCoords_40 = tmpvar_54;
  uv_39 = (((
    (0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_55;
  uv_55 = uv_39;
  highp vec2 uvCont_56;
  highp vec2 tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (0.5 * _CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  highp vec4 tmpvar_59;
  tmpvar_59.xy = dFdx(uvCont_56);
  tmpvar_59.zw = dFdy(uvCont_56);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_39, tmpvar_59.xy, tmpvar_59.zw);
  mediump vec4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_44.xzy), (tmpvar_73 * tmpvar_44.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_44.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_80;
  tmpvar_80.xy = dFdx(uvCont_78);
  tmpvar_80.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_62, tmpvar_80.xy, tmpvar_80.zw);
  mediump vec4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_83;
  shadow_83 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_84;
  lightDir_84 = xlv_TEXCOORD5;
  mediump vec3 viewDir_85;
  viewDir_85 = xlv_TEXCOORD1;
  mediump float atten_86;
  atten_86 = shadow_83;
  mediump vec4 c_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(lightDir_84);
  lightDir_84 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(viewDir_85);
  viewDir_85 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = normalize(normT_5);
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, tmpvar_88);
  highp float tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (normalize(
    (tmpvar_88 + tmpvar_89)
  ), tmpvar_90), 0.0, 1.0);
  tmpvar_92 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = (pow (tmpvar_92, _SpecularPower) * _SpecularColor.w);
  c_87.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_91) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_94)) * (atten_86 * 2.0));
  c_87.w = (tmpvar_91 * (atten_86 * 2.0));
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize(_SunDir);
  mediump vec3 lightDir_96;
  lightDir_96 = tmpvar_95;
  mediump vec3 normal_97;
  normal_97 = xlv_TEXCOORD3;
  mediump float tmpvar_98;
  tmpvar_98 = dot (normal_97, lightDir_96);
  color_6 = (c_87 * mix (1.0, clamp (
    floor((1.01 + tmpvar_98))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_98))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_99;
  tmpvar_99 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_99;
  tmpvar_1 = tmpvar_99;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec2 t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
highp vec3 t11;
highp int ti11;
bvec2 tb11;
mediump vec2 t16_15;
highp vec2 t20;
highp float t21;
lowp float t10_21;
highp int ti21;
highp float t22;
mediump float t16_25;
highp float t30;
highp float t31;
bool tb31;
highp float t32;
mediump float t16_35;
mediump float t16_37;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t10.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t10.z), abs(t10.y));
    t1.x = float(1.0) / t1.x;
    t11.x = min(abs(t10.z), abs(t10.y));
    t1.x = t1.x * t11.x;
    t11.x = t1.x * t1.x;
    t21 = t11.x * 0.0208350997 + -0.0851330012;
    t21 = t11.x * t21 + 0.180141002;
    t21 = t11.x * t21 + -0.330299497;
    t11.x = t11.x * t21 + 0.999866009;
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 1.57079637;
    tb31 = abs(t10.z)<abs(t10.y);
    t21 = tb31 ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    tb11.xy = lessThan(t10.zxzz, (-t10.zxzz)).xy;
    t11.x = tb11.x ? -3.14159274 : float(0.0);
    t1.x = t11.x + t1.x;
    t11.x = min(t10.z, t10.y);
    tb11.x = t11.x<(-t11.x);
    t31 = max(t10.z, t10.y);
    tb31 = t31>=(-t31);
    ti11 = int(uint(tb31) * 0xffffffffu & uint(tb11.x) * 0xffffffffu);
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    t11.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t11.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t31 = abs(t10.x) * -0.0187292993 + 0.0742610022;
    t31 = t31 * abs(t10.x) + -0.212114394;
    t31 = t31 * abs(t10.x) + 1.57072878;
    t22 = -abs(t10.x) + 1.0;
    t22 = sqrt(t22);
    t32 = t31 * t22;
    t32 = t32 * -2.0 + 3.14159274;
    t21 = tb11.y ? t32 : float(0.0);
    t21 = t31 * t22 + t21;
    t2.y = t21 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_5.xy = t10_4.xy * alphaMask1.xy;
    t16_5.x = t16_5.y + t16_5.x;
    t16_5.x = t10_4.z * alphaMask1.z + t16_5.x;
    t16_5.x = t10_4.w * alphaMask1.w + t16_5.x;
    t10_21 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_6.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_21>=1.0;
    t16_15.x = (tb1) ? 0.0 : 1.0;
    t16_5.x = t16_15.x * t16_5.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t10.y);
    tb11.x = abs(t10.z)>=abs(t10.y);
    t11.x = tb11.x ? 1.0 : float(0.0);
    t1.x = t11.x * t1.x + t10.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t10.z), abs(t10.y));
    tb1 = t1.x>=abs(t10.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t10.x;
    ti21 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti21) + ti0;
    t16_7.y = float(ti0);
    t16_8.y = (-t16_7.y);
    t16_8.xz = vec2(1.0, -1.0);
    t2.xyz = t10.yzx * t16_8.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t3.xyz = t16_7.xyz * t10.zyx + (-t2.xyz);
    t11.xyz = t11.xxx * t3.xyz + t2.xyz;
    t11.xyz = (-t16_7.xxy) * t10.xyz + t11.xyz;
    t0.xyz = t10.xyz * t16_7.xxy;
    t0.xyz = t1.xxx * t11.xyz + t0.xyz;
    t16_15.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_15.xy = t16_15.xy / abs(t0.xx);
    t16_15.xy = t16_15.xy + vec2(0.5, 0.5);
    t0.xy = t16_15.xy * vec2(_CityOverlayDetailScale);
    t20.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t20.y), abs(t20.x));
    t20.x = min(abs(t20.y), abs(t20.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t20.x);
    t1.y = dFdy(t20.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_15.x = t16_5.x * t10_3.w;
    t16_5.x = t16_5.x * t10_0.w;
    t16_7.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_25 = dot(t10_6.xyz, t10_6.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_8.xyz = vec3(t16_25) * t10_6.xyz;
    t16_25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_9.xyz = vec3(t16_25) * vs_TEXCOORD5.xyz;
    t16_25 = dot(t16_8.xyz, t16_9.xyz);
    vec3 txVec14 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    t16_37 = (-_LightShadowData.x) + 1.0;
    t16_35 = t16_35 * t16_37 + _LightShadowData.x;
    t16_25 = dot(vec2(t16_35), vec2(t16_25));
    t30 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t30 = inversesqrt(t30);
    t1.xyz = vec3(float(t30) * _SunDir.xxyz.y, float(t30) * _SunDir.xxyz.z, float(t30) * float(_SunDir.z));
    t16_35 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_37 = t16_35 + 1.00999999;
    t16_35 = t16_35 * -10.0;
    t16_35 = clamp(t16_35, 0.0, 1.0);
    t16_37 = floor(t16_37);
    t16_37 = clamp(t16_37, 0.0, 1.0);
    t16_37 = t16_37 + -1.0;
    t16_35 = t16_35 * t16_37 + 1.0;
    t16_25 = t16_35 * t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    t16_25 = (-t16_25) + 1.0;
    t16_35 = t16_15.x * t16_25 + (-t16_5.x);
    t16_15.x = t16_25 * t16_15.x;
    t16_1.w = t16_15.x * t16_35 + t16_5.x;
    t16_1.xyz = t16_15.xxx * t16_7.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 306 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D _CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_28;
  highp float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  highp float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_32);
  tmpvar_33.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityOverlayTex, uv_28, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump float tmpvar_36;
  mediump vec4 v_37;
  v_37 = (tmpvar_35 * alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  mediump vec2 uv_39;
  mediump vec3 detailCoords_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_43);
  s_41 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, s_41, nylerp_42));
  s_41 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = -(s_41);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = s_41;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_50 * tmpvar_44.xzy), (tmpvar_51 * tmpvar_44.zxy), vec3(zxlerp_43));
  detailCoords_40 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = s_41;
  highp vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_44.yxz), detailCoords_40, vec3(nylerp_42));
  detailCoords_40 = tmpvar_54;
  uv_39 = (((
    (0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_55;
  uv_55 = uv_39;
  highp vec2 uvCont_56;
  highp vec2 tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (0.5 * _CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  highp vec4 tmpvar_59;
  tmpvar_59.xy = dFdx(uvCont_56);
  tmpvar_59.zw = dFdy(uvCont_56);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_39, tmpvar_59.xy, tmpvar_59.zw);
  mediump vec4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_44.xzy), (tmpvar_73 * tmpvar_44.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_44.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_80;
  tmpvar_80.xy = dFdx(uvCont_78);
  tmpvar_80.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_62, tmpvar_80.xy, tmpvar_80.zw);
  mediump vec4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_83;
  shadow_83 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_84;
  lightDir_84 = xlv_TEXCOORD5;
  mediump vec3 viewDir_85;
  viewDir_85 = xlv_TEXCOORD1;
  mediump float atten_86;
  atten_86 = shadow_83;
  mediump vec4 c_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(lightDir_84);
  lightDir_84 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(viewDir_85);
  viewDir_85 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = normalize(normT_5);
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, tmpvar_88);
  highp float tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (normalize(
    (tmpvar_88 + tmpvar_89)
  ), tmpvar_90), 0.0, 1.0);
  tmpvar_92 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = (pow (tmpvar_92, _SpecularPower) * _SpecularColor.w);
  c_87.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_91) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_94)) * (atten_86 * 2.0));
  c_87.w = (tmpvar_91 * (atten_86 * 2.0));
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize(_SunDir);
  mediump vec3 lightDir_96;
  lightDir_96 = tmpvar_95;
  mediump vec3 normal_97;
  normal_97 = xlv_TEXCOORD3;
  mediump float tmpvar_98;
  tmpvar_98 = dot (normal_97, lightDir_96);
  color_6 = (c_87 * mix (1.0, clamp (
    floor((1.01 + tmpvar_98))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_98))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_99;
  tmpvar_99 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_99;
  tmpvar_1 = tmpvar_99;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec2 t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
highp vec3 t11;
highp int ti11;
bvec2 tb11;
mediump vec2 t16_15;
highp vec2 t20;
highp float t21;
lowp float t10_21;
highp int ti21;
highp float t22;
mediump float t16_25;
highp float t30;
highp float t31;
bool tb31;
highp float t32;
mediump float t16_35;
mediump float t16_37;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t10.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t10.z), abs(t10.y));
    t1.x = float(1.0) / t1.x;
    t11.x = min(abs(t10.z), abs(t10.y));
    t1.x = t1.x * t11.x;
    t11.x = t1.x * t1.x;
    t21 = t11.x * 0.0208350997 + -0.0851330012;
    t21 = t11.x * t21 + 0.180141002;
    t21 = t11.x * t21 + -0.330299497;
    t11.x = t11.x * t21 + 0.999866009;
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 1.57079637;
    tb31 = abs(t10.z)<abs(t10.y);
    t21 = tb31 ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    tb11.xy = lessThan(t10.zxzz, (-t10.zxzz)).xy;
    t11.x = tb11.x ? -3.14159274 : float(0.0);
    t1.x = t11.x + t1.x;
    t11.x = min(t10.z, t10.y);
    tb11.x = t11.x<(-t11.x);
    t31 = max(t10.z, t10.y);
    tb31 = t31>=(-t31);
    ti11 = int(uint(tb31) * 0xffffffffu & uint(tb11.x) * 0xffffffffu);
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    t11.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t11.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t31 = abs(t10.x) * -0.0187292993 + 0.0742610022;
    t31 = t31 * abs(t10.x) + -0.212114394;
    t31 = t31 * abs(t10.x) + 1.57072878;
    t22 = -abs(t10.x) + 1.0;
    t22 = sqrt(t22);
    t32 = t31 * t22;
    t32 = t32 * -2.0 + 3.14159274;
    t21 = tb11.y ? t32 : float(0.0);
    t21 = t31 * t22 + t21;
    t2.y = t21 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_CityOverlayTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_5.xy = t10_4.xy * alphaMask1.xy;
    t16_5.x = t16_5.y + t16_5.x;
    t16_5.x = t10_4.z * alphaMask1.z + t16_5.x;
    t16_5.x = t10_4.w * alphaMask1.w + t16_5.x;
    t10_21 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_6.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_21>=1.0;
    t16_15.x = (tb1) ? 0.0 : 1.0;
    t16_5.x = t16_15.x * t16_5.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t10.y);
    tb11.x = abs(t10.z)>=abs(t10.y);
    t11.x = tb11.x ? 1.0 : float(0.0);
    t1.x = t11.x * t1.x + t10.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t10.z), abs(t10.y));
    tb1 = t1.x>=abs(t10.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t10.x;
    ti21 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti21) + ti0;
    t16_7.y = float(ti0);
    t16_8.y = (-t16_7.y);
    t16_8.xz = vec2(1.0, -1.0);
    t2.xyz = t10.yzx * t16_8.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t3.xyz = t16_7.xyz * t10.zyx + (-t2.xyz);
    t11.xyz = t11.xxx * t3.xyz + t2.xyz;
    t11.xyz = (-t16_7.xxy) * t10.xyz + t11.xyz;
    t0.xyz = t10.xyz * t16_7.xxy;
    t0.xyz = t1.xxx * t11.xyz + t0.xyz;
    t16_15.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_15.xy = t16_15.xy / abs(t0.xx);
    t16_15.xy = t16_15.xy + vec2(0.5, 0.5);
    t0.xy = t16_15.xy * vec2(_CityOverlayDetailScale);
    t20.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t20.y), abs(t20.x));
    t20.x = min(abs(t20.y), abs(t20.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t20.x);
    t1.y = dFdy(t20.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_15.x = t16_5.x * t10_3.w;
    t16_5.x = t16_5.x * t10_0.w;
    t16_7.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_25 = dot(t10_6.xyz, t10_6.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_8.xyz = vec3(t16_25) * t10_6.xyz;
    t16_25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_9.xyz = vec3(t16_25) * vs_TEXCOORD5.xyz;
    t16_25 = dot(t16_8.xyz, t16_9.xyz);
    vec3 txVec22 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec22, 0.0);
    t16_37 = (-_LightShadowData.x) + 1.0;
    t16_35 = t16_35 * t16_37 + _LightShadowData.x;
    t16_25 = dot(vec2(t16_35), vec2(t16_25));
    t30 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t30 = inversesqrt(t30);
    t1.xyz = vec3(float(t30) * _SunDir.xxyz.y, float(t30) * _SunDir.xxyz.z, float(t30) * float(_SunDir.z));
    t16_35 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_37 = t16_35 + 1.00999999;
    t16_35 = t16_35 * -10.0;
    t16_35 = clamp(t16_35, 0.0, 1.0);
    t16_37 = floor(t16_37);
    t16_37 = clamp(t16_37, 0.0, 1.0);
    t16_37 = t16_37 + -1.0;
    t16_35 = t16_35 * t16_37 + 1.0;
    t16_25 = t16_35 * t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    t16_25 = (-t16_25) + 1.0;
    t16_35 = t16_15.x * t16_25 + (-t16_5.x);
    t16_15.x = t16_25 * t16_15.x;
    t16_1.w = t16_15.x * t16_35 + t16_5.x;
    t16_1.xyz = t16_15.xxx * t16_7.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MAP_TYPE_1" "ALPHAMAP_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 235 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec4 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2);
  tmpvar_21 = textureCube (cube_CityOverlayTex, tmpvar_22);
  cityoverlay_3.xyz = tmpvar_21.xyz;
  vec2 uv_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(tmpvar_22);
  float tmpvar_25;
  tmpvar_25 = float((tmpvar_24.z >= tmpvar_24.x));
  float tmpvar_26;
  tmpvar_26 = float((max (tmpvar_24.x, tmpvar_24.z) >= tmpvar_24.y));
  float tmpvar_27;
  tmpvar_27 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_25), tmpvar_26));
  vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, -1.0);
  tmpvar_28.y = -(tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29.xz = vec2(1.0, -1.0);
  tmpvar_29.y = tmpvar_27;
  vec3 tmpvar_30;
  tmpvar_30.xy = vec2(1.0, 1.0);
  tmpvar_30.z = tmpvar_27;
  vec3 tmpvar_31;
  tmpvar_31 = mix ((tmpvar_30 * tmpvar_22.yxz), mix ((tmpvar_28 * tmpvar_22.xzy), (tmpvar_29 * tmpvar_22.zxy), vec3(tmpvar_25)), vec3(tmpvar_26));
  uv_23 = (((
    (0.5 * tmpvar_31.yz)
   / 
    abs(tmpvar_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_32;
  vec2 tmpvar_33;
  float tmpvar_34;
  tmpvar_34 = (0.5 * _CityOverlayDetailScale);
  tmpvar_33 = abs((uv_23 - tmpvar_34));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  vec4 tmpvar_35;
  tmpvar_35.xy = dFdx(uvCont_32);
  tmpvar_35.zw = dFdy(uvCont_32);
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_23, tmpvar_35.xy, tmpvar_35.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_22);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_22.yxz), mix ((tmpvar_42 * tmpvar_22.xzy), (tmpvar_43 * tmpvar_22.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  tmpvar_47 = abs((uv_37 - tmpvar_34));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  vec4 tmpvar_49;
  tmpvar_49 = texture2DGradARB (_CityLightOverlayDetailTex, uv_37, tmpvar_48.xy, tmpvar_48.zw);
  citylightoverlaydetail_1.xyz = tmpvar_49.xyz;
  cityoverlay_3.w = (tmpvar_21.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_36.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_49.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_49.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_50;
  vec3 tmpvar_51;
  tmpvar_51 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_52;
  tmpvar_52 = normalize(normal_20);
  float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_51);
  c_50.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_53) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_51 + normalize(xlv_TEXCOORD1)))
    , tmpvar_52), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_50.w = (tmpvar_53 * 2.0);
  float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_50 * mix (1.0, clamp (
    floor((1.01 + tmpvar_54))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_54))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_55;
  tmpvar_55 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_55;
  gl_FragData[0] = tmpvar_55;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 231 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  mediump vec2 uv_30;
  mediump vec3 detailCoords_31;
  mediump float s_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_34);
  s_32 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, s_32, nylerp_33));
  s_32 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(s_32);
  mediump vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = s_32;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix ((tmpvar_40 * tmpvar_27.xzy), (tmpvar_41 * tmpvar_27.zxy), vec3(zxlerp_34));
  detailCoords_31 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xy = vec2(1.0, 1.0);
  tmpvar_43.z = s_32;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_43 * tmpvar_27.yxz), detailCoords_31, vec3(nylerp_33));
  detailCoords_31 = tmpvar_44;
  uv_30 = (((
    (0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_45;
  uv_45 = uv_30;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_30, tmpvar_49.xy, tmpvar_49.zw);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  mediump vec2 uv_52;
  mediump vec3 detailCoords_53;
  mediump float s_54;
  mediump float nylerp_55;
  mediump float zxlerp_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  highp float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_56);
  s_54 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, s_54, nylerp_55));
  s_54 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62.xz = vec2(1.0, -1.0);
  tmpvar_62.y = -(s_54);
  mediump vec3 tmpvar_63;
  tmpvar_63.xz = vec2(1.0, -1.0);
  tmpvar_63.y = s_54;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix ((tmpvar_62 * tmpvar_27.xzy), (tmpvar_63 * tmpvar_27.zxy), vec3(zxlerp_56));
  detailCoords_53 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xy = vec2(1.0, 1.0);
  tmpvar_65.z = s_54;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix ((tmpvar_65 * tmpvar_27.yxz), detailCoords_53, vec3(nylerp_55));
  detailCoords_53 = tmpvar_66;
  uv_52 = (((
    (0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_67;
  uv_67 = uv_52;
  highp vec2 uvCont_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  highp vec4 tmpvar_70;
  tmpvar_70.xy = dFdx(uvCont_68);
  tmpvar_70.zw = dFdy(uvCont_68);
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_52, tmpvar_70.xy, tmpvar_70.zw);
  mediump vec4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_73;
  lightDir_73 = xlv_TEXCOORD5;
  mediump vec3 viewDir_74;
  viewDir_74 = xlv_TEXCOORD1;
  mediump vec4 c_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(lightDir_73);
  lightDir_73 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(viewDir_74);
  viewDir_74 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(normT_5);
  mediump float tmpvar_79;
  tmpvar_79 = dot (tmpvar_78, tmpvar_76);
  highp float tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (dot (normalize(
    (tmpvar_76 + tmpvar_77)
  ), tmpvar_78), 0.0, 1.0);
  tmpvar_80 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (pow (tmpvar_80, _SpecularPower) * _SpecularColor.w);
  c_75.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_79) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_82)) * 2.0);
  c_75.w = (tmpvar_79 * 2.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_SunDir);
  mediump vec3 lightDir_84;
  lightDir_84 = tmpvar_83;
  mediump vec3 normal_85;
  normal_85 = xlv_TEXCOORD3;
  mediump float tmpvar_86;
  tmpvar_86 = dot (normal_85, lightDir_84);
  color_6 = (c_75 * mix (1.0, clamp (
    floor((1.01 + tmpvar_86))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_86))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_87;
  tmpvar_1 = tmpvar_87;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1.x = texture(cube_CityOverlayTex, t9.yxz).w;
    t16_5 = t16_5 * t10_1.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    t16_23 = t16_23 + t16_23;
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t19 = t19 * t10_2.w;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t1.x = t1.x + t1.x;
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 237 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec4 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2);
  tmpvar_21 = textureCube (cube_CityOverlayTex, tmpvar_22);
  cityoverlay_3.xyz = tmpvar_21.xyz;
  vec2 uv_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(tmpvar_22);
  float tmpvar_25;
  tmpvar_25 = float((tmpvar_24.z >= tmpvar_24.x));
  float tmpvar_26;
  tmpvar_26 = float((max (tmpvar_24.x, tmpvar_24.z) >= tmpvar_24.y));
  float tmpvar_27;
  tmpvar_27 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_25), tmpvar_26));
  vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, -1.0);
  tmpvar_28.y = -(tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29.xz = vec2(1.0, -1.0);
  tmpvar_29.y = tmpvar_27;
  vec3 tmpvar_30;
  tmpvar_30.xy = vec2(1.0, 1.0);
  tmpvar_30.z = tmpvar_27;
  vec3 tmpvar_31;
  tmpvar_31 = mix ((tmpvar_30 * tmpvar_22.yxz), mix ((tmpvar_28 * tmpvar_22.xzy), (tmpvar_29 * tmpvar_22.zxy), vec3(tmpvar_25)), vec3(tmpvar_26));
  uv_23 = (((
    (0.5 * tmpvar_31.yz)
   / 
    abs(tmpvar_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_32;
  vec2 tmpvar_33;
  float tmpvar_34;
  tmpvar_34 = (0.5 * _CityOverlayDetailScale);
  tmpvar_33 = abs((uv_23 - tmpvar_34));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  vec4 tmpvar_35;
  tmpvar_35.xy = dFdx(uvCont_32);
  tmpvar_35.zw = dFdy(uvCont_32);
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_23, tmpvar_35.xy, tmpvar_35.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_22);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_22.yxz), mix ((tmpvar_42 * tmpvar_22.xzy), (tmpvar_43 * tmpvar_22.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  tmpvar_47 = abs((uv_37 - tmpvar_34));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  vec4 tmpvar_49;
  tmpvar_49 = texture2DGradARB (_CityLightOverlayDetailTex, uv_37, tmpvar_48.xy, tmpvar_48.zw);
  citylightoverlaydetail_1.xyz = tmpvar_49.xyz;
  cityoverlay_3.w = (tmpvar_21.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_36.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_49.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_49.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_50;
  tmpvar_50 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_51;
  vec3 tmpvar_52;
  tmpvar_52 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_53;
  tmpvar_53 = normalize(normal_20);
  float tmpvar_54;
  tmpvar_54 = dot (tmpvar_53, tmpvar_52);
  c_51.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_54) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_52 + normalize(xlv_TEXCOORD1)))
    , tmpvar_53), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_50.x * 2.0));
  c_51.w = (tmpvar_54 * (tmpvar_50.x * 2.0));
  float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_51 * mix (1.0, clamp (
    floor((1.01 + tmpvar_55))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_55))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_56;
  tmpvar_56 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_56;
  gl_FragData[0] = tmpvar_56;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 237 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  mediump vec2 uv_30;
  mediump vec3 detailCoords_31;
  mediump float s_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_34);
  s_32 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, s_32, nylerp_33));
  s_32 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(s_32);
  mediump vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = s_32;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix ((tmpvar_40 * tmpvar_27.xzy), (tmpvar_41 * tmpvar_27.zxy), vec3(zxlerp_34));
  detailCoords_31 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xy = vec2(1.0, 1.0);
  tmpvar_43.z = s_32;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_43 * tmpvar_27.yxz), detailCoords_31, vec3(nylerp_33));
  detailCoords_31 = tmpvar_44;
  uv_30 = (((
    (0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_45;
  uv_45 = uv_30;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_30, tmpvar_49.xy, tmpvar_49.zw);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  mediump vec2 uv_52;
  mediump vec3 detailCoords_53;
  mediump float s_54;
  mediump float nylerp_55;
  mediump float zxlerp_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  highp float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_56);
  s_54 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, s_54, nylerp_55));
  s_54 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62.xz = vec2(1.0, -1.0);
  tmpvar_62.y = -(s_54);
  mediump vec3 tmpvar_63;
  tmpvar_63.xz = vec2(1.0, -1.0);
  tmpvar_63.y = s_54;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix ((tmpvar_62 * tmpvar_27.xzy), (tmpvar_63 * tmpvar_27.zxy), vec3(zxlerp_56));
  detailCoords_53 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xy = vec2(1.0, 1.0);
  tmpvar_65.z = s_54;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix ((tmpvar_65 * tmpvar_27.yxz), detailCoords_53, vec3(nylerp_55));
  detailCoords_53 = tmpvar_66;
  uv_52 = (((
    (0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_67;
  uv_67 = uv_52;
  highp vec2 uvCont_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  highp vec4 tmpvar_70;
  tmpvar_70.xy = dFdx(uvCont_68);
  tmpvar_70.zw = dFdy(uvCont_68);
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_52, tmpvar_70.xy, tmpvar_70.zw);
  mediump vec4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_73 = tmpvar_74;
  mediump vec3 lightDir_75;
  lightDir_75 = xlv_TEXCOORD5;
  mediump vec3 viewDir_76;
  viewDir_76 = xlv_TEXCOORD1;
  mediump float atten_77;
  atten_77 = tmpvar_73;
  mediump vec4 c_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_75);
  lightDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_76);
  viewDir_76 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(normT_5);
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  highp float tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (pow (tmpvar_83, _SpecularPower) * _SpecularColor.w);
  c_78.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_82) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_85)) * (atten_77 * 2.0));
  c_78.w = (tmpvar_82 * (atten_77 * 2.0));
  highp vec3 tmpvar_86;
  tmpvar_86 = normalize(_SunDir);
  mediump vec3 lightDir_87;
  lightDir_87 = tmpvar_86;
  mediump vec3 normal_88;
  normal_88 = xlv_TEXCOORD3;
  mediump float tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  color_6 = (c_78 * mix (1.0, clamp (
    floor((1.01 + tmpvar_89))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_89))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_90;
  tmpvar_1 = tmpvar_90;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t19 = t19 * t10_2.w;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_3 = texture(_ShadowMapTexture, t7.xy);
    t1.x = dot(t10_3.xx, t1.xx);
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 235 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec4 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2);
  tmpvar_21 = textureCube (cube_CityOverlayTex, tmpvar_22);
  cityoverlay_3.xyz = tmpvar_21.xyz;
  vec2 uv_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(tmpvar_22);
  float tmpvar_25;
  tmpvar_25 = float((tmpvar_24.z >= tmpvar_24.x));
  float tmpvar_26;
  tmpvar_26 = float((max (tmpvar_24.x, tmpvar_24.z) >= tmpvar_24.y));
  float tmpvar_27;
  tmpvar_27 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_25), tmpvar_26));
  vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, -1.0);
  tmpvar_28.y = -(tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29.xz = vec2(1.0, -1.0);
  tmpvar_29.y = tmpvar_27;
  vec3 tmpvar_30;
  tmpvar_30.xy = vec2(1.0, 1.0);
  tmpvar_30.z = tmpvar_27;
  vec3 tmpvar_31;
  tmpvar_31 = mix ((tmpvar_30 * tmpvar_22.yxz), mix ((tmpvar_28 * tmpvar_22.xzy), (tmpvar_29 * tmpvar_22.zxy), vec3(tmpvar_25)), vec3(tmpvar_26));
  uv_23 = (((
    (0.5 * tmpvar_31.yz)
   / 
    abs(tmpvar_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_32;
  vec2 tmpvar_33;
  float tmpvar_34;
  tmpvar_34 = (0.5 * _CityOverlayDetailScale);
  tmpvar_33 = abs((uv_23 - tmpvar_34));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  vec4 tmpvar_35;
  tmpvar_35.xy = dFdx(uvCont_32);
  tmpvar_35.zw = dFdy(uvCont_32);
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_23, tmpvar_35.xy, tmpvar_35.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_22);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_22.yxz), mix ((tmpvar_42 * tmpvar_22.xzy), (tmpvar_43 * tmpvar_22.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  tmpvar_47 = abs((uv_37 - tmpvar_34));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  vec4 tmpvar_49;
  tmpvar_49 = texture2DGradARB (_CityLightOverlayDetailTex, uv_37, tmpvar_48.xy, tmpvar_48.zw);
  citylightoverlaydetail_1.xyz = tmpvar_49.xyz;
  cityoverlay_3.w = (tmpvar_21.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_36.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_49.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_49.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_50;
  vec3 tmpvar_51;
  tmpvar_51 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_52;
  tmpvar_52 = normalize(normal_20);
  float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_51);
  c_50.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_53) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_51 + normalize(xlv_TEXCOORD1)))
    , tmpvar_52), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_50.w = (tmpvar_53 * 2.0);
  float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_50 * mix (1.0, clamp (
    floor((1.01 + tmpvar_54))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_54))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_55;
  tmpvar_55 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_55;
  gl_FragData[0] = tmpvar_55;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 231 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  mediump vec2 uv_30;
  mediump vec3 detailCoords_31;
  mediump float s_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_34);
  s_32 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, s_32, nylerp_33));
  s_32 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(s_32);
  mediump vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = s_32;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix ((tmpvar_40 * tmpvar_27.xzy), (tmpvar_41 * tmpvar_27.zxy), vec3(zxlerp_34));
  detailCoords_31 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xy = vec2(1.0, 1.0);
  tmpvar_43.z = s_32;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_43 * tmpvar_27.yxz), detailCoords_31, vec3(nylerp_33));
  detailCoords_31 = tmpvar_44;
  uv_30 = (((
    (0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_45;
  uv_45 = uv_30;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_30, tmpvar_49.xy, tmpvar_49.zw);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  mediump vec2 uv_52;
  mediump vec3 detailCoords_53;
  mediump float s_54;
  mediump float nylerp_55;
  mediump float zxlerp_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  highp float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_56);
  s_54 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, s_54, nylerp_55));
  s_54 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62.xz = vec2(1.0, -1.0);
  tmpvar_62.y = -(s_54);
  mediump vec3 tmpvar_63;
  tmpvar_63.xz = vec2(1.0, -1.0);
  tmpvar_63.y = s_54;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix ((tmpvar_62 * tmpvar_27.xzy), (tmpvar_63 * tmpvar_27.zxy), vec3(zxlerp_56));
  detailCoords_53 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xy = vec2(1.0, 1.0);
  tmpvar_65.z = s_54;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix ((tmpvar_65 * tmpvar_27.yxz), detailCoords_53, vec3(nylerp_55));
  detailCoords_53 = tmpvar_66;
  uv_52 = (((
    (0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_67;
  uv_67 = uv_52;
  highp vec2 uvCont_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  highp vec4 tmpvar_70;
  tmpvar_70.xy = dFdx(uvCont_68);
  tmpvar_70.zw = dFdy(uvCont_68);
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_52, tmpvar_70.xy, tmpvar_70.zw);
  mediump vec4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_73;
  lightDir_73 = xlv_TEXCOORD5;
  mediump vec3 viewDir_74;
  viewDir_74 = xlv_TEXCOORD1;
  mediump vec4 c_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(lightDir_73);
  lightDir_73 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(viewDir_74);
  viewDir_74 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(normT_5);
  mediump float tmpvar_79;
  tmpvar_79 = dot (tmpvar_78, tmpvar_76);
  highp float tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (dot (normalize(
    (tmpvar_76 + tmpvar_77)
  ), tmpvar_78), 0.0, 1.0);
  tmpvar_80 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (pow (tmpvar_80, _SpecularPower) * _SpecularColor.w);
  c_75.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_79) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_82)) * 2.0);
  c_75.w = (tmpvar_79 * 2.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_SunDir);
  mediump vec3 lightDir_84;
  lightDir_84 = tmpvar_83;
  mediump vec3 normal_85;
  normal_85 = xlv_TEXCOORD3;
  mediump float tmpvar_86;
  tmpvar_86 = dot (normal_85, lightDir_84);
  color_6 = (c_75 * mix (1.0, clamp (
    floor((1.01 + tmpvar_86))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_86))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_87;
  tmpvar_1 = tmpvar_87;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1.x = texture(cube_CityOverlayTex, t9.yxz).w;
    t16_5 = t16_5 * t10_1.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    t16_23 = t16_23 + t16_23;
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t19 = t19 * t10_2.w;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t1.x = t1.x + t1.x;
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 237 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  vec4 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2);
  tmpvar_21 = textureCube (cube_CityOverlayTex, tmpvar_22);
  cityoverlay_3.xyz = tmpvar_21.xyz;
  vec2 uv_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(tmpvar_22);
  float tmpvar_25;
  tmpvar_25 = float((tmpvar_24.z >= tmpvar_24.x));
  float tmpvar_26;
  tmpvar_26 = float((max (tmpvar_24.x, tmpvar_24.z) >= tmpvar_24.y));
  float tmpvar_27;
  tmpvar_27 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_25), tmpvar_26));
  vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, -1.0);
  tmpvar_28.y = -(tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29.xz = vec2(1.0, -1.0);
  tmpvar_29.y = tmpvar_27;
  vec3 tmpvar_30;
  tmpvar_30.xy = vec2(1.0, 1.0);
  tmpvar_30.z = tmpvar_27;
  vec3 tmpvar_31;
  tmpvar_31 = mix ((tmpvar_30 * tmpvar_22.yxz), mix ((tmpvar_28 * tmpvar_22.xzy), (tmpvar_29 * tmpvar_22.zxy), vec3(tmpvar_25)), vec3(tmpvar_26));
  uv_23 = (((
    (0.5 * tmpvar_31.yz)
   / 
    abs(tmpvar_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_32;
  vec2 tmpvar_33;
  float tmpvar_34;
  tmpvar_34 = (0.5 * _CityOverlayDetailScale);
  tmpvar_33 = abs((uv_23 - tmpvar_34));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  vec4 tmpvar_35;
  tmpvar_35.xy = dFdx(uvCont_32);
  tmpvar_35.zw = dFdy(uvCont_32);
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_23, tmpvar_35.xy, tmpvar_35.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_22);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_22.y, mix (tmpvar_22.x, tmpvar_22.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_22.yxz), mix ((tmpvar_42 * tmpvar_22.xzy), (tmpvar_43 * tmpvar_22.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  tmpvar_47 = abs((uv_37 - tmpvar_34));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  vec4 tmpvar_49;
  tmpvar_49 = texture2DGradARB (_CityLightOverlayDetailTex, uv_37, tmpvar_48.xy, tmpvar_48.zw);
  citylightoverlaydetail_1.xyz = tmpvar_49.xyz;
  cityoverlay_3.w = (tmpvar_21.w * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_36.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_49.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_49.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_50;
  tmpvar_50 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_51;
  vec3 tmpvar_52;
  tmpvar_52 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_53;
  tmpvar_53 = normalize(normal_20);
  float tmpvar_54;
  tmpvar_54 = dot (tmpvar_53, tmpvar_52);
  c_51.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_54) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_52 + normalize(xlv_TEXCOORD1)))
    , tmpvar_53), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_50.x * 2.0));
  c_51.w = (tmpvar_54 * (tmpvar_50.x * 2.0));
  float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_51 * mix (1.0, clamp (
    floor((1.01 + tmpvar_55))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_55))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_56;
  tmpvar_56 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_56;
  gl_FragData[0] = tmpvar_56;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 237 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  mediump vec2 uv_30;
  mediump vec3 detailCoords_31;
  mediump float s_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_34);
  s_32 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, s_32, nylerp_33));
  s_32 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(s_32);
  mediump vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = s_32;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix ((tmpvar_40 * tmpvar_27.xzy), (tmpvar_41 * tmpvar_27.zxy), vec3(zxlerp_34));
  detailCoords_31 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xy = vec2(1.0, 1.0);
  tmpvar_43.z = s_32;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_43 * tmpvar_27.yxz), detailCoords_31, vec3(nylerp_33));
  detailCoords_31 = tmpvar_44;
  uv_30 = (((
    (0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_45;
  uv_45 = uv_30;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_30, tmpvar_49.xy, tmpvar_49.zw);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  mediump vec2 uv_52;
  mediump vec3 detailCoords_53;
  mediump float s_54;
  mediump float nylerp_55;
  mediump float zxlerp_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  highp float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_56);
  s_54 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, s_54, nylerp_55));
  s_54 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62.xz = vec2(1.0, -1.0);
  tmpvar_62.y = -(s_54);
  mediump vec3 tmpvar_63;
  tmpvar_63.xz = vec2(1.0, -1.0);
  tmpvar_63.y = s_54;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix ((tmpvar_62 * tmpvar_27.xzy), (tmpvar_63 * tmpvar_27.zxy), vec3(zxlerp_56));
  detailCoords_53 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xy = vec2(1.0, 1.0);
  tmpvar_65.z = s_54;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix ((tmpvar_65 * tmpvar_27.yxz), detailCoords_53, vec3(nylerp_55));
  detailCoords_53 = tmpvar_66;
  uv_52 = (((
    (0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_67;
  uv_67 = uv_52;
  highp vec2 uvCont_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  highp vec4 tmpvar_70;
  tmpvar_70.xy = dFdx(uvCont_68);
  tmpvar_70.zw = dFdy(uvCont_68);
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_52, tmpvar_70.xy, tmpvar_70.zw);
  mediump vec4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_73 = tmpvar_74;
  mediump vec3 lightDir_75;
  lightDir_75 = xlv_TEXCOORD5;
  mediump vec3 viewDir_76;
  viewDir_76 = xlv_TEXCOORD1;
  mediump float atten_77;
  atten_77 = tmpvar_73;
  mediump vec4 c_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_75);
  lightDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_76);
  viewDir_76 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(normT_5);
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  highp float tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (pow (tmpvar_83, _SpecularPower) * _SpecularColor.w);
  c_78.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_82) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_85)) * (atten_77 * 2.0));
  c_78.w = (tmpvar_82 * (atten_77 * 2.0));
  highp vec3 tmpvar_86;
  tmpvar_86 = normalize(_SunDir);
  mediump vec3 lightDir_87;
  lightDir_87 = tmpvar_86;
  mediump vec3 normal_88;
  normal_88 = xlv_TEXCOORD3;
  mediump float tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  color_6 = (c_78 * mix (1.0, clamp (
    floor((1.01 + tmpvar_89))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_89))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_90;
  tmpvar_1 = tmpvar_90;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t19 = t19 * t10_2.w;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_3 = texture(_ShadowMapTexture, t7.xy);
    t1.x = dot(t10_3.xx, t1.xx);
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 236 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  mediump vec2 uv_30;
  mediump vec3 detailCoords_31;
  mediump float s_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_34);
  s_32 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, s_32, nylerp_33));
  s_32 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(s_32);
  mediump vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = s_32;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix ((tmpvar_40 * tmpvar_27.xzy), (tmpvar_41 * tmpvar_27.zxy), vec3(zxlerp_34));
  detailCoords_31 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xy = vec2(1.0, 1.0);
  tmpvar_43.z = s_32;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_43 * tmpvar_27.yxz), detailCoords_31, vec3(nylerp_33));
  detailCoords_31 = tmpvar_44;
  uv_30 = (((
    (0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_45;
  uv_45 = uv_30;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_30, tmpvar_49.xy, tmpvar_49.zw);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  mediump vec2 uv_52;
  mediump vec3 detailCoords_53;
  mediump float s_54;
  mediump float nylerp_55;
  mediump float zxlerp_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  highp float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_56);
  s_54 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, s_54, nylerp_55));
  s_54 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62.xz = vec2(1.0, -1.0);
  tmpvar_62.y = -(s_54);
  mediump vec3 tmpvar_63;
  tmpvar_63.xz = vec2(1.0, -1.0);
  tmpvar_63.y = s_54;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix ((tmpvar_62 * tmpvar_27.xzy), (tmpvar_63 * tmpvar_27.zxy), vec3(zxlerp_56));
  detailCoords_53 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xy = vec2(1.0, 1.0);
  tmpvar_65.z = s_54;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix ((tmpvar_65 * tmpvar_27.yxz), detailCoords_53, vec3(nylerp_55));
  detailCoords_53 = tmpvar_66;
  uv_52 = (((
    (0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_67;
  uv_67 = uv_52;
  highp vec2 uvCont_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  highp vec4 tmpvar_70;
  tmpvar_70.xy = dFdx(uvCont_68);
  tmpvar_70.zw = dFdy(uvCont_68);
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_52, tmpvar_70.xy, tmpvar_70.zw);
  mediump vec4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_73;
  shadow_73 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = shadow_73;
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_5);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w);
  c_77.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_84)) * (atten_76 * 2.0));
  c_77.w = (tmpvar_81 * (atten_76 * 2.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_SunDir);
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  color_6 = (c_77 * mix (1.0, clamp (
    floor((1.01 + tmpvar_88))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_88))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1.x = texture(cube_CityOverlayTex, t9.yxz).w;
    t16_5 = t16_5 * t10_1.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    vec3 txVec12 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_32 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_32 = t16_32 * t16_33 + _LightShadowData.x;
    t16_23 = dot(vec2(t16_32), vec2(t16_23));
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 236 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  mediump vec2 uv_30;
  mediump vec3 detailCoords_31;
  mediump float s_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_34);
  s_32 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, s_32, nylerp_33));
  s_32 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(s_32);
  mediump vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = s_32;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix ((tmpvar_40 * tmpvar_27.xzy), (tmpvar_41 * tmpvar_27.zxy), vec3(zxlerp_34));
  detailCoords_31 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xy = vec2(1.0, 1.0);
  tmpvar_43.z = s_32;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_43 * tmpvar_27.yxz), detailCoords_31, vec3(nylerp_33));
  detailCoords_31 = tmpvar_44;
  uv_30 = (((
    (0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_45;
  uv_45 = uv_30;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_30, tmpvar_49.xy, tmpvar_49.zw);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  mediump vec2 uv_52;
  mediump vec3 detailCoords_53;
  mediump float s_54;
  mediump float nylerp_55;
  mediump float zxlerp_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  highp float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_56);
  s_54 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, s_54, nylerp_55));
  s_54 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62.xz = vec2(1.0, -1.0);
  tmpvar_62.y = -(s_54);
  mediump vec3 tmpvar_63;
  tmpvar_63.xz = vec2(1.0, -1.0);
  tmpvar_63.y = s_54;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix ((tmpvar_62 * tmpvar_27.xzy), (tmpvar_63 * tmpvar_27.zxy), vec3(zxlerp_56));
  detailCoords_53 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xy = vec2(1.0, 1.0);
  tmpvar_65.z = s_54;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix ((tmpvar_65 * tmpvar_27.yxz), detailCoords_53, vec3(nylerp_55));
  detailCoords_53 = tmpvar_66;
  uv_52 = (((
    (0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_67;
  uv_67 = uv_52;
  highp vec2 uvCont_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  highp vec4 tmpvar_70;
  tmpvar_70.xy = dFdx(uvCont_68);
  tmpvar_70.zw = dFdy(uvCont_68);
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_52, tmpvar_70.xy, tmpvar_70.zw);
  mediump vec4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_73;
  shadow_73 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = shadow_73;
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_5);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w);
  c_77.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_84)) * (atten_76 * 2.0));
  c_77.w = (tmpvar_81 * (atten_76 * 2.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_SunDir);
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  color_6 = (c_77 * mix (1.0, clamp (
    floor((1.01 + tmpvar_88))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_88))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1.x = texture(cube_CityOverlayTex, t9.yxz).w;
    t16_5 = t16_5 * t10_1.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    vec3 txVec15 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_32 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_32 = t16_32 * t16_33 + _LightShadowData.x;
    t16_23 = dot(vec2(t16_32), vec2(t16_23));
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 240 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  float tmpvar_21;
  vec4 v_22;
  vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2);
  v_22 = (textureCube (cube_CityOverlayTex, tmpvar_23) * alphaMask1);
  tmpvar_21 = ((v_22.x + v_22.y) + (v_22.z + v_22.w));
  vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_24.w = tmpvar_21;
  cityoverlay_3.xyz = tmpvar_24.xyz;
  vec2 uv_25;
  vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_23);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  float tmpvar_28;
  tmpvar_28 = float((max (tmpvar_26.x, tmpvar_26.z) >= tmpvar_26.y));
  float tmpvar_29;
  tmpvar_29 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_27), tmpvar_28));
  vec3 tmpvar_30;
  tmpvar_30.xz = vec2(1.0, -1.0);
  tmpvar_30.y = -(tmpvar_29);
  vec3 tmpvar_31;
  tmpvar_31.xz = vec2(1.0, -1.0);
  tmpvar_31.y = tmpvar_29;
  vec3 tmpvar_32;
  tmpvar_32.xy = vec2(1.0, 1.0);
  tmpvar_32.z = tmpvar_29;
  vec3 tmpvar_33;
  tmpvar_33 = mix ((tmpvar_32 * tmpvar_23.yxz), mix ((tmpvar_30 * tmpvar_23.xzy), (tmpvar_31 * tmpvar_23.zxy), vec3(tmpvar_27)), vec3(tmpvar_28));
  uv_25 = (((
    (0.5 * tmpvar_33.yz)
   / 
    abs(tmpvar_33.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_34;
  vec2 tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = (0.5 * _CityOverlayDetailScale);
  tmpvar_35 = abs((uv_25 - tmpvar_36));
  uvCont_34.x = max (tmpvar_35.x, tmpvar_35.y);
  uvCont_34.y = min (tmpvar_35.x, tmpvar_35.y);
  vec4 tmpvar_37;
  tmpvar_37.xy = dFdx(uvCont_34);
  tmpvar_37.zw = dFdy(uvCont_34);
  vec4 tmpvar_38;
  tmpvar_38 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_25, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_38.xyz;
  vec2 uv_39;
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_23);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  float tmpvar_42;
  tmpvar_42 = float((max (tmpvar_40.x, tmpvar_40.z) >= tmpvar_40.y));
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_41), tmpvar_42));
  vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = -(tmpvar_43);
  vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, -1.0);
  tmpvar_45.y = tmpvar_43;
  vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = tmpvar_43;
  vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_23.yxz), mix ((tmpvar_44 * tmpvar_23.xzy), (tmpvar_45 * tmpvar_23.zxy), vec3(tmpvar_41)), vec3(tmpvar_42));
  uv_39 = (((
    (0.5 * tmpvar_47.yz)
   / 
    abs(tmpvar_47.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_48;
  vec2 tmpvar_49;
  tmpvar_49 = abs((uv_39 - tmpvar_36));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  vec4 tmpvar_51;
  tmpvar_51 = texture2DGradARB (_CityLightOverlayDetailTex, uv_39, tmpvar_50.xy, tmpvar_50.zw);
  citylightoverlaydetail_1.xyz = tmpvar_51.xyz;
  cityoverlay_3.w = (tmpvar_21 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_38.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_51.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_51.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_52;
  vec3 tmpvar_53;
  tmpvar_53 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_54;
  tmpvar_54 = normalize(normal_20);
  float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_53);
  c_52.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_55) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_53 + normalize(xlv_TEXCOORD1)))
    , tmpvar_54), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_52.w = (tmpvar_55 * 2.0);
  float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_52 * mix (1.0, clamp (
    floor((1.01 + tmpvar_56))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_56))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_57;
  tmpvar_57 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_57;
  gl_FragData[0] = tmpvar_57;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 236 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump float tmpvar_30;
  mediump vec4 v_31;
  v_31 = (tmpvar_29 * alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  mediump vec2 uv_33;
  mediump vec3 detailCoords_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = s_35;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_43 * tmpvar_27.xzy), (tmpvar_44 * tmpvar_27.zxy), vec3(zxlerp_37));
  detailCoords_34 = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = s_35;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_27.yxz), detailCoords_34, vec3(nylerp_36));
  detailCoords_34 = tmpvar_47;
  uv_33 = (((
    (0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_48;
  uv_48 = uv_33;
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (0.5 * _CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_52;
  tmpvar_52.xy = dFdx(uvCont_49);
  tmpvar_52.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_33, tmpvar_52.xy, tmpvar_52.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  mediump vec2 uv_55;
  mediump vec3 detailCoords_56;
  mediump float s_57;
  mediump float nylerp_58;
  mediump float zxlerp_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  highp float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_59);
  s_57 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, s_57, nylerp_58));
  s_57 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xz = vec2(1.0, -1.0);
  tmpvar_65.y = -(s_57);
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = s_57;
  highp vec3 tmpvar_67;
  tmpvar_67 = mix ((tmpvar_65 * tmpvar_27.xzy), (tmpvar_66 * tmpvar_27.zxy), vec3(zxlerp_59));
  detailCoords_56 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xy = vec2(1.0, 1.0);
  tmpvar_68.z = s_57;
  highp vec3 tmpvar_69;
  tmpvar_69 = mix ((tmpvar_68 * tmpvar_27.yxz), detailCoords_56, vec3(nylerp_58));
  detailCoords_56 = tmpvar_69;
  uv_55 = (((
    (0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_70;
  uv_70 = uv_55;
  highp vec2 uvCont_71;
  highp vec2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  highp vec4 tmpvar_73;
  tmpvar_73.xy = dFdx(uvCont_71);
  tmpvar_73.zw = dFdy(uvCont_71);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_55, tmpvar_73.xy, tmpvar_73.zw);
  mediump vec4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_76;
  lightDir_76 = xlv_TEXCOORD5;
  mediump vec3 viewDir_77;
  viewDir_77 = xlv_TEXCOORD1;
  mediump vec4 c_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_76);
  lightDir_76 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_77);
  viewDir_77 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(normT_5);
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  highp float tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (pow (tmpvar_83, _SpecularPower) * _SpecularColor.w);
  c_78.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_82) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_85)) * 2.0);
  c_78.w = (tmpvar_82 * 2.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = normalize(_SunDir);
  mediump vec3 lightDir_87;
  lightDir_87 = tmpvar_86;
  mediump vec3 normal_88;
  normal_88 = xlv_TEXCOORD3;
  mediump float tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  color_6 = (c_78 * mix (1.0, clamp (
    floor((1.01 + tmpvar_89))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_89))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_90;
  tmpvar_1 = tmpvar_90;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1 = texture(cube_CityOverlayTex, t9.yxz);
    t16_14.xy = t10_1.xy * alphaMask1.xy;
    t16_14.x = t16_14.y + t16_14.x;
    t16_14.x = t10_1.z * alphaMask1.z + t16_14.x;
    t16_14.x = t10_1.w * alphaMask1.w + t16_14.x;
    t16_5 = t16_5 * t16_14.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    t16_23 = t16_23 + t16_23;
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t2.xy = t10_2.xy * alphaMask1.xy;
    t2.x = t2.y + t2.x;
    t2.x = t10_2.z * alphaMask1.z + t2.x;
    t2.x = t10_2.w * alphaMask1.w + t2.x;
    t19 = t19 * t2.x;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t1.x = t1.x + t1.x;
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 242 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  float tmpvar_21;
  vec4 v_22;
  vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2);
  v_22 = (textureCube (cube_CityOverlayTex, tmpvar_23) * alphaMask1);
  tmpvar_21 = ((v_22.x + v_22.y) + (v_22.z + v_22.w));
  vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_24.w = tmpvar_21;
  cityoverlay_3.xyz = tmpvar_24.xyz;
  vec2 uv_25;
  vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_23);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  float tmpvar_28;
  tmpvar_28 = float((max (tmpvar_26.x, tmpvar_26.z) >= tmpvar_26.y));
  float tmpvar_29;
  tmpvar_29 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_27), tmpvar_28));
  vec3 tmpvar_30;
  tmpvar_30.xz = vec2(1.0, -1.0);
  tmpvar_30.y = -(tmpvar_29);
  vec3 tmpvar_31;
  tmpvar_31.xz = vec2(1.0, -1.0);
  tmpvar_31.y = tmpvar_29;
  vec3 tmpvar_32;
  tmpvar_32.xy = vec2(1.0, 1.0);
  tmpvar_32.z = tmpvar_29;
  vec3 tmpvar_33;
  tmpvar_33 = mix ((tmpvar_32 * tmpvar_23.yxz), mix ((tmpvar_30 * tmpvar_23.xzy), (tmpvar_31 * tmpvar_23.zxy), vec3(tmpvar_27)), vec3(tmpvar_28));
  uv_25 = (((
    (0.5 * tmpvar_33.yz)
   / 
    abs(tmpvar_33.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_34;
  vec2 tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = (0.5 * _CityOverlayDetailScale);
  tmpvar_35 = abs((uv_25 - tmpvar_36));
  uvCont_34.x = max (tmpvar_35.x, tmpvar_35.y);
  uvCont_34.y = min (tmpvar_35.x, tmpvar_35.y);
  vec4 tmpvar_37;
  tmpvar_37.xy = dFdx(uvCont_34);
  tmpvar_37.zw = dFdy(uvCont_34);
  vec4 tmpvar_38;
  tmpvar_38 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_25, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_38.xyz;
  vec2 uv_39;
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_23);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  float tmpvar_42;
  tmpvar_42 = float((max (tmpvar_40.x, tmpvar_40.z) >= tmpvar_40.y));
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_41), tmpvar_42));
  vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = -(tmpvar_43);
  vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, -1.0);
  tmpvar_45.y = tmpvar_43;
  vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = tmpvar_43;
  vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_23.yxz), mix ((tmpvar_44 * tmpvar_23.xzy), (tmpvar_45 * tmpvar_23.zxy), vec3(tmpvar_41)), vec3(tmpvar_42));
  uv_39 = (((
    (0.5 * tmpvar_47.yz)
   / 
    abs(tmpvar_47.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_48;
  vec2 tmpvar_49;
  tmpvar_49 = abs((uv_39 - tmpvar_36));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  vec4 tmpvar_51;
  tmpvar_51 = texture2DGradARB (_CityLightOverlayDetailTex, uv_39, tmpvar_50.xy, tmpvar_50.zw);
  citylightoverlaydetail_1.xyz = tmpvar_51.xyz;
  cityoverlay_3.w = (tmpvar_21 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_38.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_51.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_51.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_52;
  tmpvar_52 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_53;
  vec3 tmpvar_54;
  tmpvar_54 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_55;
  tmpvar_55 = normalize(normal_20);
  float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_54);
  c_53.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_56) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_54 + normalize(xlv_TEXCOORD1)))
    , tmpvar_55), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_52.x * 2.0));
  c_53.w = (tmpvar_56 * (tmpvar_52.x * 2.0));
  float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_53 * mix (1.0, clamp (
    floor((1.01 + tmpvar_57))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_57))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_58;
  tmpvar_58 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_58;
  gl_FragData[0] = tmpvar_58;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 242 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump float tmpvar_30;
  mediump vec4 v_31;
  v_31 = (tmpvar_29 * alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  mediump vec2 uv_33;
  mediump vec3 detailCoords_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = s_35;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_43 * tmpvar_27.xzy), (tmpvar_44 * tmpvar_27.zxy), vec3(zxlerp_37));
  detailCoords_34 = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = s_35;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_27.yxz), detailCoords_34, vec3(nylerp_36));
  detailCoords_34 = tmpvar_47;
  uv_33 = (((
    (0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_48;
  uv_48 = uv_33;
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (0.5 * _CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_52;
  tmpvar_52.xy = dFdx(uvCont_49);
  tmpvar_52.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_33, tmpvar_52.xy, tmpvar_52.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  mediump vec2 uv_55;
  mediump vec3 detailCoords_56;
  mediump float s_57;
  mediump float nylerp_58;
  mediump float zxlerp_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  highp float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_59);
  s_57 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, s_57, nylerp_58));
  s_57 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xz = vec2(1.0, -1.0);
  tmpvar_65.y = -(s_57);
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = s_57;
  highp vec3 tmpvar_67;
  tmpvar_67 = mix ((tmpvar_65 * tmpvar_27.xzy), (tmpvar_66 * tmpvar_27.zxy), vec3(zxlerp_59));
  detailCoords_56 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xy = vec2(1.0, 1.0);
  tmpvar_68.z = s_57;
  highp vec3 tmpvar_69;
  tmpvar_69 = mix ((tmpvar_68 * tmpvar_27.yxz), detailCoords_56, vec3(nylerp_58));
  detailCoords_56 = tmpvar_69;
  uv_55 = (((
    (0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_70;
  uv_70 = uv_55;
  highp vec2 uvCont_71;
  highp vec2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  highp vec4 tmpvar_73;
  tmpvar_73.xy = dFdx(uvCont_71);
  tmpvar_73.zw = dFdy(uvCont_71);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_55, tmpvar_73.xy, tmpvar_73.zw);
  mediump vec4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_76 = tmpvar_77;
  mediump vec3 lightDir_78;
  lightDir_78 = xlv_TEXCOORD5;
  mediump vec3 viewDir_79;
  viewDir_79 = xlv_TEXCOORD1;
  mediump float atten_80;
  atten_80 = tmpvar_76;
  mediump vec4 c_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = normalize(lightDir_78);
  lightDir_78 = tmpvar_82;
  mediump vec3 tmpvar_83;
  tmpvar_83 = normalize(viewDir_79);
  viewDir_79 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = normalize(normT_5);
  mediump float tmpvar_85;
  tmpvar_85 = dot (tmpvar_84, tmpvar_82);
  highp float tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp (dot (normalize(
    (tmpvar_82 + tmpvar_83)
  ), tmpvar_84), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = (pow (tmpvar_86, _SpecularPower) * _SpecularColor.w);
  c_81.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_85) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_88)) * (atten_80 * 2.0));
  c_81.w = (tmpvar_85 * (atten_80 * 2.0));
  highp vec3 tmpvar_89;
  tmpvar_89 = normalize(_SunDir);
  mediump vec3 lightDir_90;
  lightDir_90 = tmpvar_89;
  mediump vec3 normal_91;
  normal_91 = xlv_TEXCOORD3;
  mediump float tmpvar_92;
  tmpvar_92 = dot (normal_91, lightDir_90);
  color_6 = (c_81 * mix (1.0, clamp (
    floor((1.01 + tmpvar_92))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_92))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_93;
  tmpvar_93 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_93;
  tmpvar_1 = tmpvar_93;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t2.xy = t10_2.xy * alphaMask1.xy;
    t2.x = t2.y + t2.x;
    t2.x = t10_2.z * alphaMask1.z + t2.x;
    t2.x = t10_2.w * alphaMask1.w + t2.x;
    t19 = t19 * t2.x;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_3 = texture(_ShadowMapTexture, t7.xy);
    t1.x = dot(t10_3.xx, t1.xx);
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 240 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  float tmpvar_21;
  vec4 v_22;
  vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2);
  v_22 = (textureCube (cube_CityOverlayTex, tmpvar_23) * alphaMask1);
  tmpvar_21 = ((v_22.x + v_22.y) + (v_22.z + v_22.w));
  vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_24.w = tmpvar_21;
  cityoverlay_3.xyz = tmpvar_24.xyz;
  vec2 uv_25;
  vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_23);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  float tmpvar_28;
  tmpvar_28 = float((max (tmpvar_26.x, tmpvar_26.z) >= tmpvar_26.y));
  float tmpvar_29;
  tmpvar_29 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_27), tmpvar_28));
  vec3 tmpvar_30;
  tmpvar_30.xz = vec2(1.0, -1.0);
  tmpvar_30.y = -(tmpvar_29);
  vec3 tmpvar_31;
  tmpvar_31.xz = vec2(1.0, -1.0);
  tmpvar_31.y = tmpvar_29;
  vec3 tmpvar_32;
  tmpvar_32.xy = vec2(1.0, 1.0);
  tmpvar_32.z = tmpvar_29;
  vec3 tmpvar_33;
  tmpvar_33 = mix ((tmpvar_32 * tmpvar_23.yxz), mix ((tmpvar_30 * tmpvar_23.xzy), (tmpvar_31 * tmpvar_23.zxy), vec3(tmpvar_27)), vec3(tmpvar_28));
  uv_25 = (((
    (0.5 * tmpvar_33.yz)
   / 
    abs(tmpvar_33.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_34;
  vec2 tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = (0.5 * _CityOverlayDetailScale);
  tmpvar_35 = abs((uv_25 - tmpvar_36));
  uvCont_34.x = max (tmpvar_35.x, tmpvar_35.y);
  uvCont_34.y = min (tmpvar_35.x, tmpvar_35.y);
  vec4 tmpvar_37;
  tmpvar_37.xy = dFdx(uvCont_34);
  tmpvar_37.zw = dFdy(uvCont_34);
  vec4 tmpvar_38;
  tmpvar_38 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_25, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_38.xyz;
  vec2 uv_39;
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_23);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  float tmpvar_42;
  tmpvar_42 = float((max (tmpvar_40.x, tmpvar_40.z) >= tmpvar_40.y));
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_41), tmpvar_42));
  vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = -(tmpvar_43);
  vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, -1.0);
  tmpvar_45.y = tmpvar_43;
  vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = tmpvar_43;
  vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_23.yxz), mix ((tmpvar_44 * tmpvar_23.xzy), (tmpvar_45 * tmpvar_23.zxy), vec3(tmpvar_41)), vec3(tmpvar_42));
  uv_39 = (((
    (0.5 * tmpvar_47.yz)
   / 
    abs(tmpvar_47.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_48;
  vec2 tmpvar_49;
  tmpvar_49 = abs((uv_39 - tmpvar_36));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  vec4 tmpvar_51;
  tmpvar_51 = texture2DGradARB (_CityLightOverlayDetailTex, uv_39, tmpvar_50.xy, tmpvar_50.zw);
  citylightoverlaydetail_1.xyz = tmpvar_51.xyz;
  cityoverlay_3.w = (tmpvar_21 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_38.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_51.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_51.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_52;
  vec3 tmpvar_53;
  tmpvar_53 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_54;
  tmpvar_54 = normalize(normal_20);
  float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_53);
  c_52.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_55) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_53 + normalize(xlv_TEXCOORD1)))
    , tmpvar_54), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_52.w = (tmpvar_55 * 2.0);
  float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_52 * mix (1.0, clamp (
    floor((1.01 + tmpvar_56))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_56))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_57;
  tmpvar_57 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_57;
  gl_FragData[0] = tmpvar_57;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 236 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump float tmpvar_30;
  mediump vec4 v_31;
  v_31 = (tmpvar_29 * alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  mediump vec2 uv_33;
  mediump vec3 detailCoords_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = s_35;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_43 * tmpvar_27.xzy), (tmpvar_44 * tmpvar_27.zxy), vec3(zxlerp_37));
  detailCoords_34 = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = s_35;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_27.yxz), detailCoords_34, vec3(nylerp_36));
  detailCoords_34 = tmpvar_47;
  uv_33 = (((
    (0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_48;
  uv_48 = uv_33;
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (0.5 * _CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_52;
  tmpvar_52.xy = dFdx(uvCont_49);
  tmpvar_52.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_33, tmpvar_52.xy, tmpvar_52.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  mediump vec2 uv_55;
  mediump vec3 detailCoords_56;
  mediump float s_57;
  mediump float nylerp_58;
  mediump float zxlerp_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  highp float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_59);
  s_57 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, s_57, nylerp_58));
  s_57 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xz = vec2(1.0, -1.0);
  tmpvar_65.y = -(s_57);
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = s_57;
  highp vec3 tmpvar_67;
  tmpvar_67 = mix ((tmpvar_65 * tmpvar_27.xzy), (tmpvar_66 * tmpvar_27.zxy), vec3(zxlerp_59));
  detailCoords_56 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xy = vec2(1.0, 1.0);
  tmpvar_68.z = s_57;
  highp vec3 tmpvar_69;
  tmpvar_69 = mix ((tmpvar_68 * tmpvar_27.yxz), detailCoords_56, vec3(nylerp_58));
  detailCoords_56 = tmpvar_69;
  uv_55 = (((
    (0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_70;
  uv_70 = uv_55;
  highp vec2 uvCont_71;
  highp vec2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  highp vec4 tmpvar_73;
  tmpvar_73.xy = dFdx(uvCont_71);
  tmpvar_73.zw = dFdy(uvCont_71);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_55, tmpvar_73.xy, tmpvar_73.zw);
  mediump vec4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_76;
  lightDir_76 = xlv_TEXCOORD5;
  mediump vec3 viewDir_77;
  viewDir_77 = xlv_TEXCOORD1;
  mediump vec4 c_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_76);
  lightDir_76 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_77);
  viewDir_77 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(normT_5);
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  highp float tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (pow (tmpvar_83, _SpecularPower) * _SpecularColor.w);
  c_78.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_82) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_85)) * 2.0);
  c_78.w = (tmpvar_82 * 2.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = normalize(_SunDir);
  mediump vec3 lightDir_87;
  lightDir_87 = tmpvar_86;
  mediump vec3 normal_88;
  normal_88 = xlv_TEXCOORD3;
  mediump float tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  color_6 = (c_78 * mix (1.0, clamp (
    floor((1.01 + tmpvar_89))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_89))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_90;
  tmpvar_1 = tmpvar_90;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1 = texture(cube_CityOverlayTex, t9.yxz);
    t16_14.xy = t10_1.xy * alphaMask1.xy;
    t16_14.x = t16_14.y + t16_14.x;
    t16_14.x = t10_1.z * alphaMask1.z + t16_14.x;
    t16_14.x = t10_1.w * alphaMask1.w + t16_14.x;
    t16_5 = t16_5 * t16_14.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    t16_23 = t16_23 + t16_23;
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t2.xy = t10_2.xy * alphaMask1.xy;
    t2.x = t2.y + t2.x;
    t2.x = t10_2.z * alphaMask1.z + t2.x;
    t2.x = t10_2.w * alphaMask1.w + t2.x;
    t19 = t19 * t2.x;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t1.x = t1.x + t1.x;
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 242 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform samplerCube cube_CityOverlayTex;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  vec2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2);
  vec2 uv_14;
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_13.x / tmpvar_13.z)
  ), 1.0));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_13.x / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);
  };
  uv_14.x = (0.5 + (0.1591549 * tmpvar_15));
  uv_14.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_13.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.570796 + (
      abs(tmpvar_13.y)
     * 
      (-0.2146018 + (abs(tmpvar_13.y) * (0.08656672 + (
        abs(tmpvar_13.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_18;
  uvCont_18.y = uv_14.y;
  uvCont_18.x = abs((uv_14.x - 0.5));
  vec4 tmpvar_19;
  tmpvar_19.xy = dFdx(uvCont_18);
  tmpvar_19.zw = dFdy(uvCont_18);
  vec3 normal_20;
  normal_20.xy = ((texture2DGradARB (_BumpMap, uv_14, tmpvar_19.xy, tmpvar_19.zw).wy * 2.0) - 1.0);
  normal_20.z = sqrt((1.0 - clamp (
    dot (normal_20.xy, normal_20.xy)
  , 0.0, 1.0)));
  float tmpvar_21;
  vec4 v_22;
  vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2);
  v_22 = (textureCube (cube_CityOverlayTex, tmpvar_23) * alphaMask1);
  tmpvar_21 = ((v_22.x + v_22.y) + (v_22.z + v_22.w));
  vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_24.w = tmpvar_21;
  cityoverlay_3.xyz = tmpvar_24.xyz;
  vec2 uv_25;
  vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_23);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  float tmpvar_28;
  tmpvar_28 = float((max (tmpvar_26.x, tmpvar_26.z) >= tmpvar_26.y));
  float tmpvar_29;
  tmpvar_29 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_27), tmpvar_28));
  vec3 tmpvar_30;
  tmpvar_30.xz = vec2(1.0, -1.0);
  tmpvar_30.y = -(tmpvar_29);
  vec3 tmpvar_31;
  tmpvar_31.xz = vec2(1.0, -1.0);
  tmpvar_31.y = tmpvar_29;
  vec3 tmpvar_32;
  tmpvar_32.xy = vec2(1.0, 1.0);
  tmpvar_32.z = tmpvar_29;
  vec3 tmpvar_33;
  tmpvar_33 = mix ((tmpvar_32 * tmpvar_23.yxz), mix ((tmpvar_30 * tmpvar_23.xzy), (tmpvar_31 * tmpvar_23.zxy), vec3(tmpvar_27)), vec3(tmpvar_28));
  uv_25 = (((
    (0.5 * tmpvar_33.yz)
   / 
    abs(tmpvar_33.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_34;
  vec2 tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = (0.5 * _CityOverlayDetailScale);
  tmpvar_35 = abs((uv_25 - tmpvar_36));
  uvCont_34.x = max (tmpvar_35.x, tmpvar_35.y);
  uvCont_34.y = min (tmpvar_35.x, tmpvar_35.y);
  vec4 tmpvar_37;
  tmpvar_37.xy = dFdx(uvCont_34);
  tmpvar_37.zw = dFdy(uvCont_34);
  vec4 tmpvar_38;
  tmpvar_38 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_25, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_38.xyz;
  vec2 uv_39;
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_23);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  float tmpvar_42;
  tmpvar_42 = float((max (tmpvar_40.x, tmpvar_40.z) >= tmpvar_40.y));
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_23.y, mix (tmpvar_23.x, tmpvar_23.z, tmpvar_41), tmpvar_42));
  vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = -(tmpvar_43);
  vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, -1.0);
  tmpvar_45.y = tmpvar_43;
  vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = tmpvar_43;
  vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_23.yxz), mix ((tmpvar_44 * tmpvar_23.xzy), (tmpvar_45 * tmpvar_23.zxy), vec3(tmpvar_41)), vec3(tmpvar_42));
  uv_39 = (((
    (0.5 * tmpvar_47.yz)
   / 
    abs(tmpvar_47.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_48;
  vec2 tmpvar_49;
  tmpvar_49 = abs((uv_39 - tmpvar_36));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  vec4 tmpvar_51;
  tmpvar_51 = texture2DGradARB (_CityLightOverlayDetailTex, uv_39, tmpvar_50.xy, tmpvar_50.zw);
  citylightoverlaydetail_1.xyz = tmpvar_51.xyz;
  cityoverlay_3.w = (tmpvar_21 * (1.0 - float(
    (tmpvar_12.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_38.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_51.w * cityoverlay_3.w);
  color_4.xyz = (tmpvar_51.xyz * citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_52;
  tmpvar_52 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_53;
  vec3 tmpvar_54;
  tmpvar_54 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_55;
  tmpvar_55 = normalize(normal_20);
  float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_54);
  c_53.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_56) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_54 + normalize(xlv_TEXCOORD1)))
    , tmpvar_55), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_52.x * 2.0));
  c_53.w = (tmpvar_56 * (tmpvar_52.x * 2.0));
  float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_4 = (c_53 * mix (1.0, clamp (
    floor((1.01 + tmpvar_57))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_57))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_4.w, 0.0, 1.0)));
  vec4 tmpvar_58;
  tmpvar_58 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4 = tmpvar_58;
  gl_FragData[0] = tmpvar_58;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 242 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump float tmpvar_30;
  mediump vec4 v_31;
  v_31 = (tmpvar_29 * alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  mediump vec2 uv_33;
  mediump vec3 detailCoords_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = s_35;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_43 * tmpvar_27.xzy), (tmpvar_44 * tmpvar_27.zxy), vec3(zxlerp_37));
  detailCoords_34 = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = s_35;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_27.yxz), detailCoords_34, vec3(nylerp_36));
  detailCoords_34 = tmpvar_47;
  uv_33 = (((
    (0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_48;
  uv_48 = uv_33;
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (0.5 * _CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_52;
  tmpvar_52.xy = dFdx(uvCont_49);
  tmpvar_52.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_33, tmpvar_52.xy, tmpvar_52.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  mediump vec2 uv_55;
  mediump vec3 detailCoords_56;
  mediump float s_57;
  mediump float nylerp_58;
  mediump float zxlerp_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  highp float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_59);
  s_57 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, s_57, nylerp_58));
  s_57 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xz = vec2(1.0, -1.0);
  tmpvar_65.y = -(s_57);
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = s_57;
  highp vec3 tmpvar_67;
  tmpvar_67 = mix ((tmpvar_65 * tmpvar_27.xzy), (tmpvar_66 * tmpvar_27.zxy), vec3(zxlerp_59));
  detailCoords_56 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xy = vec2(1.0, 1.0);
  tmpvar_68.z = s_57;
  highp vec3 tmpvar_69;
  tmpvar_69 = mix ((tmpvar_68 * tmpvar_27.yxz), detailCoords_56, vec3(nylerp_58));
  detailCoords_56 = tmpvar_69;
  uv_55 = (((
    (0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_70;
  uv_70 = uv_55;
  highp vec2 uvCont_71;
  highp vec2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  highp vec4 tmpvar_73;
  tmpvar_73.xy = dFdx(uvCont_71);
  tmpvar_73.zw = dFdy(uvCont_71);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_55, tmpvar_73.xy, tmpvar_73.zw);
  mediump vec4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_76 = tmpvar_77;
  mediump vec3 lightDir_78;
  lightDir_78 = xlv_TEXCOORD5;
  mediump vec3 viewDir_79;
  viewDir_79 = xlv_TEXCOORD1;
  mediump float atten_80;
  atten_80 = tmpvar_76;
  mediump vec4 c_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = normalize(lightDir_78);
  lightDir_78 = tmpvar_82;
  mediump vec3 tmpvar_83;
  tmpvar_83 = normalize(viewDir_79);
  viewDir_79 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = normalize(normT_5);
  mediump float tmpvar_85;
  tmpvar_85 = dot (tmpvar_84, tmpvar_82);
  highp float tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp (dot (normalize(
    (tmpvar_82 + tmpvar_83)
  ), tmpvar_84), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = (pow (tmpvar_86, _SpecularPower) * _SpecularColor.w);
  c_81.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_85) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_88)) * (atten_80 * 2.0));
  c_81.w = (tmpvar_85 * (atten_80 * 2.0));
  highp vec3 tmpvar_89;
  tmpvar_89 = normalize(_SunDir);
  mediump vec3 lightDir_90;
  lightDir_90 = tmpvar_89;
  mediump vec3 normal_91;
  normal_91 = xlv_TEXCOORD3;
  mediump float tmpvar_92;
  tmpvar_92 = dot (normal_91, lightDir_90);
  color_6 = (c_81 * mix (1.0, clamp (
    floor((1.01 + tmpvar_92))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_92))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_93;
  tmpvar_93 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_93;
  tmpvar_1 = tmpvar_93;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  samplerCube cube_CityOverlayTex;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
int ti0;
vec4 t1;
lowp vec4 t10_1;
vec2 t2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
lowp vec4 t10_4;
vec3 t5;
vec3 t6;
vec3 t7;
int ti7;
bvec2 tb7;
vec3 t8;
bool tb8;
vec2 t12;
float t13;
float t14;
int ti14;
float t19;
bool tb19;
float t20;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t6.z), abs(t6.y));
    t1.x = float(1.0) / t1.x;
    t7.x = min(abs(t6.z), abs(t6.y));
    t1.x = t1.x * t7.x;
    t7.x = t1.x * t1.x;
    t13 = t7.x * 0.0208350997 + -0.0851330012;
    t13 = t7.x * t13 + 0.180141002;
    t13 = t7.x * t13 + -0.330299497;
    t7.x = t7.x * t13 + 0.999866009;
    t13 = t7.x * t1.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb19 = abs(t6.z)<abs(t6.y);
    t13 = tb19 ? t13 : float(0.0);
    t1.x = t1.x * t7.x + t13;
    tb7.xy = lessThan(t6.zxzz, (-t6.zxzz)).xy;
    t7.x = tb7.x ? -3.14159274 : float(0.0);
    t1.x = t7.x + t1.x;
    t7.x = min(t6.z, t6.y);
    tb7.x = t7.x<(-t7.x);
    t19 = max(t6.z, t6.y);
    tb19 = t19>=(-t19);
    ti7 = int(uint(tb19) * 0xffffffffu & uint(tb7.x) * 0xffffffffu);
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    t7.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t7.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t19 = abs(t6.x) * -0.0187292993 + 0.0742610022;
    t19 = t19 * abs(t6.x) + -0.212114394;
    t19 = t19 * abs(t6.x) + 1.57072878;
    t14 = -abs(t6.x) + 1.0;
    t14 = sqrt(t14);
    t20 = t19 * t14;
    t20 = t20 * -2.0 + 3.14159274;
    t13 = tb7.y ? t20 : float(0.0);
    t13 = t19 * t14 + t13;
    t2.y = t13 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_4 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t10_1 = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t1.xy = t10_1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb19 = t10_4.w>=1.0;
    t19 = (tb19) ? 0.0 : 1.0;
    t10_2 = texture(cube_CityOverlayTex, t6.yxz);
    t2.xy = t10_2.xy * alphaMask1.xy;
    t2.x = t2.y + t2.x;
    t2.x = t10_2.z * alphaMask1.z + t2.x;
    t2.x = t10_2.w * alphaMask1.w + t2.x;
    t19 = t19 * t2.x;
    t2.x = vs_TEXCOORD2.z * t0.x + (-t6.y);
    tb8 = abs(t6.z)>=abs(t6.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t6.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t2.x;
    t2.x = max(abs(t6.z), abs(t6.y));
    tb2 = t2.x>=abs(t6.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t0.x = t2.x * t0.x + t6.x;
    ti14 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti14) + ti0;
    t3.y = float(ti0);
    t4.y = (-t3.y);
    t4.xz = vec2(1.0, -1.0);
    t4.xyz = t6.yzx * t4.xyz;
    t3.xz = vec2(1.0, -1.0);
    t5.xyz = t3.xyz * t6.zyx + (-t4.xyz);
    t8.xyz = t8.xxx * t5.xyz + t4.xyz;
    t8.xyz = (-t3.xxy) * t6.xyz + t8.xyz;
    t0.xyz = t6.xyz * t3.xxy;
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t12.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t2.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t12.x);
    t2.y = dFdy(t12.x);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t2.x = t19 * t4.w;
    t0.w = t19 * t0.w;
    t19 = dot(t1.xy, t1.xy);
    t19 = min(t19, 1.0);
    t19 = (-t19) + 1.0;
    t1.z = sqrt(t19);
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t8.xyz = vec3(t19) * vs_TEXCOORD5.xyz;
    t1.x = dot(t1.xyz, t8.xyz);
    t7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_3 = texture(_ShadowMapTexture, t7.xy);
    t1.x = dot(t10_3.xx, t1.xx);
    t7.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t7.x = dot(vs_TEXCOORD3.xyz, t7.xyz);
    t13 = t7.x + 1.00999999;
    t7.x = t7.x * -10.0;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t13 = floor(t13);
    t13 = clamp(t13, 0.0, 1.0);
    t13 = t13 + -1.0;
    t7.x = t7.x * t13 + 1.0;
    t1.x = t7.x * t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = (-t1.x) + 1.0;
    t4.w = t1.x * t2.x;
    t1 = (-t0) + t4;
    SV_Target0 = t4.wwww * t1 + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 241 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump float tmpvar_30;
  mediump vec4 v_31;
  v_31 = (tmpvar_29 * alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  mediump vec2 uv_33;
  mediump vec3 detailCoords_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = s_35;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_43 * tmpvar_27.xzy), (tmpvar_44 * tmpvar_27.zxy), vec3(zxlerp_37));
  detailCoords_34 = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = s_35;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_27.yxz), detailCoords_34, vec3(nylerp_36));
  detailCoords_34 = tmpvar_47;
  uv_33 = (((
    (0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_48;
  uv_48 = uv_33;
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (0.5 * _CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_52;
  tmpvar_52.xy = dFdx(uvCont_49);
  tmpvar_52.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_33, tmpvar_52.xy, tmpvar_52.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  mediump vec2 uv_55;
  mediump vec3 detailCoords_56;
  mediump float s_57;
  mediump float nylerp_58;
  mediump float zxlerp_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  highp float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_59);
  s_57 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, s_57, nylerp_58));
  s_57 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xz = vec2(1.0, -1.0);
  tmpvar_65.y = -(s_57);
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = s_57;
  highp vec3 tmpvar_67;
  tmpvar_67 = mix ((tmpvar_65 * tmpvar_27.xzy), (tmpvar_66 * tmpvar_27.zxy), vec3(zxlerp_59));
  detailCoords_56 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xy = vec2(1.0, 1.0);
  tmpvar_68.z = s_57;
  highp vec3 tmpvar_69;
  tmpvar_69 = mix ((tmpvar_68 * tmpvar_27.yxz), detailCoords_56, vec3(nylerp_58));
  detailCoords_56 = tmpvar_69;
  uv_55 = (((
    (0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_70;
  uv_70 = uv_55;
  highp vec2 uvCont_71;
  highp vec2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  highp vec4 tmpvar_73;
  tmpvar_73.xy = dFdx(uvCont_71);
  tmpvar_73.zw = dFdy(uvCont_71);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_55, tmpvar_73.xy, tmpvar_73.zw);
  mediump vec4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_76;
  shadow_76 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_77;
  lightDir_77 = xlv_TEXCOORD5;
  mediump vec3 viewDir_78;
  viewDir_78 = xlv_TEXCOORD1;
  mediump float atten_79;
  atten_79 = shadow_76;
  mediump vec4 c_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(lightDir_77);
  lightDir_77 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = normalize(viewDir_78);
  viewDir_78 = tmpvar_82;
  mediump vec3 tmpvar_83;
  tmpvar_83 = normalize(normT_5);
  mediump float tmpvar_84;
  tmpvar_84 = dot (tmpvar_83, tmpvar_81);
  highp float tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp (dot (normalize(
    (tmpvar_81 + tmpvar_82)
  ), tmpvar_83), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = (pow (tmpvar_85, _SpecularPower) * _SpecularColor.w);
  c_80.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_84) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_87)) * (atten_79 * 2.0));
  c_80.w = (tmpvar_84 * (atten_79 * 2.0));
  highp vec3 tmpvar_88;
  tmpvar_88 = normalize(_SunDir);
  mediump vec3 lightDir_89;
  lightDir_89 = tmpvar_88;
  mediump vec3 normal_90;
  normal_90 = xlv_TEXCOORD3;
  mediump float tmpvar_91;
  tmpvar_91 = dot (normal_90, lightDir_89);
  color_6 = (c_80 * mix (1.0, clamp (
    floor((1.01 + tmpvar_91))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_91))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_92;
  tmpvar_1 = tmpvar_92;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1 = texture(cube_CityOverlayTex, t9.yxz);
    t16_14.xy = t10_1.xy * alphaMask1.xy;
    t16_14.x = t16_14.y + t16_14.x;
    t16_14.x = t10_1.z * alphaMask1.z + t16_14.x;
    t16_14.x = t10_1.w * alphaMask1.w + t16_14.x;
    t16_5 = t16_5 * t16_14.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    vec3 txVec23 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_32 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec23, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_32 = t16_32 * t16_33 + _LightShadowData.x;
    t16_23 = dot(vec2(t16_32), vec2(t16_23));
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 241 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_CityOverlayTex;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec4 tmpvar_13;
  tmpvar_13.xy = dFdx(uvCont_12);
  tmpvar_13.zw = dFdy(uvCont_12);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_17;
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  highp vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_21);
  tmpvar_22.zw = dFdy(uvCont_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DGradEXT (_BumpMap, uv_17, tmpvar_22.xy, tmpvar_22.zw);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec3 tmpvar_25;
  lowp vec4 packednormal_26;
  packednormal_26 = tmpvar_24;
  tmpvar_25 = ((packednormal_26.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_25;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (cube_CityOverlayTex, tmpvar_27);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump float tmpvar_30;
  mediump vec4 v_31;
  v_31 = (tmpvar_29 * alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  mediump vec2 uv_33;
  mediump vec3 detailCoords_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = s_35;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_43 * tmpvar_27.xzy), (tmpvar_44 * tmpvar_27.zxy), vec3(zxlerp_37));
  detailCoords_34 = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = s_35;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_27.yxz), detailCoords_34, vec3(nylerp_36));
  detailCoords_34 = tmpvar_47;
  uv_33 = (((
    (0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_48;
  uv_48 = uv_33;
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (0.5 * _CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_52;
  tmpvar_52.xy = dFdx(uvCont_49);
  tmpvar_52.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_33, tmpvar_52.xy, tmpvar_52.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  mediump vec2 uv_55;
  mediump vec3 detailCoords_56;
  mediump float s_57;
  mediump float nylerp_58;
  mediump float zxlerp_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  highp float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, zxlerp_59);
  s_57 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, s_57, nylerp_58));
  s_57 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65.xz = vec2(1.0, -1.0);
  tmpvar_65.y = -(s_57);
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = s_57;
  highp vec3 tmpvar_67;
  tmpvar_67 = mix ((tmpvar_65 * tmpvar_27.xzy), (tmpvar_66 * tmpvar_27.zxy), vec3(zxlerp_59));
  detailCoords_56 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xy = vec2(1.0, 1.0);
  tmpvar_68.z = s_57;
  highp vec3 tmpvar_69;
  tmpvar_69 = mix ((tmpvar_68 * tmpvar_27.yxz), detailCoords_56, vec3(nylerp_58));
  detailCoords_56 = tmpvar_69;
  uv_55 = (((
    (0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_70;
  uv_70 = uv_55;
  highp vec2 uvCont_71;
  highp vec2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  highp vec4 tmpvar_73;
  tmpvar_73.xy = dFdx(uvCont_71);
  tmpvar_73.zw = dFdy(uvCont_71);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_55, tmpvar_73.xy, tmpvar_73.zw);
  mediump vec4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * (1.0 - float(
    (tmpvar_15.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_76;
  shadow_76 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_77;
  lightDir_77 = xlv_TEXCOORD5;
  mediump vec3 viewDir_78;
  viewDir_78 = xlv_TEXCOORD1;
  mediump float atten_79;
  atten_79 = shadow_76;
  mediump vec4 c_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(lightDir_77);
  lightDir_77 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = normalize(viewDir_78);
  viewDir_78 = tmpvar_82;
  mediump vec3 tmpvar_83;
  tmpvar_83 = normalize(normT_5);
  mediump float tmpvar_84;
  tmpvar_84 = dot (tmpvar_83, tmpvar_81);
  highp float tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp (dot (normalize(
    (tmpvar_81 + tmpvar_82)
  ), tmpvar_83), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = (pow (tmpvar_85, _SpecularPower) * _SpecularColor.w);
  c_80.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_84) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_87)) * (atten_79 * 2.0));
  c_80.w = (tmpvar_84 * (atten_79 * 2.0));
  highp vec3 tmpvar_88;
  tmpvar_88 = normalize(_SunDir);
  mediump vec3 lightDir_89;
  lightDir_89 = tmpvar_88;
  mediump vec3 normal_90;
  normal_90 = xlv_TEXCOORD3;
  mediump float tmpvar_91;
  tmpvar_91 = dot (normal_90, lightDir_89);
  color_6 = (c_80 * mix (1.0, clamp (
    floor((1.01 + tmpvar_91))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_91))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_92;
  tmpvar_1 = tmpvar_92;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube cube_CityOverlayTex;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
highp int ti0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
lowp vec4 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec3 t10;
highp int ti10;
bvec2 tb10;
mediump vec2 t16_14;
highp vec2 t18;
highp float t19;
lowp float t10_19;
highp int ti19;
highp float t20;
mediump float t16_23;
highp float t27;
highp float t28;
bool tb28;
highp float t29;
mediump float t16_32;
mediump float t16_33;
void main()
{
    t0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t0.x = inversesqrt(t0.x);
    t9.xyz = t0.xxx * vs_TEXCOORD2.yxz;
    t1.x = max(abs(t9.z), abs(t9.y));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t9.z), abs(t9.y));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19 = t10.x * 0.0208350997 + -0.0851330012;
    t19 = t10.x * t19 + 0.180141002;
    t19 = t10.x * t19 + -0.330299497;
    t10.x = t10.x * t19 + 0.999866009;
    t19 = t10.x * t1.x;
    t19 = t19 * -2.0 + 1.57079637;
    tb28 = abs(t9.z)<abs(t9.y);
    t19 = tb28 ? t19 : float(0.0);
    t1.x = t1.x * t10.x + t19;
    tb10.xy = lessThan(t9.zxzz, (-t9.zxzz)).xy;
    t10.x = tb10.x ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t9.z, t9.y);
    tb10.x = t10.x<(-t10.x);
    t28 = max(t9.z, t9.y);
    tb28 = t28>=(-t28);
    ti10 = int(uint(tb28) * 0xffffffffu & uint(tb10.x) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    t10.x = t1.x * 0.159154937;
    t2.x = t1.x * 0.159154937 + 0.5;
    t1.x = abs(t10.x);
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t28 = abs(t9.x) * -0.0187292993 + 0.0742610022;
    t28 = t28 * abs(t9.x) + -0.212114394;
    t28 = t28 * abs(t9.x) + 1.57072878;
    t20 = -abs(t9.x) + 1.0;
    t20 = sqrt(t20);
    t29 = t28 * t20;
    t29 = t29 * -2.0 + 3.14159274;
    t19 = tb10.y ? t29 : float(0.0);
    t19 = t28 * t20 + t19;
    t2.y = t19 * 0.318309873;
    t3.y = dFdx(t2.y);
    t1.y = dFdy(t2.y);
    t10_19 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).w;
    t10_1.xyw = textureGrad(_BumpMap, t2.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy).xyz;
    t10_4.xyz = t10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_19>=1.0;
    t16_5 = (tb1) ? 0.0 : 1.0;
    t10_1 = texture(cube_CityOverlayTex, t9.yxz);
    t16_14.xy = t10_1.xy * alphaMask1.xy;
    t16_14.x = t16_14.y + t16_14.x;
    t16_14.x = t10_1.z * alphaMask1.z + t16_14.x;
    t16_14.x = t10_1.w * alphaMask1.w + t16_14.x;
    t16_5 = t16_5 * t16_14.x;
    t1.x = vs_TEXCOORD2.z * t0.x + (-t9.y);
    tb10.x = abs(t9.z)>=abs(t9.y);
    t10.x = tb10.x ? 1.0 : float(0.0);
    t1.x = t10.x * t1.x + t9.y;
    t0.x = (-vs_TEXCOORD2.y) * t0.x + t1.x;
    t1.x = max(abs(t9.z), abs(t9.y));
    tb1 = t1.x>=abs(t9.x);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t9.x;
    ti19 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti19) + ti0;
    t16_6.y = float(ti0);
    t16_7.y = (-t16_6.y);
    t16_7.xz = vec2(1.0, -1.0);
    t2.xyz = t9.yzx * t16_7.xyz;
    t16_6.xz = vec2(1.0, -1.0);
    t3.xyz = t16_6.xyz * t9.zyx + (-t2.xyz);
    t10.xyz = t10.xxx * t3.xyz + t2.xyz;
    t10.xyz = (-t16_6.xxy) * t9.xyz + t10.xyz;
    t0.xyz = t9.xyz * t16_6.xxy;
    t0.xyz = t1.xxx * t10.xyz + t0.xyz;
    t16_14.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t16_14.xy = t16_14.xy / abs(t0.xx);
    t16_14.xy = t16_14.xy + vec2(0.5, 0.5);
    t0.xy = t16_14.xy * vec2(_CityOverlayDetailScale);
    t18.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t18.y), abs(t18.x));
    t18.x = min(abs(t18.y), abs(t18.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t18.x);
    t1.y = dFdy(t18.x);
    t10_3 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t10_0 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_14.x = t16_5 * t10_3.w;
    t16_5 = t16_5 * t10_0.w;
    t16_6.xyz = (-t10_0.xyz) + t10_3.xyz;
    t16_23 = dot(t10_4.xyz, t10_4.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_7.xyz = t10_4.xyz * vec3(t16_23);
    t16_23 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_8.xyz = vec3(t16_23) * vs_TEXCOORD5.xyz;
    t16_23 = dot(t16_7.xyz, t16_8.xyz);
    vec3 txVec13 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_32 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_32 = t16_32 * t16_33 + _LightShadowData.x;
    t16_23 = dot(vec2(t16_32), vec2(t16_23));
    t27 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t27 = inversesqrt(t27);
    t1.xyz = vec3(float(t27) * _SunDir.xxyz.y, float(t27) * _SunDir.xxyz.z, float(t27) * float(_SunDir.z));
    t16_32 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_32 + 1.00999999;
    t16_32 = t16_32 * -10.0;
    t16_32 = clamp(t16_32, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_32 = t16_32 * t16_33 + 1.0;
    t16_23 = t16_32 * t16_23;
    t16_23 = clamp(t16_23, 0.0, 1.0);
    t16_23 = (-t16_23) + 1.0;
    t16_32 = t16_14.x * t16_23 + (-t16_5);
    t16_14.x = t16_23 * t16_14.x;
    t16_1.w = t16_14.x * t16_32 + t16_5;
    t16_1.xyz = t16_14.xxx * t16_6.xyz + t10_0.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 268 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_32.w;
  tmpvar_34.y = tmpvar_32.w;
  tmpvar_34.z = tmpvar_32.w;
  tmpvar_34.w = tmpvar_33;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_33 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_62;
  vec3 tmpvar_63;
  tmpvar_63 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_64;
  tmpvar_64 = normalize(normal_18);
  float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_63);
  c_62.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_65) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_63 + normalize(xlv_TEXCOORD1)))
    , tmpvar_64), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_62.w = (tmpvar_65 * 2.0);
  float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_62 * mix (1.0, clamp (
    floor((1.01 + tmpvar_66))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_66))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_67;
  gl_FragData[0] = tmpvar_67;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 264 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump float tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump vec4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  mediump vec2 uv_56;
  mediump vec3 detailCoords_57;
  mediump float s_58;
  mediump float nylerp_59;
  mediump float zxlerp_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  highp float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_60);
  s_58 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, s_58, nylerp_59));
  s_58 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = -(s_58);
  mediump vec3 tmpvar_67;
  tmpvar_67.xz = vec2(1.0, -1.0);
  tmpvar_67.y = s_58;
  highp vec3 tmpvar_68;
  tmpvar_68 = mix ((tmpvar_66 * tmpvar_33.xzy), (tmpvar_67 * tmpvar_33.zxy), vec3(zxlerp_60));
  detailCoords_57 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xy = vec2(1.0, 1.0);
  tmpvar_69.z = s_58;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_69 * tmpvar_33.yxz), detailCoords_57, vec3(nylerp_59));
  detailCoords_57 = tmpvar_70;
  uv_56 = (((
    (0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_71;
  uv_71 = uv_56;
  highp vec2 uvCont_72;
  highp vec2 tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (0.5 * _CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  highp vec4 tmpvar_75;
  tmpvar_75.xy = dFdx(uvCont_72);
  tmpvar_75.zw = dFdy(uvCont_72);
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_56, tmpvar_75.xy, tmpvar_75.zw);
  mediump vec4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  mediump vec2 uv_78;
  mediump vec3 detailCoords_79;
  mediump float s_80;
  mediump float nylerp_81;
  mediump float zxlerp_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  highp float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_82);
  s_80 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, s_80, nylerp_81));
  s_80 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88.xz = vec2(1.0, -1.0);
  tmpvar_88.y = -(s_80);
  mediump vec3 tmpvar_89;
  tmpvar_89.xz = vec2(1.0, -1.0);
  tmpvar_89.y = s_80;
  highp vec3 tmpvar_90;
  tmpvar_90 = mix ((tmpvar_88 * tmpvar_33.xzy), (tmpvar_89 * tmpvar_33.zxy), vec3(zxlerp_82));
  detailCoords_79 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91.xy = vec2(1.0, 1.0);
  tmpvar_91.z = s_80;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_91 * tmpvar_33.yxz), detailCoords_79, vec3(nylerp_81));
  detailCoords_79 = tmpvar_92;
  uv_78 = (((
    (0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_93;
  uv_93 = uv_78;
  highp vec2 uvCont_94;
  highp vec2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  highp vec4 tmpvar_96;
  tmpvar_96.xy = dFdx(uvCont_94);
  tmpvar_96.zw = dFdy(uvCont_94);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_78, tmpvar_96.xy, tmpvar_96.zw);
  mediump vec4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_99;
  lightDir_99 = xlv_TEXCOORD5;
  mediump vec3 viewDir_100;
  viewDir_100 = xlv_TEXCOORD1;
  mediump vec4 c_101;
  mediump vec3 tmpvar_102;
  tmpvar_102 = normalize(lightDir_99);
  lightDir_99 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = normalize(viewDir_100);
  viewDir_100 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = normalize(normT_5);
  mediump float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_102);
  highp float tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = clamp (dot (normalize(
    (tmpvar_102 + tmpvar_103)
  ), tmpvar_104), 0.0, 1.0);
  tmpvar_106 = tmpvar_107;
  highp float tmpvar_108;
  tmpvar_108 = (pow (tmpvar_106, _SpecularPower) * _SpecularColor.w);
  c_101.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_105) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_108)) * 2.0);
  c_101.w = (tmpvar_105 * 2.0);
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(_SunDir);
  mediump vec3 lightDir_110;
  lightDir_110 = tmpvar_109;
  mediump vec3 normal_111;
  normal_111 = xlv_TEXCOORD3;
  mediump float tmpvar_112;
  tmpvar_112 = dot (normal_111, lightDir_110);
  color_6 = (c_101 * mix (1.0, clamp (
    floor((1.01 + tmpvar_112))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_112))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_113;
  tmpvar_113 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_113;
  tmpvar_1 = tmpvar_113;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
lowp vec3 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_6.xyz = textureGrad(cube_CityOverlayTexPOS, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t10_4.xyz = textureGrad(cube_CityOverlayTexNEG, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.xyz = (-t10_4.xyz) + t10_6.xyz;
    t16_0.xyz = t16_0.xxx * t16_10.xyz + t10_4.xyz;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12 * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    t16_20 = t16_20 + t16_20;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
mediump vec3 t16_8;
int ti8;
bool tb8;
float t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12 = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12);
    t4.x = dFdy(t12);
    t12 = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12);
    t4.y = dFdy(t12);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_8.xyz = (-t10_3.xyz) + t10_5.xyz;
    t8.xyz = vec3(t18) * t16_8.xyz + t10_3.xyz;
    t12 = (-t8.x) + t8.z;
    t12 = t2.x * t12 + t8.x;
    t12 = (-t8.y) + t12;
    t12 = t19 * t12 + t8.y;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12 = t18 * t12;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12 * t4.w;
    t2.w = t12 * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t6.x = t6.x + t6.x;
    t12 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12 + 1.00999999;
    t12 = t12 * -10.0;
    t12 = clamp(t12, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12 = t12 * t18 + 1.0;
    t6.x = t12 * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 270 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_32.w;
  tmpvar_34.y = tmpvar_32.w;
  tmpvar_34.z = tmpvar_32.w;
  tmpvar_34.w = tmpvar_33;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_33 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_62;
  tmpvar_62 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_63;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_65;
  tmpvar_65 = normalize(normal_18);
  float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_64);
  c_63.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_66) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_64 + normalize(xlv_TEXCOORD1)))
    , tmpvar_65), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_62.x * 2.0));
  c_63.w = (tmpvar_66 * (tmpvar_62.x * 2.0));
  float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_63 * mix (1.0, clamp (
    floor((1.01 + tmpvar_67))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_67))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_68;
  gl_FragData[0] = tmpvar_68;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 270 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump float tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump vec4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  mediump vec2 uv_56;
  mediump vec3 detailCoords_57;
  mediump float s_58;
  mediump float nylerp_59;
  mediump float zxlerp_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  highp float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_60);
  s_58 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, s_58, nylerp_59));
  s_58 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = -(s_58);
  mediump vec3 tmpvar_67;
  tmpvar_67.xz = vec2(1.0, -1.0);
  tmpvar_67.y = s_58;
  highp vec3 tmpvar_68;
  tmpvar_68 = mix ((tmpvar_66 * tmpvar_33.xzy), (tmpvar_67 * tmpvar_33.zxy), vec3(zxlerp_60));
  detailCoords_57 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xy = vec2(1.0, 1.0);
  tmpvar_69.z = s_58;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_69 * tmpvar_33.yxz), detailCoords_57, vec3(nylerp_59));
  detailCoords_57 = tmpvar_70;
  uv_56 = (((
    (0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_71;
  uv_71 = uv_56;
  highp vec2 uvCont_72;
  highp vec2 tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (0.5 * _CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  highp vec4 tmpvar_75;
  tmpvar_75.xy = dFdx(uvCont_72);
  tmpvar_75.zw = dFdy(uvCont_72);
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_56, tmpvar_75.xy, tmpvar_75.zw);
  mediump vec4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  mediump vec2 uv_78;
  mediump vec3 detailCoords_79;
  mediump float s_80;
  mediump float nylerp_81;
  mediump float zxlerp_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  highp float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_82);
  s_80 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, s_80, nylerp_81));
  s_80 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88.xz = vec2(1.0, -1.0);
  tmpvar_88.y = -(s_80);
  mediump vec3 tmpvar_89;
  tmpvar_89.xz = vec2(1.0, -1.0);
  tmpvar_89.y = s_80;
  highp vec3 tmpvar_90;
  tmpvar_90 = mix ((tmpvar_88 * tmpvar_33.xzy), (tmpvar_89 * tmpvar_33.zxy), vec3(zxlerp_82));
  detailCoords_79 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91.xy = vec2(1.0, 1.0);
  tmpvar_91.z = s_80;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_91 * tmpvar_33.yxz), detailCoords_79, vec3(nylerp_81));
  detailCoords_79 = tmpvar_92;
  uv_78 = (((
    (0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_93;
  uv_93 = uv_78;
  highp vec2 uvCont_94;
  highp vec2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  highp vec4 tmpvar_96;
  tmpvar_96.xy = dFdx(uvCont_94);
  tmpvar_96.zw = dFdy(uvCont_94);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_78, tmpvar_96.xy, tmpvar_96.zw);
  mediump vec4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_99;
  highp float tmpvar_100;
  tmpvar_100 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_99 = tmpvar_100;
  mediump vec3 lightDir_101;
  lightDir_101 = xlv_TEXCOORD5;
  mediump vec3 viewDir_102;
  viewDir_102 = xlv_TEXCOORD1;
  mediump float atten_103;
  atten_103 = tmpvar_99;
  mediump vec4 c_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = normalize(lightDir_101);
  lightDir_101 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(viewDir_102);
  viewDir_102 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = normalize(normT_5);
  mediump float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_105);
  highp float tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp (dot (normalize(
    (tmpvar_105 + tmpvar_106)
  ), tmpvar_107), 0.0, 1.0);
  tmpvar_109 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (pow (tmpvar_109, _SpecularPower) * _SpecularColor.w);
  c_104.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_108) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_111)) * (atten_103 * 2.0));
  c_104.w = (tmpvar_108 * (atten_103 * 2.0));
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize(_SunDir);
  mediump vec3 lightDir_113;
  lightDir_113 = tmpvar_112;
  mediump vec3 normal_114;
  normal_114 = xlv_TEXCOORD3;
  mediump float tmpvar_115;
  tmpvar_115 = dot (normal_114, lightDir_113);
  color_6 = (c_104 * mix (1.0, clamp (
    floor((1.01 + tmpvar_115))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_115))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_116;
  tmpvar_116 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_116;
  tmpvar_1 = tmpvar_116;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
mediump vec3 t16_8;
int ti8;
bool tb8;
vec2 t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12.x);
    t4.x = dFdy(t12.x);
    t12.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_8.xyz = (-t10_3.xyz) + t10_5.xyz;
    t8.xyz = vec3(t18) * t16_8.xyz + t10_3.xyz;
    t12.x = (-t8.x) + t8.z;
    t12.x = t2.x * t12.x + t8.x;
    t12.x = (-t8.y) + t12.x;
    t12.x = t19 * t12.x + t8.y;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12.x = t18 * t12.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12.x * t4.w;
    t2.w = t12.x * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t12.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t12.xy);
    t6.x = dot(t10_1.xx, t6.xx);
    t12.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12.x = inversesqrt(t12.x);
    t1.xyz = t12.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12.x + 1.00999999;
    t12.x = t12.x * -10.0;
    t12.x = clamp(t12.x, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12.x = t12.x * t18 + 1.0;
    t6.x = t12.x * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 268 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_32.w;
  tmpvar_34.y = tmpvar_32.w;
  tmpvar_34.z = tmpvar_32.w;
  tmpvar_34.w = tmpvar_33;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_33 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_62;
  vec3 tmpvar_63;
  tmpvar_63 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_64;
  tmpvar_64 = normalize(normal_18);
  float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_63);
  c_62.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_65) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_63 + normalize(xlv_TEXCOORD1)))
    , tmpvar_64), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_62.w = (tmpvar_65 * 2.0);
  float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_62 * mix (1.0, clamp (
    floor((1.01 + tmpvar_66))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_66))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_67;
  gl_FragData[0] = tmpvar_67;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 264 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump float tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump vec4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  mediump vec2 uv_56;
  mediump vec3 detailCoords_57;
  mediump float s_58;
  mediump float nylerp_59;
  mediump float zxlerp_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  highp float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_60);
  s_58 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, s_58, nylerp_59));
  s_58 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = -(s_58);
  mediump vec3 tmpvar_67;
  tmpvar_67.xz = vec2(1.0, -1.0);
  tmpvar_67.y = s_58;
  highp vec3 tmpvar_68;
  tmpvar_68 = mix ((tmpvar_66 * tmpvar_33.xzy), (tmpvar_67 * tmpvar_33.zxy), vec3(zxlerp_60));
  detailCoords_57 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xy = vec2(1.0, 1.0);
  tmpvar_69.z = s_58;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_69 * tmpvar_33.yxz), detailCoords_57, vec3(nylerp_59));
  detailCoords_57 = tmpvar_70;
  uv_56 = (((
    (0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_71;
  uv_71 = uv_56;
  highp vec2 uvCont_72;
  highp vec2 tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (0.5 * _CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  highp vec4 tmpvar_75;
  tmpvar_75.xy = dFdx(uvCont_72);
  tmpvar_75.zw = dFdy(uvCont_72);
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_56, tmpvar_75.xy, tmpvar_75.zw);
  mediump vec4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  mediump vec2 uv_78;
  mediump vec3 detailCoords_79;
  mediump float s_80;
  mediump float nylerp_81;
  mediump float zxlerp_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  highp float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_82);
  s_80 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, s_80, nylerp_81));
  s_80 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88.xz = vec2(1.0, -1.0);
  tmpvar_88.y = -(s_80);
  mediump vec3 tmpvar_89;
  tmpvar_89.xz = vec2(1.0, -1.0);
  tmpvar_89.y = s_80;
  highp vec3 tmpvar_90;
  tmpvar_90 = mix ((tmpvar_88 * tmpvar_33.xzy), (tmpvar_89 * tmpvar_33.zxy), vec3(zxlerp_82));
  detailCoords_79 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91.xy = vec2(1.0, 1.0);
  tmpvar_91.z = s_80;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_91 * tmpvar_33.yxz), detailCoords_79, vec3(nylerp_81));
  detailCoords_79 = tmpvar_92;
  uv_78 = (((
    (0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_93;
  uv_93 = uv_78;
  highp vec2 uvCont_94;
  highp vec2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  highp vec4 tmpvar_96;
  tmpvar_96.xy = dFdx(uvCont_94);
  tmpvar_96.zw = dFdy(uvCont_94);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_78, tmpvar_96.xy, tmpvar_96.zw);
  mediump vec4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_99;
  lightDir_99 = xlv_TEXCOORD5;
  mediump vec3 viewDir_100;
  viewDir_100 = xlv_TEXCOORD1;
  mediump vec4 c_101;
  mediump vec3 tmpvar_102;
  tmpvar_102 = normalize(lightDir_99);
  lightDir_99 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = normalize(viewDir_100);
  viewDir_100 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = normalize(normT_5);
  mediump float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_102);
  highp float tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = clamp (dot (normalize(
    (tmpvar_102 + tmpvar_103)
  ), tmpvar_104), 0.0, 1.0);
  tmpvar_106 = tmpvar_107;
  highp float tmpvar_108;
  tmpvar_108 = (pow (tmpvar_106, _SpecularPower) * _SpecularColor.w);
  c_101.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_105) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_108)) * 2.0);
  c_101.w = (tmpvar_105 * 2.0);
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(_SunDir);
  mediump vec3 lightDir_110;
  lightDir_110 = tmpvar_109;
  mediump vec3 normal_111;
  normal_111 = xlv_TEXCOORD3;
  mediump float tmpvar_112;
  tmpvar_112 = dot (normal_111, lightDir_110);
  color_6 = (c_101 * mix (1.0, clamp (
    floor((1.01 + tmpvar_112))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_112))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_113;
  tmpvar_113 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_113;
  tmpvar_1 = tmpvar_113;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
lowp vec3 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_6.xyz = textureGrad(cube_CityOverlayTexPOS, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t10_4.xyz = textureGrad(cube_CityOverlayTexNEG, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.xyz = (-t10_4.xyz) + t10_6.xyz;
    t16_0.xyz = t16_0.xxx * t16_10.xyz + t10_4.xyz;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12 * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    t16_20 = t16_20 + t16_20;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
mediump vec3 t16_8;
int ti8;
bool tb8;
float t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12 = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12);
    t4.x = dFdy(t12);
    t12 = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12);
    t4.y = dFdy(t12);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_8.xyz = (-t10_3.xyz) + t10_5.xyz;
    t8.xyz = vec3(t18) * t16_8.xyz + t10_3.xyz;
    t12 = (-t8.x) + t8.z;
    t12 = t2.x * t12 + t8.x;
    t12 = (-t8.y) + t12;
    t12 = t19 * t12 + t8.y;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12 = t18 * t12;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12 * t4.w;
    t2.w = t12 * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t6.x = t6.x + t6.x;
    t12 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12 + 1.00999999;
    t12 = t12 * -10.0;
    t12 = clamp(t12, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12 = t12 * t18 + 1.0;
    t6.x = t12 * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 270 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_32.w;
  tmpvar_34.y = tmpvar_32.w;
  tmpvar_34.z = tmpvar_32.w;
  tmpvar_34.w = tmpvar_33;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_33 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_62;
  tmpvar_62 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_63;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_65;
  tmpvar_65 = normalize(normal_18);
  float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_64);
  c_63.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_66) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_64 + normalize(xlv_TEXCOORD1)))
    , tmpvar_65), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_62.x * 2.0));
  c_63.w = (tmpvar_66 * (tmpvar_62.x * 2.0));
  float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_63 * mix (1.0, clamp (
    floor((1.01 + tmpvar_67))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_67))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_68;
  gl_FragData[0] = tmpvar_68;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 270 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump float tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump vec4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  mediump vec2 uv_56;
  mediump vec3 detailCoords_57;
  mediump float s_58;
  mediump float nylerp_59;
  mediump float zxlerp_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  highp float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_60);
  s_58 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, s_58, nylerp_59));
  s_58 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = -(s_58);
  mediump vec3 tmpvar_67;
  tmpvar_67.xz = vec2(1.0, -1.0);
  tmpvar_67.y = s_58;
  highp vec3 tmpvar_68;
  tmpvar_68 = mix ((tmpvar_66 * tmpvar_33.xzy), (tmpvar_67 * tmpvar_33.zxy), vec3(zxlerp_60));
  detailCoords_57 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xy = vec2(1.0, 1.0);
  tmpvar_69.z = s_58;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_69 * tmpvar_33.yxz), detailCoords_57, vec3(nylerp_59));
  detailCoords_57 = tmpvar_70;
  uv_56 = (((
    (0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_71;
  uv_71 = uv_56;
  highp vec2 uvCont_72;
  highp vec2 tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (0.5 * _CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  highp vec4 tmpvar_75;
  tmpvar_75.xy = dFdx(uvCont_72);
  tmpvar_75.zw = dFdy(uvCont_72);
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_56, tmpvar_75.xy, tmpvar_75.zw);
  mediump vec4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  mediump vec2 uv_78;
  mediump vec3 detailCoords_79;
  mediump float s_80;
  mediump float nylerp_81;
  mediump float zxlerp_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  highp float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_82);
  s_80 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, s_80, nylerp_81));
  s_80 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88.xz = vec2(1.0, -1.0);
  tmpvar_88.y = -(s_80);
  mediump vec3 tmpvar_89;
  tmpvar_89.xz = vec2(1.0, -1.0);
  tmpvar_89.y = s_80;
  highp vec3 tmpvar_90;
  tmpvar_90 = mix ((tmpvar_88 * tmpvar_33.xzy), (tmpvar_89 * tmpvar_33.zxy), vec3(zxlerp_82));
  detailCoords_79 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91.xy = vec2(1.0, 1.0);
  tmpvar_91.z = s_80;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_91 * tmpvar_33.yxz), detailCoords_79, vec3(nylerp_81));
  detailCoords_79 = tmpvar_92;
  uv_78 = (((
    (0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_93;
  uv_93 = uv_78;
  highp vec2 uvCont_94;
  highp vec2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  highp vec4 tmpvar_96;
  tmpvar_96.xy = dFdx(uvCont_94);
  tmpvar_96.zw = dFdy(uvCont_94);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_78, tmpvar_96.xy, tmpvar_96.zw);
  mediump vec4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_99;
  highp float tmpvar_100;
  tmpvar_100 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_99 = tmpvar_100;
  mediump vec3 lightDir_101;
  lightDir_101 = xlv_TEXCOORD5;
  mediump vec3 viewDir_102;
  viewDir_102 = xlv_TEXCOORD1;
  mediump float atten_103;
  atten_103 = tmpvar_99;
  mediump vec4 c_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = normalize(lightDir_101);
  lightDir_101 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(viewDir_102);
  viewDir_102 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = normalize(normT_5);
  mediump float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_105);
  highp float tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp (dot (normalize(
    (tmpvar_105 + tmpvar_106)
  ), tmpvar_107), 0.0, 1.0);
  tmpvar_109 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (pow (tmpvar_109, _SpecularPower) * _SpecularColor.w);
  c_104.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_108) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_111)) * (atten_103 * 2.0));
  c_104.w = (tmpvar_108 * (atten_103 * 2.0));
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize(_SunDir);
  mediump vec3 lightDir_113;
  lightDir_113 = tmpvar_112;
  mediump vec3 normal_114;
  normal_114 = xlv_TEXCOORD3;
  mediump float tmpvar_115;
  tmpvar_115 = dot (normal_114, lightDir_113);
  color_6 = (c_104 * mix (1.0, clamp (
    floor((1.01 + tmpvar_115))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_115))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_116;
  tmpvar_116 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_116;
  tmpvar_1 = tmpvar_116;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
mediump vec3 t16_8;
int ti8;
bool tb8;
vec2 t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12.x);
    t4.x = dFdy(t12.x);
    t12.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_8.xyz = (-t10_3.xyz) + t10_5.xyz;
    t8.xyz = vec3(t18) * t16_8.xyz + t10_3.xyz;
    t12.x = (-t8.x) + t8.z;
    t12.x = t2.x * t12.x + t8.x;
    t12.x = (-t8.y) + t12.x;
    t12.x = t19 * t12.x + t8.y;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12.x = t18 * t12.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12.x * t4.w;
    t2.w = t12.x * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t12.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t12.xy);
    t6.x = dot(t10_1.xx, t6.xx);
    t12.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12.x = inversesqrt(t12.x);
    t1.xyz = t12.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12.x + 1.00999999;
    t12.x = t12.x * -10.0;
    t12.x = clamp(t12.x, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12.x = t12.x * t18 + 1.0;
    t6.x = t12.x * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 269 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump float tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump vec4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  mediump vec2 uv_56;
  mediump vec3 detailCoords_57;
  mediump float s_58;
  mediump float nylerp_59;
  mediump float zxlerp_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  highp float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_60);
  s_58 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, s_58, nylerp_59));
  s_58 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = -(s_58);
  mediump vec3 tmpvar_67;
  tmpvar_67.xz = vec2(1.0, -1.0);
  tmpvar_67.y = s_58;
  highp vec3 tmpvar_68;
  tmpvar_68 = mix ((tmpvar_66 * tmpvar_33.xzy), (tmpvar_67 * tmpvar_33.zxy), vec3(zxlerp_60));
  detailCoords_57 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xy = vec2(1.0, 1.0);
  tmpvar_69.z = s_58;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_69 * tmpvar_33.yxz), detailCoords_57, vec3(nylerp_59));
  detailCoords_57 = tmpvar_70;
  uv_56 = (((
    (0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_71;
  uv_71 = uv_56;
  highp vec2 uvCont_72;
  highp vec2 tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (0.5 * _CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  highp vec4 tmpvar_75;
  tmpvar_75.xy = dFdx(uvCont_72);
  tmpvar_75.zw = dFdy(uvCont_72);
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_56, tmpvar_75.xy, tmpvar_75.zw);
  mediump vec4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  mediump vec2 uv_78;
  mediump vec3 detailCoords_79;
  mediump float s_80;
  mediump float nylerp_81;
  mediump float zxlerp_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  highp float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_82);
  s_80 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, s_80, nylerp_81));
  s_80 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88.xz = vec2(1.0, -1.0);
  tmpvar_88.y = -(s_80);
  mediump vec3 tmpvar_89;
  tmpvar_89.xz = vec2(1.0, -1.0);
  tmpvar_89.y = s_80;
  highp vec3 tmpvar_90;
  tmpvar_90 = mix ((tmpvar_88 * tmpvar_33.xzy), (tmpvar_89 * tmpvar_33.zxy), vec3(zxlerp_82));
  detailCoords_79 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91.xy = vec2(1.0, 1.0);
  tmpvar_91.z = s_80;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_91 * tmpvar_33.yxz), detailCoords_79, vec3(nylerp_81));
  detailCoords_79 = tmpvar_92;
  uv_78 = (((
    (0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_93;
  uv_93 = uv_78;
  highp vec2 uvCont_94;
  highp vec2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  highp vec4 tmpvar_96;
  tmpvar_96.xy = dFdx(uvCont_94);
  tmpvar_96.zw = dFdy(uvCont_94);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_78, tmpvar_96.xy, tmpvar_96.zw);
  mediump vec4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_99;
  shadow_99 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_100;
  lightDir_100 = xlv_TEXCOORD5;
  mediump vec3 viewDir_101;
  viewDir_101 = xlv_TEXCOORD1;
  mediump float atten_102;
  atten_102 = shadow_99;
  mediump vec4 c_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = normalize(lightDir_100);
  lightDir_100 = tmpvar_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = normalize(viewDir_101);
  viewDir_101 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(normT_5);
  mediump float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_104);
  highp float tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp (dot (normalize(
    (tmpvar_104 + tmpvar_105)
  ), tmpvar_106), 0.0, 1.0);
  tmpvar_108 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (pow (tmpvar_108, _SpecularPower) * _SpecularColor.w);
  c_103.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_107) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_110)) * (atten_102 * 2.0));
  c_103.w = (tmpvar_107 * (atten_102 * 2.0));
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize(_SunDir);
  mediump vec3 lightDir_112;
  lightDir_112 = tmpvar_111;
  mediump vec3 normal_113;
  normal_113 = xlv_TEXCOORD3;
  mediump float tmpvar_114;
  tmpvar_114 = dot (normal_113, lightDir_112);
  color_6 = (c_103 * mix (1.0, clamp (
    floor((1.01 + tmpvar_114))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_114))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_115;
  tmpvar_115 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_115;
  tmpvar_1 = tmpvar_115;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
lowp vec3 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_6.xyz = textureGrad(cube_CityOverlayTexPOS, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t10_4.xyz = textureGrad(cube_CityOverlayTexNEG, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.xyz = (-t10_4.xyz) + t10_6.xyz;
    t16_0.xyz = t16_0.xxx * t16_10.xyz + t10_4.xyz;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12 * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    vec3 txVec14 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_30 = t16_30 * t16_33 + _LightShadowData.x;
    t16_20 = dot(vec2(t16_30), vec2(t16_20));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 269 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump float tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump vec4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  mediump vec2 uv_56;
  mediump vec3 detailCoords_57;
  mediump float s_58;
  mediump float nylerp_59;
  mediump float zxlerp_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  highp float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_60);
  s_58 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, s_58, nylerp_59));
  s_58 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66.xz = vec2(1.0, -1.0);
  tmpvar_66.y = -(s_58);
  mediump vec3 tmpvar_67;
  tmpvar_67.xz = vec2(1.0, -1.0);
  tmpvar_67.y = s_58;
  highp vec3 tmpvar_68;
  tmpvar_68 = mix ((tmpvar_66 * tmpvar_33.xzy), (tmpvar_67 * tmpvar_33.zxy), vec3(zxlerp_60));
  detailCoords_57 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69.xy = vec2(1.0, 1.0);
  tmpvar_69.z = s_58;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_69 * tmpvar_33.yxz), detailCoords_57, vec3(nylerp_59));
  detailCoords_57 = tmpvar_70;
  uv_56 = (((
    (0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_71;
  uv_71 = uv_56;
  highp vec2 uvCont_72;
  highp vec2 tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (0.5 * _CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  highp vec4 tmpvar_75;
  tmpvar_75.xy = dFdx(uvCont_72);
  tmpvar_75.zw = dFdy(uvCont_72);
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_56, tmpvar_75.xy, tmpvar_75.zw);
  mediump vec4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  mediump vec2 uv_78;
  mediump vec3 detailCoords_79;
  mediump float s_80;
  mediump float nylerp_81;
  mediump float zxlerp_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  highp float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_82);
  s_80 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, s_80, nylerp_81));
  s_80 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88.xz = vec2(1.0, -1.0);
  tmpvar_88.y = -(s_80);
  mediump vec3 tmpvar_89;
  tmpvar_89.xz = vec2(1.0, -1.0);
  tmpvar_89.y = s_80;
  highp vec3 tmpvar_90;
  tmpvar_90 = mix ((tmpvar_88 * tmpvar_33.xzy), (tmpvar_89 * tmpvar_33.zxy), vec3(zxlerp_82));
  detailCoords_79 = tmpvar_90;
  mediump vec3 tmpvar_91;
  tmpvar_91.xy = vec2(1.0, 1.0);
  tmpvar_91.z = s_80;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_91 * tmpvar_33.yxz), detailCoords_79, vec3(nylerp_81));
  detailCoords_79 = tmpvar_92;
  uv_78 = (((
    (0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_93;
  uv_93 = uv_78;
  highp vec2 uvCont_94;
  highp vec2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  highp vec4 tmpvar_96;
  tmpvar_96.xy = dFdx(uvCont_94);
  tmpvar_96.zw = dFdy(uvCont_94);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_78, tmpvar_96.xy, tmpvar_96.zw);
  mediump vec4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_99;
  shadow_99 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_100;
  lightDir_100 = xlv_TEXCOORD5;
  mediump vec3 viewDir_101;
  viewDir_101 = xlv_TEXCOORD1;
  mediump float atten_102;
  atten_102 = shadow_99;
  mediump vec4 c_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = normalize(lightDir_100);
  lightDir_100 = tmpvar_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = normalize(viewDir_101);
  viewDir_101 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(normT_5);
  mediump float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_104);
  highp float tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp (dot (normalize(
    (tmpvar_104 + tmpvar_105)
  ), tmpvar_106), 0.0, 1.0);
  tmpvar_108 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (pow (tmpvar_108, _SpecularPower) * _SpecularColor.w);
  c_103.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_107) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_110)) * (atten_102 * 2.0));
  c_103.w = (tmpvar_107 * (atten_102 * 2.0));
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize(_SunDir);
  mediump vec3 lightDir_112;
  lightDir_112 = tmpvar_111;
  mediump vec3 normal_113;
  normal_113 = xlv_TEXCOORD3;
  mediump float tmpvar_114;
  tmpvar_114 = dot (normal_113, lightDir_112);
  color_6 = (c_103 * mix (1.0, clamp (
    floor((1.01 + tmpvar_114))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_114))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_115;
  tmpvar_115 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_115;
  tmpvar_1 = tmpvar_115;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
lowp vec3 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_6.xyz = textureGrad(cube_CityOverlayTexPOS, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t10_4.xyz = textureGrad(cube_CityOverlayTexNEG, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.xyz = (-t10_4.xyz) + t10_6.xyz;
    t16_0.xyz = t16_0.xxx * t16_10.xyz + t10_4.xyz;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12 * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    vec3 txVec16 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_30 = t16_30 * t16_33 + _LightShadowData.x;
    t16_20 = dot(vec2(t16_30), vec2(t16_20));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 273 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_32.w;
  tmpvar_33.y = tmpvar_32.w;
  tmpvar_33.z = tmpvar_32.w;
  tmpvar_33.w = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  float tmpvar_34;
  vec4 v_35;
  v_35 = (tmpvar_33 * alphaMask1);
  tmpvar_34 = ((v_35.x + v_35.y) + (v_35.z + v_35.w));
  vec4 tmpvar_36;
  tmpvar_36.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_36.w = tmpvar_34;
  cityoverlay_3.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_19);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_19.yxz), mix ((tmpvar_42 * tmpvar_19.xzy), (tmpvar_43 * tmpvar_19.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_37 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  vec4 tmpvar_50;
  tmpvar_50 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_37, tmpvar_49.xy, tmpvar_49.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_50.xyz;
  vec2 uv_51;
  vec3 tmpvar_52;
  tmpvar_52 = abs(tmpvar_19);
  float tmpvar_53;
  tmpvar_53 = float((tmpvar_52.z >= tmpvar_52.x));
  float tmpvar_54;
  tmpvar_54 = float((max (tmpvar_52.x, tmpvar_52.z) >= tmpvar_52.y));
  float tmpvar_55;
  tmpvar_55 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_53), tmpvar_54));
  vec3 tmpvar_56;
  tmpvar_56.xz = vec2(1.0, -1.0);
  tmpvar_56.y = -(tmpvar_55);
  vec3 tmpvar_57;
  tmpvar_57.xz = vec2(1.0, -1.0);
  tmpvar_57.y = tmpvar_55;
  vec3 tmpvar_58;
  tmpvar_58.xy = vec2(1.0, 1.0);
  tmpvar_58.z = tmpvar_55;
  vec3 tmpvar_59;
  tmpvar_59 = mix ((tmpvar_58 * tmpvar_19.yxz), mix ((tmpvar_56 * tmpvar_19.xzy), (tmpvar_57 * tmpvar_19.zxy), vec3(tmpvar_53)), vec3(tmpvar_54));
  uv_51 = (((
    (0.5 * tmpvar_59.yz)
   / 
    abs(tmpvar_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_60;
  vec2 tmpvar_61;
  tmpvar_61 = abs((uv_51 - tmpvar_48));
  uvCont_60.x = max (tmpvar_61.x, tmpvar_61.y);
  uvCont_60.y = min (tmpvar_61.x, tmpvar_61.y);
  vec4 tmpvar_62;
  tmpvar_62.xy = dFdx(uvCont_60);
  tmpvar_62.zw = dFdy(uvCont_60);
  vec4 tmpvar_63;
  tmpvar_63 = texture2DGradARB (_CityLightOverlayDetailTex, uv_51, tmpvar_62.xy, tmpvar_62.zw);
  citylightoverlaydetail_1.xyz = tmpvar_63.xyz;
  cityoverlay_3.w = (tmpvar_34 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_50.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_63.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_63.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_64;
  vec3 tmpvar_65;
  tmpvar_65 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_66;
  tmpvar_66 = normalize(normal_18);
  float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_65);
  c_64.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_67) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_65 + normalize(xlv_TEXCOORD1)))
    , tmpvar_66), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_64.w = (tmpvar_67 * 2.0);
  float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_64 * mix (1.0, clamp (
    floor((1.01 + tmpvar_68))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_68))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_69;
  tmpvar_69 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_69;
  gl_FragData[0] = tmpvar_69;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 269 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump float tmpvar_55;
  mediump vec4 v_56;
  v_56 = (tmpvar_54 * alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  mediump vec2 uv_58;
  mediump vec3 detailCoords_59;
  mediump float s_60;
  mediump float nylerp_61;
  mediump float zxlerp_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  highp float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_62);
  s_60 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, s_60, nylerp_61));
  s_60 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xz = vec2(1.0, -1.0);
  tmpvar_68.y = -(s_60);
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = s_60;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_68 * tmpvar_33.xzy), (tmpvar_69 * tmpvar_33.zxy), vec3(zxlerp_62));
  detailCoords_59 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71.xy = vec2(1.0, 1.0);
  tmpvar_71.z = s_60;
  highp vec3 tmpvar_72;
  tmpvar_72 = mix ((tmpvar_71 * tmpvar_33.yxz), detailCoords_59, vec3(nylerp_61));
  detailCoords_59 = tmpvar_72;
  uv_58 = (((
    (0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_73;
  uv_73 = uv_58;
  highp vec2 uvCont_74;
  highp vec2 tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (0.5 * _CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_74);
  tmpvar_77.zw = dFdy(uvCont_74);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_58, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  mediump vec2 uv_80;
  mediump vec3 detailCoords_81;
  mediump float s_82;
  mediump float nylerp_83;
  mediump float zxlerp_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  highp float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_84);
  s_82 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, s_82, nylerp_83));
  s_82 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90.xz = vec2(1.0, -1.0);
  tmpvar_90.y = -(s_82);
  mediump vec3 tmpvar_91;
  tmpvar_91.xz = vec2(1.0, -1.0);
  tmpvar_91.y = s_82;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_90 * tmpvar_33.xzy), (tmpvar_91 * tmpvar_33.zxy), vec3(zxlerp_84));
  detailCoords_81 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93.xy = vec2(1.0, 1.0);
  tmpvar_93.z = s_82;
  highp vec3 tmpvar_94;
  tmpvar_94 = mix ((tmpvar_93 * tmpvar_33.yxz), detailCoords_81, vec3(nylerp_83));
  detailCoords_81 = tmpvar_94;
  uv_80 = (((
    (0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_95;
  uv_95 = uv_80;
  highp vec2 uvCont_96;
  highp vec2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  highp vec4 tmpvar_98;
  tmpvar_98.xy = dFdx(uvCont_96);
  tmpvar_98.zw = dFdy(uvCont_96);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_80, tmpvar_98.xy, tmpvar_98.zw);
  mediump vec4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_101;
  lightDir_101 = xlv_TEXCOORD5;
  mediump vec3 viewDir_102;
  viewDir_102 = xlv_TEXCOORD1;
  mediump vec4 c_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = normalize(lightDir_101);
  lightDir_101 = tmpvar_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = normalize(viewDir_102);
  viewDir_102 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(normT_5);
  mediump float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_104);
  highp float tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp (dot (normalize(
    (tmpvar_104 + tmpvar_105)
  ), tmpvar_106), 0.0, 1.0);
  tmpvar_108 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (pow (tmpvar_108, _SpecularPower) * _SpecularColor.w);
  c_103.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_107) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_110)) * 2.0);
  c_103.w = (tmpvar_107 * 2.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize(_SunDir);
  mediump vec3 lightDir_112;
  lightDir_112 = tmpvar_111;
  mediump vec3 normal_113;
  normal_113 = xlv_TEXCOORD3;
  mediump float tmpvar_114;
  tmpvar_114 = dot (normal_113, lightDir_112);
  color_6 = (c_103 * mix (1.0, clamp (
    floor((1.01 + tmpvar_114))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_114))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_115;
  tmpvar_115 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_115;
  tmpvar_1 = tmpvar_115;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
highp vec3 t12;
lowp vec3 t10_12;
highp float t13;
bool tb13;
mediump float t16_22;
highp float t23;
highp int ti23;
bool tb23;
highp vec2 t24;
highp int ti24;
mediump float t16_33;
mediump float t16_41;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t12.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t12.y);
    tb13 = abs(t12.z)>=abs(t12.y);
    t13 = tb13 ? 1.0 : float(0.0);
    t2.x = t13 * t2.x + t12.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t12.z), abs(t12.y));
    tb2.x = t2.x>=abs(t12.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t12.x;
    ti24 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti24) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t12.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t12.zyx + (-t4.xyz);
    t4.xyz = vec3(t13) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t12.xyz + t4.xyz;
    t5.xyz = t12.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_11.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_11.xy = t16_11.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_11.y), abs(t16_11.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_11.y), abs(t16_11.x));
    t16_11.xy = t16_11.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexPOS, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexNEG, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t24.xy = t16_11.xy * vec2(_CityOverlayDetailScale);
    t16_3 = t10_3 + (-t10_4);
    t16_0 = t16_0.xxxx * t16_3 + t10_4;
    t16_22 = (-t16_0.x) + t16_0.z;
    t16_0.x = t13 * t16_22 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t16_11.xyz = t16_0.www;
    t16_11.xy = t16_11.xy * alphaMask1.xy;
    t16_11.x = t16_11.y + t16_11.x;
    t16_11.x = t16_11.z * alphaMask1.z + t16_11.x;
    t16_0.x = t16_0.x * alphaMask1.w + t16_11.x;
    t1.x = max(abs(t12.z), abs(t12.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t12.z), abs(t12.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t13 = t2.x * 0.0208350997 + -0.0851330012;
    t13 = t2.x * t13 + 0.180141002;
    t13 = t2.x * t13 + -0.330299497;
    t2.x = t2.x * t13 + 0.999866009;
    t13 = t1.x * t2.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb4 = abs(t12.z)<abs(t12.y);
    t13 = tb4 ? t13 : float(0.0);
    t1.x = t1.x * t2.x + t13;
    tb2.xy = lessThan(t12.zxzz, (-t12.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t12.z, t12.y);
    tb2.x = t2.x<(-t2.x);
    t23 = max(t12.z, t12.y);
    tb23 = t23>=(-t23);
    ti23 = int(uint(tb23) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti23 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t12.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t12.x) + -0.212114394;
    t1.x = t1.x * abs(t12.x) + 1.57072878;
    t12.x = -abs(t12.x) + 1.0;
    t12.x = sqrt(t12.x);
    t23 = t12.x * t1.x;
    t23 = t23 * -2.0 + 3.14159274;
    t23 = tb2.y ? t23 : float(0.0);
    t1.x = t1.x * t12.x + t23;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_12.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_11.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_11.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t24.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_11.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_8.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_22 = dot(t10_7.xyz, t10_7.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_9.xyz = vec3(t16_22) * t10_7.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_10.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_9.xyz, t16_10.xyz);
    t16_22 = t16_22 + t16_22;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_33 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_41 = t16_33 + 1.00999999;
    t16_33 = t16_33 * -10.0;
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_41 = floor(t16_41);
    t16_41 = clamp(t16_41, 0.0, 1.0);
    t16_41 = t16_41 + -1.0;
    t16_33 = t16_33 * t16_41 + 1.0;
    t16_22 = t16_33 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_33 = t16_11.x * t16_22 + (-t16_0.x);
    t16_11.x = t16_22 * t16_11.x;
    t16_1.w = t16_11.x * t16_33 + t16_0.x;
    t16_1.xyz = t16_11.xxx * t16_8.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
int ti8;
bool tb8;
float t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12 = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12);
    t4.x = dFdy(t12);
    t12 = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12);
    t4.y = dFdy(t12);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t3.x) + t3.z;
    t12 = t2.x * t12 + t3.x;
    t12 = (-t3.y) + t12;
    t12 = t19 * t12 + t3.y;
    t2.xyz = t3.www;
    t2.xy = t2.xy * alphaMask1.xy;
    t18 = t2.y + t2.x;
    t18 = t2.z * alphaMask1.z + t18;
    t12 = t12 * alphaMask1.w + t18;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12 = t18 * t12;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12 * t4.w;
    t2.w = t12 * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t6.x = t6.x + t6.x;
    t12 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12 + 1.00999999;
    t12 = t12 * -10.0;
    t12 = clamp(t12, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12 = t12 * t18 + 1.0;
    t6.x = t12 * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 275 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_32.w;
  tmpvar_33.y = tmpvar_32.w;
  tmpvar_33.z = tmpvar_32.w;
  tmpvar_33.w = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  float tmpvar_34;
  vec4 v_35;
  v_35 = (tmpvar_33 * alphaMask1);
  tmpvar_34 = ((v_35.x + v_35.y) + (v_35.z + v_35.w));
  vec4 tmpvar_36;
  tmpvar_36.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_36.w = tmpvar_34;
  cityoverlay_3.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_19);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_19.yxz), mix ((tmpvar_42 * tmpvar_19.xzy), (tmpvar_43 * tmpvar_19.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_37 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  vec4 tmpvar_50;
  tmpvar_50 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_37, tmpvar_49.xy, tmpvar_49.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_50.xyz;
  vec2 uv_51;
  vec3 tmpvar_52;
  tmpvar_52 = abs(tmpvar_19);
  float tmpvar_53;
  tmpvar_53 = float((tmpvar_52.z >= tmpvar_52.x));
  float tmpvar_54;
  tmpvar_54 = float((max (tmpvar_52.x, tmpvar_52.z) >= tmpvar_52.y));
  float tmpvar_55;
  tmpvar_55 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_53), tmpvar_54));
  vec3 tmpvar_56;
  tmpvar_56.xz = vec2(1.0, -1.0);
  tmpvar_56.y = -(tmpvar_55);
  vec3 tmpvar_57;
  tmpvar_57.xz = vec2(1.0, -1.0);
  tmpvar_57.y = tmpvar_55;
  vec3 tmpvar_58;
  tmpvar_58.xy = vec2(1.0, 1.0);
  tmpvar_58.z = tmpvar_55;
  vec3 tmpvar_59;
  tmpvar_59 = mix ((tmpvar_58 * tmpvar_19.yxz), mix ((tmpvar_56 * tmpvar_19.xzy), (tmpvar_57 * tmpvar_19.zxy), vec3(tmpvar_53)), vec3(tmpvar_54));
  uv_51 = (((
    (0.5 * tmpvar_59.yz)
   / 
    abs(tmpvar_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_60;
  vec2 tmpvar_61;
  tmpvar_61 = abs((uv_51 - tmpvar_48));
  uvCont_60.x = max (tmpvar_61.x, tmpvar_61.y);
  uvCont_60.y = min (tmpvar_61.x, tmpvar_61.y);
  vec4 tmpvar_62;
  tmpvar_62.xy = dFdx(uvCont_60);
  tmpvar_62.zw = dFdy(uvCont_60);
  vec4 tmpvar_63;
  tmpvar_63 = texture2DGradARB (_CityLightOverlayDetailTex, uv_51, tmpvar_62.xy, tmpvar_62.zw);
  citylightoverlaydetail_1.xyz = tmpvar_63.xyz;
  cityoverlay_3.w = (tmpvar_34 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_50.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_63.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_63.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_65;
  vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_67;
  tmpvar_67 = normalize(normal_18);
  float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_66);
  c_65.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_68) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_66 + normalize(xlv_TEXCOORD1)))
    , tmpvar_67), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_64.x * 2.0));
  c_65.w = (tmpvar_68 * (tmpvar_64.x * 2.0));
  float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_65 * mix (1.0, clamp (
    floor((1.01 + tmpvar_69))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_69))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_70;
  tmpvar_70 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_70;
  gl_FragData[0] = tmpvar_70;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 275 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump float tmpvar_55;
  mediump vec4 v_56;
  v_56 = (tmpvar_54 * alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  mediump vec2 uv_58;
  mediump vec3 detailCoords_59;
  mediump float s_60;
  mediump float nylerp_61;
  mediump float zxlerp_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  highp float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_62);
  s_60 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, s_60, nylerp_61));
  s_60 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xz = vec2(1.0, -1.0);
  tmpvar_68.y = -(s_60);
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = s_60;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_68 * tmpvar_33.xzy), (tmpvar_69 * tmpvar_33.zxy), vec3(zxlerp_62));
  detailCoords_59 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71.xy = vec2(1.0, 1.0);
  tmpvar_71.z = s_60;
  highp vec3 tmpvar_72;
  tmpvar_72 = mix ((tmpvar_71 * tmpvar_33.yxz), detailCoords_59, vec3(nylerp_61));
  detailCoords_59 = tmpvar_72;
  uv_58 = (((
    (0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_73;
  uv_73 = uv_58;
  highp vec2 uvCont_74;
  highp vec2 tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (0.5 * _CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_74);
  tmpvar_77.zw = dFdy(uvCont_74);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_58, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  mediump vec2 uv_80;
  mediump vec3 detailCoords_81;
  mediump float s_82;
  mediump float nylerp_83;
  mediump float zxlerp_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  highp float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_84);
  s_82 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, s_82, nylerp_83));
  s_82 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90.xz = vec2(1.0, -1.0);
  tmpvar_90.y = -(s_82);
  mediump vec3 tmpvar_91;
  tmpvar_91.xz = vec2(1.0, -1.0);
  tmpvar_91.y = s_82;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_90 * tmpvar_33.xzy), (tmpvar_91 * tmpvar_33.zxy), vec3(zxlerp_84));
  detailCoords_81 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93.xy = vec2(1.0, 1.0);
  tmpvar_93.z = s_82;
  highp vec3 tmpvar_94;
  tmpvar_94 = mix ((tmpvar_93 * tmpvar_33.yxz), detailCoords_81, vec3(nylerp_83));
  detailCoords_81 = tmpvar_94;
  uv_80 = (((
    (0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_95;
  uv_95 = uv_80;
  highp vec2 uvCont_96;
  highp vec2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  highp vec4 tmpvar_98;
  tmpvar_98.xy = dFdx(uvCont_96);
  tmpvar_98.zw = dFdy(uvCont_96);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_80, tmpvar_98.xy, tmpvar_98.zw);
  mediump vec4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_101 = tmpvar_102;
  mediump vec3 lightDir_103;
  lightDir_103 = xlv_TEXCOORD5;
  mediump vec3 viewDir_104;
  viewDir_104 = xlv_TEXCOORD1;
  mediump float atten_105;
  atten_105 = tmpvar_101;
  mediump vec4 c_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = normalize(lightDir_103);
  lightDir_103 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = normalize(viewDir_104);
  viewDir_104 = tmpvar_108;
  mediump vec3 tmpvar_109;
  tmpvar_109 = normalize(normT_5);
  mediump float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_107);
  highp float tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp (dot (normalize(
    (tmpvar_107 + tmpvar_108)
  ), tmpvar_109), 0.0, 1.0);
  tmpvar_111 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (pow (tmpvar_111, _SpecularPower) * _SpecularColor.w);
  c_106.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_110) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_113)) * (atten_105 * 2.0));
  c_106.w = (tmpvar_110 * (atten_105 * 2.0));
  highp vec3 tmpvar_114;
  tmpvar_114 = normalize(_SunDir);
  mediump vec3 lightDir_115;
  lightDir_115 = tmpvar_114;
  mediump vec3 normal_116;
  normal_116 = xlv_TEXCOORD3;
  mediump float tmpvar_117;
  tmpvar_117 = dot (normal_116, lightDir_115);
  color_6 = (c_106 * mix (1.0, clamp (
    floor((1.01 + tmpvar_117))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_117))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_118;
  tmpvar_118 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_118;
  tmpvar_1 = tmpvar_118;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
int ti8;
bool tb8;
vec2 t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12.x);
    t4.x = dFdy(t12.x);
    t12.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t18) * t16_4 + t10_3;
    t12.x = (-t3.x) + t3.z;
    t12.x = t2.x * t12.x + t3.x;
    t12.x = (-t3.y) + t12.x;
    t12.x = t19 * t12.x + t3.y;
    t2.xyz = t3.www;
    t2.xy = t2.xy * alphaMask1.xy;
    t18 = t2.y + t2.x;
    t18 = t2.z * alphaMask1.z + t18;
    t12.x = t12.x * alphaMask1.w + t18;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12.x = t18 * t12.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12.x * t4.w;
    t2.w = t12.x * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t12.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t12.xy);
    t6.x = dot(t10_1.xx, t6.xx);
    t12.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12.x = inversesqrt(t12.x);
    t1.xyz = t12.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12.x + 1.00999999;
    t12.x = t12.x * -10.0;
    t12.x = clamp(t12.x, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12.x = t12.x * t18 + 1.0;
    t6.x = t12.x * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 273 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_32.w;
  tmpvar_33.y = tmpvar_32.w;
  tmpvar_33.z = tmpvar_32.w;
  tmpvar_33.w = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  float tmpvar_34;
  vec4 v_35;
  v_35 = (tmpvar_33 * alphaMask1);
  tmpvar_34 = ((v_35.x + v_35.y) + (v_35.z + v_35.w));
  vec4 tmpvar_36;
  tmpvar_36.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_36.w = tmpvar_34;
  cityoverlay_3.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_19);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_19.yxz), mix ((tmpvar_42 * tmpvar_19.xzy), (tmpvar_43 * tmpvar_19.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_37 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  vec4 tmpvar_50;
  tmpvar_50 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_37, tmpvar_49.xy, tmpvar_49.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_50.xyz;
  vec2 uv_51;
  vec3 tmpvar_52;
  tmpvar_52 = abs(tmpvar_19);
  float tmpvar_53;
  tmpvar_53 = float((tmpvar_52.z >= tmpvar_52.x));
  float tmpvar_54;
  tmpvar_54 = float((max (tmpvar_52.x, tmpvar_52.z) >= tmpvar_52.y));
  float tmpvar_55;
  tmpvar_55 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_53), tmpvar_54));
  vec3 tmpvar_56;
  tmpvar_56.xz = vec2(1.0, -1.0);
  tmpvar_56.y = -(tmpvar_55);
  vec3 tmpvar_57;
  tmpvar_57.xz = vec2(1.0, -1.0);
  tmpvar_57.y = tmpvar_55;
  vec3 tmpvar_58;
  tmpvar_58.xy = vec2(1.0, 1.0);
  tmpvar_58.z = tmpvar_55;
  vec3 tmpvar_59;
  tmpvar_59 = mix ((tmpvar_58 * tmpvar_19.yxz), mix ((tmpvar_56 * tmpvar_19.xzy), (tmpvar_57 * tmpvar_19.zxy), vec3(tmpvar_53)), vec3(tmpvar_54));
  uv_51 = (((
    (0.5 * tmpvar_59.yz)
   / 
    abs(tmpvar_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_60;
  vec2 tmpvar_61;
  tmpvar_61 = abs((uv_51 - tmpvar_48));
  uvCont_60.x = max (tmpvar_61.x, tmpvar_61.y);
  uvCont_60.y = min (tmpvar_61.x, tmpvar_61.y);
  vec4 tmpvar_62;
  tmpvar_62.xy = dFdx(uvCont_60);
  tmpvar_62.zw = dFdy(uvCont_60);
  vec4 tmpvar_63;
  tmpvar_63 = texture2DGradARB (_CityLightOverlayDetailTex, uv_51, tmpvar_62.xy, tmpvar_62.zw);
  citylightoverlaydetail_1.xyz = tmpvar_63.xyz;
  cityoverlay_3.w = (tmpvar_34 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_50.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_63.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_63.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_64;
  vec3 tmpvar_65;
  tmpvar_65 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_66;
  tmpvar_66 = normalize(normal_18);
  float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_65);
  c_64.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_67) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_65 + normalize(xlv_TEXCOORD1)))
    , tmpvar_66), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_64.w = (tmpvar_67 * 2.0);
  float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_64 * mix (1.0, clamp (
    floor((1.01 + tmpvar_68))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_68))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_69;
  tmpvar_69 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_69;
  gl_FragData[0] = tmpvar_69;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 269 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump float tmpvar_55;
  mediump vec4 v_56;
  v_56 = (tmpvar_54 * alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  mediump vec2 uv_58;
  mediump vec3 detailCoords_59;
  mediump float s_60;
  mediump float nylerp_61;
  mediump float zxlerp_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  highp float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_62);
  s_60 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, s_60, nylerp_61));
  s_60 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xz = vec2(1.0, -1.0);
  tmpvar_68.y = -(s_60);
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = s_60;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_68 * tmpvar_33.xzy), (tmpvar_69 * tmpvar_33.zxy), vec3(zxlerp_62));
  detailCoords_59 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71.xy = vec2(1.0, 1.0);
  tmpvar_71.z = s_60;
  highp vec3 tmpvar_72;
  tmpvar_72 = mix ((tmpvar_71 * tmpvar_33.yxz), detailCoords_59, vec3(nylerp_61));
  detailCoords_59 = tmpvar_72;
  uv_58 = (((
    (0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_73;
  uv_73 = uv_58;
  highp vec2 uvCont_74;
  highp vec2 tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (0.5 * _CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_74);
  tmpvar_77.zw = dFdy(uvCont_74);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_58, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  mediump vec2 uv_80;
  mediump vec3 detailCoords_81;
  mediump float s_82;
  mediump float nylerp_83;
  mediump float zxlerp_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  highp float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_84);
  s_82 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, s_82, nylerp_83));
  s_82 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90.xz = vec2(1.0, -1.0);
  tmpvar_90.y = -(s_82);
  mediump vec3 tmpvar_91;
  tmpvar_91.xz = vec2(1.0, -1.0);
  tmpvar_91.y = s_82;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_90 * tmpvar_33.xzy), (tmpvar_91 * tmpvar_33.zxy), vec3(zxlerp_84));
  detailCoords_81 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93.xy = vec2(1.0, 1.0);
  tmpvar_93.z = s_82;
  highp vec3 tmpvar_94;
  tmpvar_94 = mix ((tmpvar_93 * tmpvar_33.yxz), detailCoords_81, vec3(nylerp_83));
  detailCoords_81 = tmpvar_94;
  uv_80 = (((
    (0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_95;
  uv_95 = uv_80;
  highp vec2 uvCont_96;
  highp vec2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  highp vec4 tmpvar_98;
  tmpvar_98.xy = dFdx(uvCont_96);
  tmpvar_98.zw = dFdy(uvCont_96);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_80, tmpvar_98.xy, tmpvar_98.zw);
  mediump vec4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_101;
  lightDir_101 = xlv_TEXCOORD5;
  mediump vec3 viewDir_102;
  viewDir_102 = xlv_TEXCOORD1;
  mediump vec4 c_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = normalize(lightDir_101);
  lightDir_101 = tmpvar_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = normalize(viewDir_102);
  viewDir_102 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(normT_5);
  mediump float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_104);
  highp float tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp (dot (normalize(
    (tmpvar_104 + tmpvar_105)
  ), tmpvar_106), 0.0, 1.0);
  tmpvar_108 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (pow (tmpvar_108, _SpecularPower) * _SpecularColor.w);
  c_103.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_107) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_110)) * 2.0);
  c_103.w = (tmpvar_107 * 2.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize(_SunDir);
  mediump vec3 lightDir_112;
  lightDir_112 = tmpvar_111;
  mediump vec3 normal_113;
  normal_113 = xlv_TEXCOORD3;
  mediump float tmpvar_114;
  tmpvar_114 = dot (normal_113, lightDir_112);
  color_6 = (c_103 * mix (1.0, clamp (
    floor((1.01 + tmpvar_114))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_114))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_115;
  tmpvar_115 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_115;
  tmpvar_1 = tmpvar_115;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
highp vec3 t12;
lowp vec3 t10_12;
highp float t13;
bool tb13;
mediump float t16_22;
highp float t23;
highp int ti23;
bool tb23;
highp vec2 t24;
highp int ti24;
mediump float t16_33;
mediump float t16_41;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t12.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t12.y);
    tb13 = abs(t12.z)>=abs(t12.y);
    t13 = tb13 ? 1.0 : float(0.0);
    t2.x = t13 * t2.x + t12.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t12.z), abs(t12.y));
    tb2.x = t2.x>=abs(t12.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t12.x;
    ti24 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti24) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t12.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t12.zyx + (-t4.xyz);
    t4.xyz = vec3(t13) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t12.xyz + t4.xyz;
    t5.xyz = t12.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_11.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_11.xy = t16_11.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_11.y), abs(t16_11.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_11.y), abs(t16_11.x));
    t16_11.xy = t16_11.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexPOS, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexNEG, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t24.xy = t16_11.xy * vec2(_CityOverlayDetailScale);
    t16_3 = t10_3 + (-t10_4);
    t16_0 = t16_0.xxxx * t16_3 + t10_4;
    t16_22 = (-t16_0.x) + t16_0.z;
    t16_0.x = t13 * t16_22 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t16_11.xyz = t16_0.www;
    t16_11.xy = t16_11.xy * alphaMask1.xy;
    t16_11.x = t16_11.y + t16_11.x;
    t16_11.x = t16_11.z * alphaMask1.z + t16_11.x;
    t16_0.x = t16_0.x * alphaMask1.w + t16_11.x;
    t1.x = max(abs(t12.z), abs(t12.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t12.z), abs(t12.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t13 = t2.x * 0.0208350997 + -0.0851330012;
    t13 = t2.x * t13 + 0.180141002;
    t13 = t2.x * t13 + -0.330299497;
    t2.x = t2.x * t13 + 0.999866009;
    t13 = t1.x * t2.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb4 = abs(t12.z)<abs(t12.y);
    t13 = tb4 ? t13 : float(0.0);
    t1.x = t1.x * t2.x + t13;
    tb2.xy = lessThan(t12.zxzz, (-t12.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t12.z, t12.y);
    tb2.x = t2.x<(-t2.x);
    t23 = max(t12.z, t12.y);
    tb23 = t23>=(-t23);
    ti23 = int(uint(tb23) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti23 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t12.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t12.x) + -0.212114394;
    t1.x = t1.x * abs(t12.x) + 1.57072878;
    t12.x = -abs(t12.x) + 1.0;
    t12.x = sqrt(t12.x);
    t23 = t12.x * t1.x;
    t23 = t23 * -2.0 + 3.14159274;
    t23 = tb2.y ? t23 : float(0.0);
    t1.x = t1.x * t12.x + t23;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_12.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_11.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_11.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t24.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_11.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_8.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_22 = dot(t10_7.xyz, t10_7.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_9.xyz = vec3(t16_22) * t10_7.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_10.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_9.xyz, t16_10.xyz);
    t16_22 = t16_22 + t16_22;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_33 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_41 = t16_33 + 1.00999999;
    t16_33 = t16_33 * -10.0;
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_41 = floor(t16_41);
    t16_41 = clamp(t16_41, 0.0, 1.0);
    t16_41 = t16_41 + -1.0;
    t16_33 = t16_33 * t16_41 + 1.0;
    t16_22 = t16_33 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_33 = t16_11.x * t16_22 + (-t16_0.x);
    t16_11.x = t16_22 * t16_11.x;
    t16_1.w = t16_11.x * t16_33 + t16_0.x;
    t16_1.xyz = t16_11.xxx * t16_8.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
int ti8;
bool tb8;
float t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12 = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12);
    t4.x = dFdy(t12);
    t12 = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12);
    t4.y = dFdy(t12);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t3.x) + t3.z;
    t12 = t2.x * t12 + t3.x;
    t12 = (-t3.y) + t12;
    t12 = t19 * t12 + t3.y;
    t2.xyz = t3.www;
    t2.xy = t2.xy * alphaMask1.xy;
    t18 = t2.y + t2.x;
    t18 = t2.z * alphaMask1.z + t18;
    t12 = t12 * alphaMask1.w + t18;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12 = t18 * t12;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12 * t4.w;
    t2.w = t12 * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t6.x = t6.x + t6.x;
    t12 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12 + 1.00999999;
    t12 = t12 * -10.0;
    t12 = clamp(t12, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12 = t12 * t18 + 1.0;
    t6.x = t12 * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 275 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (texture2DGradARB (cube_CityOverlayTexNEG, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexPOS, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))));
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_32.w;
  tmpvar_33.y = tmpvar_32.w;
  tmpvar_33.z = tmpvar_32.w;
  tmpvar_33.w = mix (tmpvar_32.y, mix (tmpvar_32.x, tmpvar_32.z, tmpvar_21), tmpvar_22);
  float tmpvar_34;
  vec4 v_35;
  v_35 = (tmpvar_33 * alphaMask1);
  tmpvar_34 = ((v_35.x + v_35.y) + (v_35.z + v_35.w));
  vec4 tmpvar_36;
  tmpvar_36.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_36.w = tmpvar_34;
  cityoverlay_3.xyz = tmpvar_36.xyz;
  vec2 uv_37;
  vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_19);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_39), tmpvar_40));
  vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = tmpvar_41;
  vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = tmpvar_41;
  vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_19.yxz), mix ((tmpvar_42 * tmpvar_19.xzy), (tmpvar_43 * tmpvar_19.zxy), vec3(tmpvar_39)), vec3(tmpvar_40));
  uv_37 = (((
    (0.5 * tmpvar_45.yz)
   / 
    abs(tmpvar_45.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_46;
  vec2 tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (0.5 * _CityOverlayDetailScale);
  tmpvar_47 = abs((uv_37 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_46);
  tmpvar_49.zw = dFdy(uvCont_46);
  vec4 tmpvar_50;
  tmpvar_50 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_37, tmpvar_49.xy, tmpvar_49.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_50.xyz;
  vec2 uv_51;
  vec3 tmpvar_52;
  tmpvar_52 = abs(tmpvar_19);
  float tmpvar_53;
  tmpvar_53 = float((tmpvar_52.z >= tmpvar_52.x));
  float tmpvar_54;
  tmpvar_54 = float((max (tmpvar_52.x, tmpvar_52.z) >= tmpvar_52.y));
  float tmpvar_55;
  tmpvar_55 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_53), tmpvar_54));
  vec3 tmpvar_56;
  tmpvar_56.xz = vec2(1.0, -1.0);
  tmpvar_56.y = -(tmpvar_55);
  vec3 tmpvar_57;
  tmpvar_57.xz = vec2(1.0, -1.0);
  tmpvar_57.y = tmpvar_55;
  vec3 tmpvar_58;
  tmpvar_58.xy = vec2(1.0, 1.0);
  tmpvar_58.z = tmpvar_55;
  vec3 tmpvar_59;
  tmpvar_59 = mix ((tmpvar_58 * tmpvar_19.yxz), mix ((tmpvar_56 * tmpvar_19.xzy), (tmpvar_57 * tmpvar_19.zxy), vec3(tmpvar_53)), vec3(tmpvar_54));
  uv_51 = (((
    (0.5 * tmpvar_59.yz)
   / 
    abs(tmpvar_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_60;
  vec2 tmpvar_61;
  tmpvar_61 = abs((uv_51 - tmpvar_48));
  uvCont_60.x = max (tmpvar_61.x, tmpvar_61.y);
  uvCont_60.y = min (tmpvar_61.x, tmpvar_61.y);
  vec4 tmpvar_62;
  tmpvar_62.xy = dFdx(uvCont_60);
  tmpvar_62.zw = dFdy(uvCont_60);
  vec4 tmpvar_63;
  tmpvar_63 = texture2DGradARB (_CityLightOverlayDetailTex, uv_51, tmpvar_62.xy, tmpvar_62.zw);
  citylightoverlaydetail_1.xyz = tmpvar_63.xyz;
  cityoverlay_3.w = (tmpvar_34 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_50.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_63.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_63.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_65;
  vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_67;
  tmpvar_67 = normalize(normal_18);
  float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_66);
  c_65.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_68) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_66 + normalize(xlv_TEXCOORD1)))
    , tmpvar_67), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_64.x * 2.0));
  c_65.w = (tmpvar_68 * (tmpvar_64.x * 2.0));
  float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_65 * mix (1.0, clamp (
    floor((1.01 + tmpvar_69))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_69))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_70;
  tmpvar_70 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_70;
  gl_FragData[0] = tmpvar_70;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 275 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump float tmpvar_55;
  mediump vec4 v_56;
  v_56 = (tmpvar_54 * alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  mediump vec2 uv_58;
  mediump vec3 detailCoords_59;
  mediump float s_60;
  mediump float nylerp_61;
  mediump float zxlerp_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  highp float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_62);
  s_60 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, s_60, nylerp_61));
  s_60 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xz = vec2(1.0, -1.0);
  tmpvar_68.y = -(s_60);
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = s_60;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_68 * tmpvar_33.xzy), (tmpvar_69 * tmpvar_33.zxy), vec3(zxlerp_62));
  detailCoords_59 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71.xy = vec2(1.0, 1.0);
  tmpvar_71.z = s_60;
  highp vec3 tmpvar_72;
  tmpvar_72 = mix ((tmpvar_71 * tmpvar_33.yxz), detailCoords_59, vec3(nylerp_61));
  detailCoords_59 = tmpvar_72;
  uv_58 = (((
    (0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_73;
  uv_73 = uv_58;
  highp vec2 uvCont_74;
  highp vec2 tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (0.5 * _CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_74);
  tmpvar_77.zw = dFdy(uvCont_74);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_58, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  mediump vec2 uv_80;
  mediump vec3 detailCoords_81;
  mediump float s_82;
  mediump float nylerp_83;
  mediump float zxlerp_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  highp float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_84);
  s_82 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, s_82, nylerp_83));
  s_82 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90.xz = vec2(1.0, -1.0);
  tmpvar_90.y = -(s_82);
  mediump vec3 tmpvar_91;
  tmpvar_91.xz = vec2(1.0, -1.0);
  tmpvar_91.y = s_82;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_90 * tmpvar_33.xzy), (tmpvar_91 * tmpvar_33.zxy), vec3(zxlerp_84));
  detailCoords_81 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93.xy = vec2(1.0, 1.0);
  tmpvar_93.z = s_82;
  highp vec3 tmpvar_94;
  tmpvar_94 = mix ((tmpvar_93 * tmpvar_33.yxz), detailCoords_81, vec3(nylerp_83));
  detailCoords_81 = tmpvar_94;
  uv_80 = (((
    (0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_95;
  uv_95 = uv_80;
  highp vec2 uvCont_96;
  highp vec2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  highp vec4 tmpvar_98;
  tmpvar_98.xy = dFdx(uvCont_96);
  tmpvar_98.zw = dFdy(uvCont_96);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_80, tmpvar_98.xy, tmpvar_98.zw);
  mediump vec4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_101 = tmpvar_102;
  mediump vec3 lightDir_103;
  lightDir_103 = xlv_TEXCOORD5;
  mediump vec3 viewDir_104;
  viewDir_104 = xlv_TEXCOORD1;
  mediump float atten_105;
  atten_105 = tmpvar_101;
  mediump vec4 c_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = normalize(lightDir_103);
  lightDir_103 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = normalize(viewDir_104);
  viewDir_104 = tmpvar_108;
  mediump vec3 tmpvar_109;
  tmpvar_109 = normalize(normT_5);
  mediump float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_107);
  highp float tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp (dot (normalize(
    (tmpvar_107 + tmpvar_108)
  ), tmpvar_109), 0.0, 1.0);
  tmpvar_111 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (pow (tmpvar_111, _SpecularPower) * _SpecularColor.w);
  c_106.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_110) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_113)) * (atten_105 * 2.0));
  c_106.w = (tmpvar_110 * (atten_105 * 2.0));
  highp vec3 tmpvar_114;
  tmpvar_114 = normalize(_SunDir);
  mediump vec3 lightDir_115;
  lightDir_115 = tmpvar_114;
  mediump vec3 normal_116;
  normal_116 = xlv_TEXCOORD3;
  mediump float tmpvar_117;
  tmpvar_117 = dot (normal_116, lightDir_115);
  color_6 = (c_106 * mix (1.0, clamp (
    floor((1.01 + tmpvar_117))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_117))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_118;
  tmpvar_118 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_118;
  tmpvar_1 = tmpvar_118;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexPOS;
uniform  sampler2D cube_CityOverlayTexNEG;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec2 t5;
lowp vec4 t10_5;
vec3 t6;
float t7;
int ti7;
bool tb7;
vec3 t8;
int ti8;
bool tb8;
vec2 t12;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD2.yxz;
    t19 = vs_TEXCOORD2.z * t18 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD2.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t8.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t8.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t12.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t12.x);
    t4.x = dFdy(t12.x);
    t12.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t12.x);
    t4.y = dFdy(t12.x);
    t10_5 = textureGrad(cube_CityOverlayTexPOS, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexNEG, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t18) * t16_4 + t10_3;
    t12.x = (-t3.x) + t3.z;
    t12.x = t2.x * t12.x + t3.x;
    t12.x = (-t3.y) + t12.x;
    t12.x = t19 * t12.x + t3.y;
    t2.xyz = t3.www;
    t2.xy = t2.xy * alphaMask1.xy;
    t18 = t2.y + t2.x;
    t18 = t2.z * alphaMask1.z + t18;
    t12.x = t12.x * alphaMask1.w + t18;
    t18 = max(abs(t1.z), abs(t1.y));
    t18 = float(1.0) / t18;
    t19 = min(abs(t1.z), abs(t1.y));
    t18 = t18 * t19;
    t19 = t18 * t18;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t18 * t19;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t1.z)<abs(t1.y);
    t2.x = tb8 ? t2.x : float(0.0);
    t18 = t18 * t19 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t19 = tb2.x ? -3.14159274 : float(0.0);
    t18 = t18 + t19;
    t19 = min(t1.z, t1.y);
    tb19 = t19<(-t19);
    t7 = max(t1.z, t1.y);
    tb7 = t7>=(-t7);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb19) * 0xffffffffu);
    t18 = (ti7 != 0) ? (-t18) : t18;
    t3.x = t18 * 0.159154937 + 0.5;
    t18 = t18 * 0.159154937;
    t18 = abs(t18);
    t4.x = dFdx(t18);
    t5.x = dFdy(t18);
    t18 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t1.x) + -0.212114394;
    t18 = t18 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t7 = t18 * t1.x;
    t7 = t7 * -2.0 + 3.14159274;
    t7 = tb2.y ? t7 : float(0.0);
    t18 = t18 * t1.x + t7;
    t3.y = t18 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb18 = t10_1.w>=1.0;
    t18 = (tb18) ? 0.0 : 1.0;
    t12.x = t18 * t12.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t18 = max(abs(t2.y), abs(t2.x));
    t19 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t18);
    t3.x = dFdy(t18);
    t2.y = dFdx(t19);
    t3.y = dFdy(t19);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t12.x * t4.w;
    t2.w = t12.x * t2.w;
    t6.x = dot(t1.xy, t1.xy);
    t6.x = min(t6.x, 1.0);
    t6.x = (-t6.x) + 1.0;
    t1.z = sqrt(t6.x);
    t6.x = dot(t1.xyz, t1.xyz);
    t6.x = inversesqrt(t6.x);
    t6.xyz = t6.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t6.x = dot(t6.xyz, t1.xyz);
    t12.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t12.xy);
    t6.x = dot(t10_1.xx, t6.xx);
    t12.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t12.x = inversesqrt(t12.x);
    t1.xyz = t12.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t12.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t18 = t12.x + 1.00999999;
    t12.x = t12.x * -10.0;
    t12.x = clamp(t12.x, 0.0, 1.0);
    t18 = floor(t18);
    t18 = clamp(t18, 0.0, 1.0);
    t18 = t18 + -1.0;
    t12.x = t12.x * t18 + 1.0;
    t6.x = t12.x * t6.x;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t6.x = (-t6.x) + 1.0;
    t4.w = t6.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 274 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump float tmpvar_55;
  mediump vec4 v_56;
  v_56 = (tmpvar_54 * alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  mediump vec2 uv_58;
  mediump vec3 detailCoords_59;
  mediump float s_60;
  mediump float nylerp_61;
  mediump float zxlerp_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  highp float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_62);
  s_60 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, s_60, nylerp_61));
  s_60 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xz = vec2(1.0, -1.0);
  tmpvar_68.y = -(s_60);
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = s_60;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_68 * tmpvar_33.xzy), (tmpvar_69 * tmpvar_33.zxy), vec3(zxlerp_62));
  detailCoords_59 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71.xy = vec2(1.0, 1.0);
  tmpvar_71.z = s_60;
  highp vec3 tmpvar_72;
  tmpvar_72 = mix ((tmpvar_71 * tmpvar_33.yxz), detailCoords_59, vec3(nylerp_61));
  detailCoords_59 = tmpvar_72;
  uv_58 = (((
    (0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_73;
  uv_73 = uv_58;
  highp vec2 uvCont_74;
  highp vec2 tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (0.5 * _CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_74);
  tmpvar_77.zw = dFdy(uvCont_74);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_58, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  mediump vec2 uv_80;
  mediump vec3 detailCoords_81;
  mediump float s_82;
  mediump float nylerp_83;
  mediump float zxlerp_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  highp float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_84);
  s_82 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, s_82, nylerp_83));
  s_82 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90.xz = vec2(1.0, -1.0);
  tmpvar_90.y = -(s_82);
  mediump vec3 tmpvar_91;
  tmpvar_91.xz = vec2(1.0, -1.0);
  tmpvar_91.y = s_82;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_90 * tmpvar_33.xzy), (tmpvar_91 * tmpvar_33.zxy), vec3(zxlerp_84));
  detailCoords_81 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93.xy = vec2(1.0, 1.0);
  tmpvar_93.z = s_82;
  highp vec3 tmpvar_94;
  tmpvar_94 = mix ((tmpvar_93 * tmpvar_33.yxz), detailCoords_81, vec3(nylerp_83));
  detailCoords_81 = tmpvar_94;
  uv_80 = (((
    (0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_95;
  uv_95 = uv_80;
  highp vec2 uvCont_96;
  highp vec2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  highp vec4 tmpvar_98;
  tmpvar_98.xy = dFdx(uvCont_96);
  tmpvar_98.zw = dFdy(uvCont_96);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_80, tmpvar_98.xy, tmpvar_98.zw);
  mediump vec4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_101;
  shadow_101 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_102;
  lightDir_102 = xlv_TEXCOORD5;
  mediump vec3 viewDir_103;
  viewDir_103 = xlv_TEXCOORD1;
  mediump float atten_104;
  atten_104 = shadow_101;
  mediump vec4 c_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(lightDir_102);
  lightDir_102 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = normalize(viewDir_103);
  viewDir_103 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = normalize(normT_5);
  mediump float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_106);
  highp float tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp (dot (normalize(
    (tmpvar_106 + tmpvar_107)
  ), tmpvar_108), 0.0, 1.0);
  tmpvar_110 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (pow (tmpvar_110, _SpecularPower) * _SpecularColor.w);
  c_105.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_109) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_112)) * (atten_104 * 2.0));
  c_105.w = (tmpvar_109 * (atten_104 * 2.0));
  highp vec3 tmpvar_113;
  tmpvar_113 = normalize(_SunDir);
  mediump vec3 lightDir_114;
  lightDir_114 = tmpvar_113;
  mediump vec3 normal_115;
  normal_115 = xlv_TEXCOORD3;
  mediump float tmpvar_116;
  tmpvar_116 = dot (normal_115, lightDir_114);
  color_6 = (c_105 * mix (1.0, clamp (
    floor((1.01 + tmpvar_116))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_116))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_117;
  tmpvar_117 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_117;
  tmpvar_1 = tmpvar_117;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
highp vec3 t12;
lowp vec3 t10_12;
highp float t13;
bool tb13;
mediump float t16_22;
highp float t23;
highp int ti23;
bool tb23;
highp vec2 t24;
highp int ti24;
mediump float t16_33;
mediump float t16_41;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t12.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t12.y);
    tb13 = abs(t12.z)>=abs(t12.y);
    t13 = tb13 ? 1.0 : float(0.0);
    t2.x = t13 * t2.x + t12.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t12.z), abs(t12.y));
    tb2.x = t2.x>=abs(t12.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t12.x;
    ti24 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti24) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t12.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t12.zyx + (-t4.xyz);
    t4.xyz = vec3(t13) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t12.xyz + t4.xyz;
    t5.xyz = t12.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_11.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_11.xy = t16_11.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_11.y), abs(t16_11.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_11.y), abs(t16_11.x));
    t16_11.xy = t16_11.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexPOS, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexNEG, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t24.xy = t16_11.xy * vec2(_CityOverlayDetailScale);
    t16_3 = t10_3 + (-t10_4);
    t16_0 = t16_0.xxxx * t16_3 + t10_4;
    t16_22 = (-t16_0.x) + t16_0.z;
    t16_0.x = t13 * t16_22 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t16_11.xyz = t16_0.www;
    t16_11.xy = t16_11.xy * alphaMask1.xy;
    t16_11.x = t16_11.y + t16_11.x;
    t16_11.x = t16_11.z * alphaMask1.z + t16_11.x;
    t16_0.x = t16_0.x * alphaMask1.w + t16_11.x;
    t1.x = max(abs(t12.z), abs(t12.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t12.z), abs(t12.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t13 = t2.x * 0.0208350997 + -0.0851330012;
    t13 = t2.x * t13 + 0.180141002;
    t13 = t2.x * t13 + -0.330299497;
    t2.x = t2.x * t13 + 0.999866009;
    t13 = t1.x * t2.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb4 = abs(t12.z)<abs(t12.y);
    t13 = tb4 ? t13 : float(0.0);
    t1.x = t1.x * t2.x + t13;
    tb2.xy = lessThan(t12.zxzz, (-t12.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t12.z, t12.y);
    tb2.x = t2.x<(-t2.x);
    t23 = max(t12.z, t12.y);
    tb23 = t23>=(-t23);
    ti23 = int(uint(tb23) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti23 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t12.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t12.x) + -0.212114394;
    t1.x = t1.x * abs(t12.x) + 1.57072878;
    t12.x = -abs(t12.x) + 1.0;
    t12.x = sqrt(t12.x);
    t23 = t12.x * t1.x;
    t23 = t23 * -2.0 + 3.14159274;
    t23 = tb2.y ? t23 : float(0.0);
    t1.x = t1.x * t12.x + t23;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_12.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_11.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_11.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t24.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_11.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_8.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_22 = dot(t10_7.xyz, t10_7.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_9.xyz = vec3(t16_22) * t10_7.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_10.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_9.xyz, t16_10.xyz);
    vec3 txVec15 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    t16_41 = (-_LightShadowData.x) + 1.0;
    t16_33 = t16_33 * t16_41 + _LightShadowData.x;
    t16_22 = dot(vec2(t16_33), vec2(t16_22));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_33 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_41 = t16_33 + 1.00999999;
    t16_33 = t16_33 * -10.0;
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_41 = floor(t16_41);
    t16_41 = clamp(t16_41, 0.0, 1.0);
    t16_41 = t16_41 + -1.0;
    t16_33 = t16_33 * t16_41 + 1.0;
    t16_22 = t16_33 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_33 = t16_11.x * t16_22 + (-t16_0.x);
    t16_11.x = t16_22 * t16_11.x;
    t16_1.w = t16_11.x * t16_33 + t16_0.x;
    t16_1.xyz = t16_11.xxx * t16_8.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 274 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexPOS;
uniform sampler2D cube_CityOverlayTexNEG;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexPOS, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexNEG, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, vec4(float((s_30 >= 0.0))));
  mediump vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  mediump float tmpvar_55;
  mediump vec4 v_56;
  v_56 = (tmpvar_54 * alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  mediump vec2 uv_58;
  mediump vec3 detailCoords_59;
  mediump float s_60;
  mediump float nylerp_61;
  mediump float zxlerp_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  highp float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_62);
  s_60 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, s_60, nylerp_61));
  s_60 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68.xz = vec2(1.0, -1.0);
  tmpvar_68.y = -(s_60);
  mediump vec3 tmpvar_69;
  tmpvar_69.xz = vec2(1.0, -1.0);
  tmpvar_69.y = s_60;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix ((tmpvar_68 * tmpvar_33.xzy), (tmpvar_69 * tmpvar_33.zxy), vec3(zxlerp_62));
  detailCoords_59 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71.xy = vec2(1.0, 1.0);
  tmpvar_71.z = s_60;
  highp vec3 tmpvar_72;
  tmpvar_72 = mix ((tmpvar_71 * tmpvar_33.yxz), detailCoords_59, vec3(nylerp_61));
  detailCoords_59 = tmpvar_72;
  uv_58 = (((
    (0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_73;
  uv_73 = uv_58;
  highp vec2 uvCont_74;
  highp vec2 tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (0.5 * _CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  highp vec4 tmpvar_77;
  tmpvar_77.xy = dFdx(uvCont_74);
  tmpvar_77.zw = dFdy(uvCont_74);
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_58, tmpvar_77.xy, tmpvar_77.zw);
  mediump vec4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  mediump vec2 uv_80;
  mediump vec3 detailCoords_81;
  mediump float s_82;
  mediump float nylerp_83;
  mediump float zxlerp_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  highp float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_84);
  s_82 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, s_82, nylerp_83));
  s_82 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90.xz = vec2(1.0, -1.0);
  tmpvar_90.y = -(s_82);
  mediump vec3 tmpvar_91;
  tmpvar_91.xz = vec2(1.0, -1.0);
  tmpvar_91.y = s_82;
  highp vec3 tmpvar_92;
  tmpvar_92 = mix ((tmpvar_90 * tmpvar_33.xzy), (tmpvar_91 * tmpvar_33.zxy), vec3(zxlerp_84));
  detailCoords_81 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93.xy = vec2(1.0, 1.0);
  tmpvar_93.z = s_82;
  highp vec3 tmpvar_94;
  tmpvar_94 = mix ((tmpvar_93 * tmpvar_33.yxz), detailCoords_81, vec3(nylerp_83));
  detailCoords_81 = tmpvar_94;
  uv_80 = (((
    (0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_95;
  uv_95 = uv_80;
  highp vec2 uvCont_96;
  highp vec2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  highp vec4 tmpvar_98;
  tmpvar_98.xy = dFdx(uvCont_96);
  tmpvar_98.zw = dFdy(uvCont_96);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_80, tmpvar_98.xy, tmpvar_98.zw);
  mediump vec4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_101;
  shadow_101 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_102;
  lightDir_102 = xlv_TEXCOORD5;
  mediump vec3 viewDir_103;
  viewDir_103 = xlv_TEXCOORD1;
  mediump float atten_104;
  atten_104 = shadow_101;
  mediump vec4 c_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = normalize(lightDir_102);
  lightDir_102 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = normalize(viewDir_103);
  viewDir_103 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = normalize(normT_5);
  mediump float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_106);
  highp float tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp (dot (normalize(
    (tmpvar_106 + tmpvar_107)
  ), tmpvar_108), 0.0, 1.0);
  tmpvar_110 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (pow (tmpvar_110, _SpecularPower) * _SpecularColor.w);
  c_105.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_109) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_112)) * (atten_104 * 2.0));
  c_105.w = (tmpvar_109 * (atten_104 * 2.0));
  highp vec3 tmpvar_113;
  tmpvar_113 = normalize(_SunDir);
  mediump vec3 lightDir_114;
  lightDir_114 = tmpvar_113;
  mediump vec3 normal_115;
  normal_115 = xlv_TEXCOORD3;
  mediump float tmpvar_116;
  tmpvar_116 = dot (normal_115, lightDir_114);
  color_6 = (c_105 * mix (1.0, clamp (
    floor((1.01 + tmpvar_116))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_116))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_117;
  tmpvar_117 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_117;
  tmpvar_1 = tmpvar_117;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexPOS;
uniform lowp sampler2D cube_CityOverlayTexNEG;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
highp vec3 t12;
lowp vec3 t10_12;
highp float t13;
bool tb13;
mediump float t16_22;
highp float t23;
highp int ti23;
bool tb23;
highp vec2 t24;
highp int ti24;
mediump float t16_33;
mediump float t16_41;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t12.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t12.y);
    tb13 = abs(t12.z)>=abs(t12.y);
    t13 = tb13 ? 1.0 : float(0.0);
    t2.x = t13 * t2.x + t12.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t12.z), abs(t12.y));
    tb2.x = t2.x>=abs(t12.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t12.x;
    ti24 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti24) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t12.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t12.zyx + (-t4.xyz);
    t4.xyz = vec3(t13) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t12.xyz + t4.xyz;
    t5.xyz = t12.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_11.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_11.xy = t16_11.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_11.y), abs(t16_11.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_11.y), abs(t16_11.x));
    t16_11.xy = t16_11.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexPOS, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexNEG, t16_11.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t24.xy = t16_11.xy * vec2(_CityOverlayDetailScale);
    t16_3 = t10_3 + (-t10_4);
    t16_0 = t16_0.xxxx * t16_3 + t10_4;
    t16_22 = (-t16_0.x) + t16_0.z;
    t16_0.x = t13 * t16_22 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t16_11.xyz = t16_0.www;
    t16_11.xy = t16_11.xy * alphaMask1.xy;
    t16_11.x = t16_11.y + t16_11.x;
    t16_11.x = t16_11.z * alphaMask1.z + t16_11.x;
    t16_0.x = t16_0.x * alphaMask1.w + t16_11.x;
    t1.x = max(abs(t12.z), abs(t12.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t12.z), abs(t12.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t13 = t2.x * 0.0208350997 + -0.0851330012;
    t13 = t2.x * t13 + 0.180141002;
    t13 = t2.x * t13 + -0.330299497;
    t2.x = t2.x * t13 + 0.999866009;
    t13 = t1.x * t2.x;
    t13 = t13 * -2.0 + 1.57079637;
    tb4 = abs(t12.z)<abs(t12.y);
    t13 = tb4 ? t13 : float(0.0);
    t1.x = t1.x * t2.x + t13;
    tb2.xy = lessThan(t12.zxzz, (-t12.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t12.z, t12.y);
    tb2.x = t2.x<(-t2.x);
    t23 = max(t12.z, t12.y);
    tb23 = t23>=(-t23);
    ti23 = int(uint(tb23) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti23 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t12.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t12.x) + -0.212114394;
    t1.x = t1.x * abs(t12.x) + 1.57072878;
    t12.x = -abs(t12.x) + 1.0;
    t12.x = sqrt(t12.x);
    t23 = t12.x * t1.x;
    t23 = t23 * -2.0 + 3.14159274;
    t23 = tb2.y ? t23 : float(0.0);
    t1.x = t1.x * t12.x + t23;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_12.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_11.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_11.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t24.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t24.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_11.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_8.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_22 = dot(t10_7.xyz, t10_7.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_9.xyz = vec3(t16_22) * t10_7.xyz;
    t16_22 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_22 = inversesqrt(t16_22);
    t16_10.xyz = vec3(t16_22) * vs_TEXCOORD5.xyz;
    t16_22 = dot(t16_9.xyz, t16_10.xyz);
    vec3 txVec17 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec17, 0.0);
    t16_41 = (-_LightShadowData.x) + 1.0;
    t16_33 = t16_33 * t16_41 + _LightShadowData.x;
    t16_22 = dot(vec2(t16_33), vec2(t16_22));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_33 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_41 = t16_33 + 1.00999999;
    t16_33 = t16_33 * -10.0;
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_41 = floor(t16_41);
    t16_41 = clamp(t16_41, 0.0, 1.0);
    t16_41 = t16_41 + -1.0;
    t16_33 = t16_33 * t16_41 + 1.0;
    t16_22 = t16_33 * t16_22;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    t16_22 = (-t16_22) + 1.0;
    t16_33 = t16_11.x * t16_22 + (-t16_0.x);
    t16_11.x = t16_22 * t16_11.x;
    t16_1.w = t16_11.x * t16_33 + t16_0.x;
    t16_1.xyz = t16_11.xxx * t16_8.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 274 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float(
    (tmpvar_23 >= 0.0)
  ))), mix (mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), vec4(tmpvar_21)), vec4(tmpvar_22));
  cityoverlay_3.xyz = tmpvar_32.xyz;
  vec2 uv_33;
  vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_19);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  float tmpvar_37;
  tmpvar_37 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_35), tmpvar_36));
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = -(tmpvar_37);
  vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = tmpvar_37;
  vec3 tmpvar_40;
  tmpvar_40.xy = vec2(1.0, 1.0);
  tmpvar_40.z = tmpvar_37;
  vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_40 * tmpvar_19.yxz), mix ((tmpvar_38 * tmpvar_19.xzy), (tmpvar_39 * tmpvar_19.zxy), vec3(tmpvar_35)), vec3(tmpvar_36));
  uv_33 = (((
    (0.5 * tmpvar_41.yz)
   / 
    abs(tmpvar_41.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_42;
  vec2 tmpvar_43;
  float tmpvar_44;
  tmpvar_44 = (0.5 * _CityOverlayDetailScale);
  tmpvar_43 = abs((uv_33 - tmpvar_44));
  uvCont_42.x = max (tmpvar_43.x, tmpvar_43.y);
  uvCont_42.y = min (tmpvar_43.x, tmpvar_43.y);
  vec4 tmpvar_45;
  tmpvar_45.xy = dFdx(uvCont_42);
  tmpvar_45.zw = dFdy(uvCont_42);
  vec4 tmpvar_46;
  tmpvar_46 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_33, tmpvar_45.xy, tmpvar_45.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_46.xyz;
  vec2 uv_47;
  vec3 tmpvar_48;
  tmpvar_48 = abs(tmpvar_19);
  float tmpvar_49;
  tmpvar_49 = float((tmpvar_48.z >= tmpvar_48.x));
  float tmpvar_50;
  tmpvar_50 = float((max (tmpvar_48.x, tmpvar_48.z) >= tmpvar_48.y));
  float tmpvar_51;
  tmpvar_51 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_49), tmpvar_50));
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = -(tmpvar_51);
  vec3 tmpvar_53;
  tmpvar_53.xz = vec2(1.0, -1.0);
  tmpvar_53.y = tmpvar_51;
  vec3 tmpvar_54;
  tmpvar_54.xy = vec2(1.0, 1.0);
  tmpvar_54.z = tmpvar_51;
  vec3 tmpvar_55;
  tmpvar_55 = mix ((tmpvar_54 * tmpvar_19.yxz), mix ((tmpvar_52 * tmpvar_19.xzy), (tmpvar_53 * tmpvar_19.zxy), vec3(tmpvar_49)), vec3(tmpvar_50));
  uv_47 = (((
    (0.5 * tmpvar_55.yz)
   / 
    abs(tmpvar_55.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_56;
  vec2 tmpvar_57;
  tmpvar_57 = abs((uv_47 - tmpvar_44));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  vec4 tmpvar_58;
  tmpvar_58.xy = dFdx(uvCont_56);
  tmpvar_58.zw = dFdy(uvCont_56);
  vec4 tmpvar_59;
  tmpvar_59 = texture2DGradARB (_CityLightOverlayDetailTex, uv_47, tmpvar_58.xy, tmpvar_58.zw);
  citylightoverlaydetail_1.xyz = tmpvar_59.xyz;
  cityoverlay_3.w = (tmpvar_32.w * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_46.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_59.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_59.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_60;
  vec3 tmpvar_61;
  tmpvar_61 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_62;
  tmpvar_62 = normalize(normal_18);
  float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_61);
  c_60.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_63) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_61 + normalize(xlv_TEXCOORD1)))
    , tmpvar_62), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_60.w = (tmpvar_63 * 2.0);
  float tmpvar_64;
  tmpvar_64 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_60 * mix (1.0, clamp (
    floor((1.01 + tmpvar_64))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_64))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_65;
  tmpvar_65 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_65;
  gl_FragData[0] = tmpvar_65;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 270 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, vec4(float(
    (s_30 >= 0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, vec4(
    float((s_30 >= 0.0))
  )), mix (tmpvar_58, tmpvar_60, vec4(
    float((s_30 >= 0.0))
  )), vec4(zxlerp_32)), vec4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_33.xzy), (tmpvar_73 * tmpvar_33.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_33.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (0.5 * _CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_81;
  tmpvar_81.xy = dFdx(uvCont_78);
  tmpvar_81.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_62, tmpvar_81.xy, tmpvar_81.zw);
  mediump vec4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  mediump vec2 uv_84;
  mediump vec3 detailCoords_85;
  mediump float s_86;
  mediump float nylerp_87;
  mediump float zxlerp_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  highp float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_88);
  s_86 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, s_86, nylerp_87));
  s_86 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94.xz = vec2(1.0, -1.0);
  tmpvar_94.y = -(s_86);
  mediump vec3 tmpvar_95;
  tmpvar_95.xz = vec2(1.0, -1.0);
  tmpvar_95.y = s_86;
  highp vec3 tmpvar_96;
  tmpvar_96 = mix ((tmpvar_94 * tmpvar_33.xzy), (tmpvar_95 * tmpvar_33.zxy), vec3(zxlerp_88));
  detailCoords_85 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97.xy = vec2(1.0, 1.0);
  tmpvar_97.z = s_86;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_97 * tmpvar_33.yxz), detailCoords_85, vec3(nylerp_87));
  detailCoords_85 = tmpvar_98;
  uv_84 = (((
    (0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_99;
  uv_99 = uv_84;
  highp vec2 uvCont_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  highp vec4 tmpvar_102;
  tmpvar_102.xy = dFdx(uvCont_100);
  tmpvar_102.zw = dFdy(uvCont_100);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_84, tmpvar_102.xy, tmpvar_102.zw);
  mediump vec4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_105;
  lightDir_105 = xlv_TEXCOORD5;
  mediump vec3 viewDir_106;
  viewDir_106 = xlv_TEXCOORD1;
  mediump vec4 c_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = normalize(lightDir_105);
  lightDir_105 = tmpvar_108;
  mediump vec3 tmpvar_109;
  tmpvar_109 = normalize(viewDir_106);
  viewDir_106 = tmpvar_109;
  mediump vec3 tmpvar_110;
  tmpvar_110 = normalize(normT_5);
  mediump float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_108);
  highp float tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp (dot (normalize(
    (tmpvar_108 + tmpvar_109)
  ), tmpvar_110), 0.0, 1.0);
  tmpvar_112 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = (pow (tmpvar_112, _SpecularPower) * _SpecularColor.w);
  c_107.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_111) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_114)) * 2.0);
  c_107.w = (tmpvar_111 * 2.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = normalize(_SunDir);
  mediump vec3 lightDir_116;
  lightDir_116 = tmpvar_115;
  mediump vec3 normal_117;
  normal_117 = xlv_TEXCOORD3;
  mediump float tmpvar_118;
  tmpvar_118 = dot (normal_117, lightDir_116);
  color_6 = (c_107 * mix (1.0, clamp (
    floor((1.01 + tmpvar_118))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_118))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_119;
  tmpvar_119 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_119;
  tmpvar_1 = tmpvar_119;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec2 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
lowp float t10_12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
lowp float t10_22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_1.x = textureGrad(cube_CityOverlayTexzp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexzn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_30 = t10_1.x + (-t10_22);
    t16_30 = t16_0.x * t16_30 + t10_22;
    t10_1.x = textureGrad(cube_CityOverlayTexxp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexxn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_3.x = t10_1.x + (-t10_22);
    t16_3.x = t16_0.x * t16_3.x + t10_22;
    t16_30 = t16_30 + (-t16_3.x);
    t16_30 = t12 * t16_30 + t16_3.x;
    t10_1.x = textureGrad(cube_CityOverlayTexyp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_12 = textureGrad(cube_CityOverlayTexyn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.x = t10_1.x + (-t10_12);
    t16_0.x = t16_0.x * t16_10.x + t10_12;
    t16_10.x = (-t16_0.x) + t16_30;
    t16_0.x = t2.x * t16_10.x + t16_0.x;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    t16_20 = t16_20 + t16_20;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
mediump float t16_2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec3 t7;
float t8;
int ti8;
bool tb8;
vec3 t9;
mediump float t16_9;
int ti9;
bool tb9;
float t14;
mediump float t16_14;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD2.yxz;
    t22 = vs_TEXCOORD2.z * t21 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD2.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t9.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t9.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t14 = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t14);
    t4.x = dFdy(t14);
    t14 = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t14);
    t4.y = dFdy(t14);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_14 = t10_5.w + (-t10_6.w);
    t14 = t21 * t16_14 + t10_6.w;
    t10_5 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_9 = t10_5.w + (-t10_6.w);
    t9.x = t21 * t16_9 + t10_6.w;
    t14 = t14 + (-t9.x);
    t14 = t2.x * t14 + t9.x;
    t10_2 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_2 = t10_2.w + (-t10_3.w);
    t21 = t21 * t16_2 + t10_3.w;
    t14 = (-t21) + t14;
    t14 = t22 * t14 + t21;
    t21 = max(abs(t1.z), abs(t1.y));
    t21 = float(1.0) / t21;
    t22 = min(abs(t1.z), abs(t1.y));
    t21 = t21 * t22;
    t22 = t21 * t21;
    t2.x = t22 * 0.0208350997 + -0.0851330012;
    t2.x = t22 * t2.x + 0.180141002;
    t2.x = t22 * t2.x + -0.330299497;
    t22 = t22 * t2.x + 0.999866009;
    t2.x = t21 * t22;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb9 = abs(t1.z)<abs(t1.y);
    t2.x = tb9 ? t2.x : float(0.0);
    t21 = t21 * t22 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t22 = tb2.x ? -3.14159274 : float(0.0);
    t21 = t21 + t22;
    t22 = min(t1.z, t1.y);
    tb22 = t22<(-t22);
    t8 = max(t1.z, t1.y);
    tb8 = t8>=(-t8);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb22) * 0xffffffffu);
    t21 = (ti8 != 0) ? (-t21) : t21;
    t3.x = t21 * 0.159154937 + 0.5;
    t21 = t21 * 0.159154937;
    t21 = abs(t21);
    t4.x = dFdx(t21);
    t5.x = dFdy(t21);
    t21 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t1.x) + -0.212114394;
    t21 = t21 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t8 = t21 * t1.x;
    t8 = t8 * -2.0 + 3.14159274;
    t8 = tb2.y ? t8 : float(0.0);
    t21 = t21 * t1.x + t8;
    t3.y = t21 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb21 = t10_1.w>=1.0;
    t21 = (tb21) ? 0.0 : 1.0;
    t14 = t21 * t14;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t21 = max(abs(t2.y), abs(t2.x));
    t22 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t21);
    t3.x = dFdy(t21);
    t2.y = dFdx(t22);
    t3.y = dFdy(t22);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t14 * t4.w;
    t2.w = t14 * t2.w;
    t7.x = dot(t1.xy, t1.xy);
    t7.x = min(t7.x, 1.0);
    t7.x = (-t7.x) + 1.0;
    t1.z = sqrt(t7.x);
    t7.x = dot(t1.xyz, t1.xyz);
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t7.x = dot(t7.xyz, t1.xyz);
    t7.x = t7.x + t7.x;
    t14 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t14 = inversesqrt(t14);
    t1.xyz = vec3(t14) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t14 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t21 = t14 + 1.00999999;
    t14 = t14 * -10.0;
    t14 = clamp(t14, 0.0, 1.0);
    t21 = floor(t21);
    t21 = clamp(t21, 0.0, 1.0);
    t21 = t21 + -1.0;
    t14 = t14 * t21 + 1.0;
    t7.x = t14 * t7.x;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t7.x = (-t7.x) + 1.0;
    t4.w = t7.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 276 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float(
    (tmpvar_23 >= 0.0)
  ))), mix (mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), vec4(tmpvar_21)), vec4(tmpvar_22));
  cityoverlay_3.xyz = tmpvar_32.xyz;
  vec2 uv_33;
  vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_19);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  float tmpvar_37;
  tmpvar_37 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_35), tmpvar_36));
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = -(tmpvar_37);
  vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = tmpvar_37;
  vec3 tmpvar_40;
  tmpvar_40.xy = vec2(1.0, 1.0);
  tmpvar_40.z = tmpvar_37;
  vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_40 * tmpvar_19.yxz), mix ((tmpvar_38 * tmpvar_19.xzy), (tmpvar_39 * tmpvar_19.zxy), vec3(tmpvar_35)), vec3(tmpvar_36));
  uv_33 = (((
    (0.5 * tmpvar_41.yz)
   / 
    abs(tmpvar_41.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_42;
  vec2 tmpvar_43;
  float tmpvar_44;
  tmpvar_44 = (0.5 * _CityOverlayDetailScale);
  tmpvar_43 = abs((uv_33 - tmpvar_44));
  uvCont_42.x = max (tmpvar_43.x, tmpvar_43.y);
  uvCont_42.y = min (tmpvar_43.x, tmpvar_43.y);
  vec4 tmpvar_45;
  tmpvar_45.xy = dFdx(uvCont_42);
  tmpvar_45.zw = dFdy(uvCont_42);
  vec4 tmpvar_46;
  tmpvar_46 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_33, tmpvar_45.xy, tmpvar_45.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_46.xyz;
  vec2 uv_47;
  vec3 tmpvar_48;
  tmpvar_48 = abs(tmpvar_19);
  float tmpvar_49;
  tmpvar_49 = float((tmpvar_48.z >= tmpvar_48.x));
  float tmpvar_50;
  tmpvar_50 = float((max (tmpvar_48.x, tmpvar_48.z) >= tmpvar_48.y));
  float tmpvar_51;
  tmpvar_51 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_49), tmpvar_50));
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = -(tmpvar_51);
  vec3 tmpvar_53;
  tmpvar_53.xz = vec2(1.0, -1.0);
  tmpvar_53.y = tmpvar_51;
  vec3 tmpvar_54;
  tmpvar_54.xy = vec2(1.0, 1.0);
  tmpvar_54.z = tmpvar_51;
  vec3 tmpvar_55;
  tmpvar_55 = mix ((tmpvar_54 * tmpvar_19.yxz), mix ((tmpvar_52 * tmpvar_19.xzy), (tmpvar_53 * tmpvar_19.zxy), vec3(tmpvar_49)), vec3(tmpvar_50));
  uv_47 = (((
    (0.5 * tmpvar_55.yz)
   / 
    abs(tmpvar_55.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_56;
  vec2 tmpvar_57;
  tmpvar_57 = abs((uv_47 - tmpvar_44));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  vec4 tmpvar_58;
  tmpvar_58.xy = dFdx(uvCont_56);
  tmpvar_58.zw = dFdy(uvCont_56);
  vec4 tmpvar_59;
  tmpvar_59 = texture2DGradARB (_CityLightOverlayDetailTex, uv_47, tmpvar_58.xy, tmpvar_58.zw);
  citylightoverlaydetail_1.xyz = tmpvar_59.xyz;
  cityoverlay_3.w = (tmpvar_32.w * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_46.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_59.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_59.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_61;
  vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_63;
  tmpvar_63 = normalize(normal_18);
  float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_62);
  c_61.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_64) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_62 + normalize(xlv_TEXCOORD1)))
    , tmpvar_63), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_60.x * 2.0));
  c_61.w = (tmpvar_64 * (tmpvar_60.x * 2.0));
  float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_61 * mix (1.0, clamp (
    floor((1.01 + tmpvar_65))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_65))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_66;
  tmpvar_66 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_66;
  gl_FragData[0] = tmpvar_66;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 276 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, vec4(float(
    (s_30 >= 0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, vec4(
    float((s_30 >= 0.0))
  )), mix (tmpvar_58, tmpvar_60, vec4(
    float((s_30 >= 0.0))
  )), vec4(zxlerp_32)), vec4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_33.xzy), (tmpvar_73 * tmpvar_33.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_33.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (0.5 * _CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_81;
  tmpvar_81.xy = dFdx(uvCont_78);
  tmpvar_81.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_62, tmpvar_81.xy, tmpvar_81.zw);
  mediump vec4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  mediump vec2 uv_84;
  mediump vec3 detailCoords_85;
  mediump float s_86;
  mediump float nylerp_87;
  mediump float zxlerp_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  highp float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_88);
  s_86 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, s_86, nylerp_87));
  s_86 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94.xz = vec2(1.0, -1.0);
  tmpvar_94.y = -(s_86);
  mediump vec3 tmpvar_95;
  tmpvar_95.xz = vec2(1.0, -1.0);
  tmpvar_95.y = s_86;
  highp vec3 tmpvar_96;
  tmpvar_96 = mix ((tmpvar_94 * tmpvar_33.xzy), (tmpvar_95 * tmpvar_33.zxy), vec3(zxlerp_88));
  detailCoords_85 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97.xy = vec2(1.0, 1.0);
  tmpvar_97.z = s_86;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_97 * tmpvar_33.yxz), detailCoords_85, vec3(nylerp_87));
  detailCoords_85 = tmpvar_98;
  uv_84 = (((
    (0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_99;
  uv_99 = uv_84;
  highp vec2 uvCont_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  highp vec4 tmpvar_102;
  tmpvar_102.xy = dFdx(uvCont_100);
  tmpvar_102.zw = dFdy(uvCont_100);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_84, tmpvar_102.xy, tmpvar_102.zw);
  mediump vec4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_105 = tmpvar_106;
  mediump vec3 lightDir_107;
  lightDir_107 = xlv_TEXCOORD5;
  mediump vec3 viewDir_108;
  viewDir_108 = xlv_TEXCOORD1;
  mediump float atten_109;
  atten_109 = tmpvar_105;
  mediump vec4 c_110;
  mediump vec3 tmpvar_111;
  tmpvar_111 = normalize(lightDir_107);
  lightDir_107 = tmpvar_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(viewDir_108);
  viewDir_108 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = normalize(normT_5);
  mediump float tmpvar_114;
  tmpvar_114 = dot (tmpvar_113, tmpvar_111);
  highp float tmpvar_115;
  mediump float tmpvar_116;
  tmpvar_116 = clamp (dot (normalize(
    (tmpvar_111 + tmpvar_112)
  ), tmpvar_113), 0.0, 1.0);
  tmpvar_115 = tmpvar_116;
  highp float tmpvar_117;
  tmpvar_117 = (pow (tmpvar_115, _SpecularPower) * _SpecularColor.w);
  c_110.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_114) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_117)) * (atten_109 * 2.0));
  c_110.w = (tmpvar_114 * (atten_109 * 2.0));
  highp vec3 tmpvar_118;
  tmpvar_118 = normalize(_SunDir);
  mediump vec3 lightDir_119;
  lightDir_119 = tmpvar_118;
  mediump vec3 normal_120;
  normal_120 = xlv_TEXCOORD3;
  mediump float tmpvar_121;
  tmpvar_121 = dot (normal_120, lightDir_119);
  color_6 = (c_110 * mix (1.0, clamp (
    floor((1.01 + tmpvar_121))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_121))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_122;
  tmpvar_122 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_122;
  tmpvar_1 = tmpvar_122;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
mediump float t16_2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec3 t7;
float t8;
int ti8;
bool tb8;
vec3 t9;
mediump float t16_9;
int ti9;
bool tb9;
vec2 t14;
mediump float t16_14;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD2.yxz;
    t22 = vs_TEXCOORD2.z * t21 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD2.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t9.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t9.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t14.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t14.x);
    t4.x = dFdy(t14.x);
    t14.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t14.x);
    t4.y = dFdy(t14.x);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_14 = t10_5.w + (-t10_6.w);
    t14.x = t21 * t16_14 + t10_6.w;
    t10_5 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_9 = t10_5.w + (-t10_6.w);
    t9.x = t21 * t16_9 + t10_6.w;
    t14.x = t14.x + (-t9.x);
    t14.x = t2.x * t14.x + t9.x;
    t10_2 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_2 = t10_2.w + (-t10_3.w);
    t21 = t21 * t16_2 + t10_3.w;
    t14.x = (-t21) + t14.x;
    t14.x = t22 * t14.x + t21;
    t21 = max(abs(t1.z), abs(t1.y));
    t21 = float(1.0) / t21;
    t22 = min(abs(t1.z), abs(t1.y));
    t21 = t21 * t22;
    t22 = t21 * t21;
    t2.x = t22 * 0.0208350997 + -0.0851330012;
    t2.x = t22 * t2.x + 0.180141002;
    t2.x = t22 * t2.x + -0.330299497;
    t22 = t22 * t2.x + 0.999866009;
    t2.x = t21 * t22;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb9 = abs(t1.z)<abs(t1.y);
    t2.x = tb9 ? t2.x : float(0.0);
    t21 = t21 * t22 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t22 = tb2.x ? -3.14159274 : float(0.0);
    t21 = t21 + t22;
    t22 = min(t1.z, t1.y);
    tb22 = t22<(-t22);
    t8 = max(t1.z, t1.y);
    tb8 = t8>=(-t8);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb22) * 0xffffffffu);
    t21 = (ti8 != 0) ? (-t21) : t21;
    t3.x = t21 * 0.159154937 + 0.5;
    t21 = t21 * 0.159154937;
    t21 = abs(t21);
    t4.x = dFdx(t21);
    t5.x = dFdy(t21);
    t21 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t1.x) + -0.212114394;
    t21 = t21 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t8 = t21 * t1.x;
    t8 = t8 * -2.0 + 3.14159274;
    t8 = tb2.y ? t8 : float(0.0);
    t21 = t21 * t1.x + t8;
    t3.y = t21 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb21 = t10_1.w>=1.0;
    t21 = (tb21) ? 0.0 : 1.0;
    t14.x = t21 * t14.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t21 = max(abs(t2.y), abs(t2.x));
    t22 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t21);
    t3.x = dFdy(t21);
    t2.y = dFdx(t22);
    t3.y = dFdy(t22);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t14.x * t4.w;
    t2.w = t14.x * t2.w;
    t7.x = dot(t1.xy, t1.xy);
    t7.x = min(t7.x, 1.0);
    t7.x = (-t7.x) + 1.0;
    t1.z = sqrt(t7.x);
    t7.x = dot(t1.xyz, t1.xyz);
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t7.x = dot(t7.xyz, t1.xyz);
    t14.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t14.xy);
    t7.x = dot(t10_1.xx, t7.xx);
    t14.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t14.x = inversesqrt(t14.x);
    t1.xyz = t14.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t14.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t21 = t14.x + 1.00999999;
    t14.x = t14.x * -10.0;
    t14.x = clamp(t14.x, 0.0, 1.0);
    t21 = floor(t21);
    t21 = clamp(t21, 0.0, 1.0);
    t21 = t21 + -1.0;
    t14.x = t14.x * t21 + 1.0;
    t7.x = t14.x * t7.x;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t7.x = (-t7.x) + 1.0;
    t4.w = t7.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 274 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float(
    (tmpvar_23 >= 0.0)
  ))), mix (mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), vec4(tmpvar_21)), vec4(tmpvar_22));
  cityoverlay_3.xyz = tmpvar_32.xyz;
  vec2 uv_33;
  vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_19);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  float tmpvar_37;
  tmpvar_37 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_35), tmpvar_36));
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = -(tmpvar_37);
  vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = tmpvar_37;
  vec3 tmpvar_40;
  tmpvar_40.xy = vec2(1.0, 1.0);
  tmpvar_40.z = tmpvar_37;
  vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_40 * tmpvar_19.yxz), mix ((tmpvar_38 * tmpvar_19.xzy), (tmpvar_39 * tmpvar_19.zxy), vec3(tmpvar_35)), vec3(tmpvar_36));
  uv_33 = (((
    (0.5 * tmpvar_41.yz)
   / 
    abs(tmpvar_41.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_42;
  vec2 tmpvar_43;
  float tmpvar_44;
  tmpvar_44 = (0.5 * _CityOverlayDetailScale);
  tmpvar_43 = abs((uv_33 - tmpvar_44));
  uvCont_42.x = max (tmpvar_43.x, tmpvar_43.y);
  uvCont_42.y = min (tmpvar_43.x, tmpvar_43.y);
  vec4 tmpvar_45;
  tmpvar_45.xy = dFdx(uvCont_42);
  tmpvar_45.zw = dFdy(uvCont_42);
  vec4 tmpvar_46;
  tmpvar_46 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_33, tmpvar_45.xy, tmpvar_45.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_46.xyz;
  vec2 uv_47;
  vec3 tmpvar_48;
  tmpvar_48 = abs(tmpvar_19);
  float tmpvar_49;
  tmpvar_49 = float((tmpvar_48.z >= tmpvar_48.x));
  float tmpvar_50;
  tmpvar_50 = float((max (tmpvar_48.x, tmpvar_48.z) >= tmpvar_48.y));
  float tmpvar_51;
  tmpvar_51 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_49), tmpvar_50));
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = -(tmpvar_51);
  vec3 tmpvar_53;
  tmpvar_53.xz = vec2(1.0, -1.0);
  tmpvar_53.y = tmpvar_51;
  vec3 tmpvar_54;
  tmpvar_54.xy = vec2(1.0, 1.0);
  tmpvar_54.z = tmpvar_51;
  vec3 tmpvar_55;
  tmpvar_55 = mix ((tmpvar_54 * tmpvar_19.yxz), mix ((tmpvar_52 * tmpvar_19.xzy), (tmpvar_53 * tmpvar_19.zxy), vec3(tmpvar_49)), vec3(tmpvar_50));
  uv_47 = (((
    (0.5 * tmpvar_55.yz)
   / 
    abs(tmpvar_55.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_56;
  vec2 tmpvar_57;
  tmpvar_57 = abs((uv_47 - tmpvar_44));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  vec4 tmpvar_58;
  tmpvar_58.xy = dFdx(uvCont_56);
  tmpvar_58.zw = dFdy(uvCont_56);
  vec4 tmpvar_59;
  tmpvar_59 = texture2DGradARB (_CityLightOverlayDetailTex, uv_47, tmpvar_58.xy, tmpvar_58.zw);
  citylightoverlaydetail_1.xyz = tmpvar_59.xyz;
  cityoverlay_3.w = (tmpvar_32.w * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_46.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_59.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_59.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_60;
  vec3 tmpvar_61;
  tmpvar_61 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_62;
  tmpvar_62 = normalize(normal_18);
  float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_61);
  c_60.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_63) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_61 + normalize(xlv_TEXCOORD1)))
    , tmpvar_62), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_60.w = (tmpvar_63 * 2.0);
  float tmpvar_64;
  tmpvar_64 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_60 * mix (1.0, clamp (
    floor((1.01 + tmpvar_64))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_64))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_65;
  tmpvar_65 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_65;
  gl_FragData[0] = tmpvar_65;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 270 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, vec4(float(
    (s_30 >= 0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, vec4(
    float((s_30 >= 0.0))
  )), mix (tmpvar_58, tmpvar_60, vec4(
    float((s_30 >= 0.0))
  )), vec4(zxlerp_32)), vec4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_33.xzy), (tmpvar_73 * tmpvar_33.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_33.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (0.5 * _CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_81;
  tmpvar_81.xy = dFdx(uvCont_78);
  tmpvar_81.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_62, tmpvar_81.xy, tmpvar_81.zw);
  mediump vec4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  mediump vec2 uv_84;
  mediump vec3 detailCoords_85;
  mediump float s_86;
  mediump float nylerp_87;
  mediump float zxlerp_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  highp float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_88);
  s_86 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, s_86, nylerp_87));
  s_86 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94.xz = vec2(1.0, -1.0);
  tmpvar_94.y = -(s_86);
  mediump vec3 tmpvar_95;
  tmpvar_95.xz = vec2(1.0, -1.0);
  tmpvar_95.y = s_86;
  highp vec3 tmpvar_96;
  tmpvar_96 = mix ((tmpvar_94 * tmpvar_33.xzy), (tmpvar_95 * tmpvar_33.zxy), vec3(zxlerp_88));
  detailCoords_85 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97.xy = vec2(1.0, 1.0);
  tmpvar_97.z = s_86;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_97 * tmpvar_33.yxz), detailCoords_85, vec3(nylerp_87));
  detailCoords_85 = tmpvar_98;
  uv_84 = (((
    (0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_99;
  uv_99 = uv_84;
  highp vec2 uvCont_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  highp vec4 tmpvar_102;
  tmpvar_102.xy = dFdx(uvCont_100);
  tmpvar_102.zw = dFdy(uvCont_100);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_84, tmpvar_102.xy, tmpvar_102.zw);
  mediump vec4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_105;
  lightDir_105 = xlv_TEXCOORD5;
  mediump vec3 viewDir_106;
  viewDir_106 = xlv_TEXCOORD1;
  mediump vec4 c_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = normalize(lightDir_105);
  lightDir_105 = tmpvar_108;
  mediump vec3 tmpvar_109;
  tmpvar_109 = normalize(viewDir_106);
  viewDir_106 = tmpvar_109;
  mediump vec3 tmpvar_110;
  tmpvar_110 = normalize(normT_5);
  mediump float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_108);
  highp float tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp (dot (normalize(
    (tmpvar_108 + tmpvar_109)
  ), tmpvar_110), 0.0, 1.0);
  tmpvar_112 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = (pow (tmpvar_112, _SpecularPower) * _SpecularColor.w);
  c_107.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_111) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_114)) * 2.0);
  c_107.w = (tmpvar_111 * 2.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = normalize(_SunDir);
  mediump vec3 lightDir_116;
  lightDir_116 = tmpvar_115;
  mediump vec3 normal_117;
  normal_117 = xlv_TEXCOORD3;
  mediump float tmpvar_118;
  tmpvar_118 = dot (normal_117, lightDir_116);
  color_6 = (c_107 * mix (1.0, clamp (
    floor((1.01 + tmpvar_118))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_118))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_119;
  tmpvar_119 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_119;
  tmpvar_1 = tmpvar_119;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec2 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
lowp float t10_12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
lowp float t10_22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_1.x = textureGrad(cube_CityOverlayTexzp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexzn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_30 = t10_1.x + (-t10_22);
    t16_30 = t16_0.x * t16_30 + t10_22;
    t10_1.x = textureGrad(cube_CityOverlayTexxp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexxn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_3.x = t10_1.x + (-t10_22);
    t16_3.x = t16_0.x * t16_3.x + t10_22;
    t16_30 = t16_30 + (-t16_3.x);
    t16_30 = t12 * t16_30 + t16_3.x;
    t10_1.x = textureGrad(cube_CityOverlayTexyp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_12 = textureGrad(cube_CityOverlayTexyn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.x = t10_1.x + (-t10_12);
    t16_0.x = t16_0.x * t16_10.x + t10_12;
    t16_10.x = (-t16_0.x) + t16_30;
    t16_0.x = t2.x * t16_10.x + t16_0.x;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    t16_20 = t16_20 + t16_20;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
mediump float t16_2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec3 t7;
float t8;
int ti8;
bool tb8;
vec3 t9;
mediump float t16_9;
int ti9;
bool tb9;
float t14;
mediump float t16_14;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD2.yxz;
    t22 = vs_TEXCOORD2.z * t21 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD2.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t9.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t9.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t14 = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t14);
    t4.x = dFdy(t14);
    t14 = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t14);
    t4.y = dFdy(t14);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_14 = t10_5.w + (-t10_6.w);
    t14 = t21 * t16_14 + t10_6.w;
    t10_5 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_9 = t10_5.w + (-t10_6.w);
    t9.x = t21 * t16_9 + t10_6.w;
    t14 = t14 + (-t9.x);
    t14 = t2.x * t14 + t9.x;
    t10_2 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_2 = t10_2.w + (-t10_3.w);
    t21 = t21 * t16_2 + t10_3.w;
    t14 = (-t21) + t14;
    t14 = t22 * t14 + t21;
    t21 = max(abs(t1.z), abs(t1.y));
    t21 = float(1.0) / t21;
    t22 = min(abs(t1.z), abs(t1.y));
    t21 = t21 * t22;
    t22 = t21 * t21;
    t2.x = t22 * 0.0208350997 + -0.0851330012;
    t2.x = t22 * t2.x + 0.180141002;
    t2.x = t22 * t2.x + -0.330299497;
    t22 = t22 * t2.x + 0.999866009;
    t2.x = t21 * t22;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb9 = abs(t1.z)<abs(t1.y);
    t2.x = tb9 ? t2.x : float(0.0);
    t21 = t21 * t22 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t22 = tb2.x ? -3.14159274 : float(0.0);
    t21 = t21 + t22;
    t22 = min(t1.z, t1.y);
    tb22 = t22<(-t22);
    t8 = max(t1.z, t1.y);
    tb8 = t8>=(-t8);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb22) * 0xffffffffu);
    t21 = (ti8 != 0) ? (-t21) : t21;
    t3.x = t21 * 0.159154937 + 0.5;
    t21 = t21 * 0.159154937;
    t21 = abs(t21);
    t4.x = dFdx(t21);
    t5.x = dFdy(t21);
    t21 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t1.x) + -0.212114394;
    t21 = t21 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t8 = t21 * t1.x;
    t8 = t8 * -2.0 + 3.14159274;
    t8 = tb2.y ? t8 : float(0.0);
    t21 = t21 * t1.x + t8;
    t3.y = t21 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb21 = t10_1.w>=1.0;
    t21 = (tb21) ? 0.0 : 1.0;
    t14 = t21 * t14;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t21 = max(abs(t2.y), abs(t2.x));
    t22 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t21);
    t3.x = dFdy(t21);
    t2.y = dFdx(t22);
    t3.y = dFdy(t22);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t14 * t4.w;
    t2.w = t14 * t2.w;
    t7.x = dot(t1.xy, t1.xy);
    t7.x = min(t7.x, 1.0);
    t7.x = (-t7.x) + 1.0;
    t1.z = sqrt(t7.x);
    t7.x = dot(t1.xyz, t1.xyz);
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t7.x = dot(t7.xyz, t1.xyz);
    t7.x = t7.x + t7.x;
    t14 = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t14 = inversesqrt(t14);
    t1.xyz = vec3(t14) * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t14 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t21 = t14 + 1.00999999;
    t14 = t14 * -10.0;
    t14 = clamp(t14, 0.0, 1.0);
    t21 = floor(t21);
    t21 = clamp(t21, 0.0, 1.0);
    t21 = t21 + -1.0;
    t14 = t14 * t21 + 1.0;
    t7.x = t14 * t7.x;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t7.x = (-t7.x) + 1.0;
    t4.w = t7.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 276 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec4 tmpvar_32;
  tmpvar_32 = mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float(
    (tmpvar_23 >= 0.0)
  ))), mix (mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), vec4(tmpvar_21)), vec4(tmpvar_22));
  cityoverlay_3.xyz = tmpvar_32.xyz;
  vec2 uv_33;
  vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_19);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  float tmpvar_37;
  tmpvar_37 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_35), tmpvar_36));
  vec3 tmpvar_38;
  tmpvar_38.xz = vec2(1.0, -1.0);
  tmpvar_38.y = -(tmpvar_37);
  vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = tmpvar_37;
  vec3 tmpvar_40;
  tmpvar_40.xy = vec2(1.0, 1.0);
  tmpvar_40.z = tmpvar_37;
  vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_40 * tmpvar_19.yxz), mix ((tmpvar_38 * tmpvar_19.xzy), (tmpvar_39 * tmpvar_19.zxy), vec3(tmpvar_35)), vec3(tmpvar_36));
  uv_33 = (((
    (0.5 * tmpvar_41.yz)
   / 
    abs(tmpvar_41.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_42;
  vec2 tmpvar_43;
  float tmpvar_44;
  tmpvar_44 = (0.5 * _CityOverlayDetailScale);
  tmpvar_43 = abs((uv_33 - tmpvar_44));
  uvCont_42.x = max (tmpvar_43.x, tmpvar_43.y);
  uvCont_42.y = min (tmpvar_43.x, tmpvar_43.y);
  vec4 tmpvar_45;
  tmpvar_45.xy = dFdx(uvCont_42);
  tmpvar_45.zw = dFdy(uvCont_42);
  vec4 tmpvar_46;
  tmpvar_46 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_33, tmpvar_45.xy, tmpvar_45.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_46.xyz;
  vec2 uv_47;
  vec3 tmpvar_48;
  tmpvar_48 = abs(tmpvar_19);
  float tmpvar_49;
  tmpvar_49 = float((tmpvar_48.z >= tmpvar_48.x));
  float tmpvar_50;
  tmpvar_50 = float((max (tmpvar_48.x, tmpvar_48.z) >= tmpvar_48.y));
  float tmpvar_51;
  tmpvar_51 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_49), tmpvar_50));
  vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = -(tmpvar_51);
  vec3 tmpvar_53;
  tmpvar_53.xz = vec2(1.0, -1.0);
  tmpvar_53.y = tmpvar_51;
  vec3 tmpvar_54;
  tmpvar_54.xy = vec2(1.0, 1.0);
  tmpvar_54.z = tmpvar_51;
  vec3 tmpvar_55;
  tmpvar_55 = mix ((tmpvar_54 * tmpvar_19.yxz), mix ((tmpvar_52 * tmpvar_19.xzy), (tmpvar_53 * tmpvar_19.zxy), vec3(tmpvar_49)), vec3(tmpvar_50));
  uv_47 = (((
    (0.5 * tmpvar_55.yz)
   / 
    abs(tmpvar_55.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_56;
  vec2 tmpvar_57;
  tmpvar_57 = abs((uv_47 - tmpvar_44));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  vec4 tmpvar_58;
  tmpvar_58.xy = dFdx(uvCont_56);
  tmpvar_58.zw = dFdy(uvCont_56);
  vec4 tmpvar_59;
  tmpvar_59 = texture2DGradARB (_CityLightOverlayDetailTex, uv_47, tmpvar_58.xy, tmpvar_58.zw);
  citylightoverlaydetail_1.xyz = tmpvar_59.xyz;
  cityoverlay_3.w = (tmpvar_32.w * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_46.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_59.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_59.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_61;
  vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_63;
  tmpvar_63 = normalize(normal_18);
  float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_62);
  c_61.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_64) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_62 + normalize(xlv_TEXCOORD1)))
    , tmpvar_63), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_60.x * 2.0));
  c_61.w = (tmpvar_64 * (tmpvar_60.x * 2.0));
  float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_61 * mix (1.0, clamp (
    floor((1.01 + tmpvar_65))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_65))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_66;
  tmpvar_66 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_66;
  gl_FragData[0] = tmpvar_66;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 276 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, vec4(float(
    (s_30 >= 0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, vec4(
    float((s_30 >= 0.0))
  )), mix (tmpvar_58, tmpvar_60, vec4(
    float((s_30 >= 0.0))
  )), vec4(zxlerp_32)), vec4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_33.xzy), (tmpvar_73 * tmpvar_33.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_33.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (0.5 * _CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_81;
  tmpvar_81.xy = dFdx(uvCont_78);
  tmpvar_81.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_62, tmpvar_81.xy, tmpvar_81.zw);
  mediump vec4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  mediump vec2 uv_84;
  mediump vec3 detailCoords_85;
  mediump float s_86;
  mediump float nylerp_87;
  mediump float zxlerp_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  highp float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_88);
  s_86 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, s_86, nylerp_87));
  s_86 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94.xz = vec2(1.0, -1.0);
  tmpvar_94.y = -(s_86);
  mediump vec3 tmpvar_95;
  tmpvar_95.xz = vec2(1.0, -1.0);
  tmpvar_95.y = s_86;
  highp vec3 tmpvar_96;
  tmpvar_96 = mix ((tmpvar_94 * tmpvar_33.xzy), (tmpvar_95 * tmpvar_33.zxy), vec3(zxlerp_88));
  detailCoords_85 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97.xy = vec2(1.0, 1.0);
  tmpvar_97.z = s_86;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_97 * tmpvar_33.yxz), detailCoords_85, vec3(nylerp_87));
  detailCoords_85 = tmpvar_98;
  uv_84 = (((
    (0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_99;
  uv_99 = uv_84;
  highp vec2 uvCont_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  highp vec4 tmpvar_102;
  tmpvar_102.xy = dFdx(uvCont_100);
  tmpvar_102.zw = dFdy(uvCont_100);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_84, tmpvar_102.xy, tmpvar_102.zw);
  mediump vec4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_105 = tmpvar_106;
  mediump vec3 lightDir_107;
  lightDir_107 = xlv_TEXCOORD5;
  mediump vec3 viewDir_108;
  viewDir_108 = xlv_TEXCOORD1;
  mediump float atten_109;
  atten_109 = tmpvar_105;
  mediump vec4 c_110;
  mediump vec3 tmpvar_111;
  tmpvar_111 = normalize(lightDir_107);
  lightDir_107 = tmpvar_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(viewDir_108);
  viewDir_108 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = normalize(normT_5);
  mediump float tmpvar_114;
  tmpvar_114 = dot (tmpvar_113, tmpvar_111);
  highp float tmpvar_115;
  mediump float tmpvar_116;
  tmpvar_116 = clamp (dot (normalize(
    (tmpvar_111 + tmpvar_112)
  ), tmpvar_113), 0.0, 1.0);
  tmpvar_115 = tmpvar_116;
  highp float tmpvar_117;
  tmpvar_117 = (pow (tmpvar_115, _SpecularPower) * _SpecularColor.w);
  c_110.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_114) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_117)) * (atten_109 * 2.0));
  c_110.w = (tmpvar_114 * (atten_109 * 2.0));
  highp vec3 tmpvar_118;
  tmpvar_118 = normalize(_SunDir);
  mediump vec3 lightDir_119;
  lightDir_119 = tmpvar_118;
  mediump vec3 normal_120;
  normal_120 = xlv_TEXCOORD3;
  mediump float tmpvar_121;
  tmpvar_121 = dot (normal_120, lightDir_119);
  color_6 = (c_110 * mix (1.0, clamp (
    floor((1.01 + tmpvar_121))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_121))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_122;
  tmpvar_122 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_122;
  tmpvar_1 = tmpvar_122;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
mediump float t16_2;
lowp vec4 t10_2;
bvec2 tb2;
vec3 t3;
lowp vec4 t10_3;
vec4 t4;
vec2 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec3 t7;
float t8;
int ti8;
bool tb8;
vec3 t9;
mediump float t16_9;
int ti9;
bool tb9;
vec2 t14;
mediump float t16_14;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD2.yxz;
    t22 = vs_TEXCOORD2.z * t21 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD2.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t9.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t9.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t14.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t14.x);
    t4.x = dFdy(t14.x);
    t14.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t14.x);
    t4.y = dFdy(t14.x);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_14 = t10_5.w + (-t10_6.w);
    t14.x = t21 * t16_14 + t10_6.w;
    t10_5 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_9 = t10_5.w + (-t10_6.w);
    t9.x = t21 * t16_9 + t10_6.w;
    t14.x = t14.x + (-t9.x);
    t14.x = t2.x * t14.x + t9.x;
    t10_2 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_2 = t10_2.w + (-t10_3.w);
    t21 = t21 * t16_2 + t10_3.w;
    t14.x = (-t21) + t14.x;
    t14.x = t22 * t14.x + t21;
    t21 = max(abs(t1.z), abs(t1.y));
    t21 = float(1.0) / t21;
    t22 = min(abs(t1.z), abs(t1.y));
    t21 = t21 * t22;
    t22 = t21 * t21;
    t2.x = t22 * 0.0208350997 + -0.0851330012;
    t2.x = t22 * t2.x + 0.180141002;
    t2.x = t22 * t2.x + -0.330299497;
    t22 = t22 * t2.x + 0.999866009;
    t2.x = t21 * t22;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb9 = abs(t1.z)<abs(t1.y);
    t2.x = tb9 ? t2.x : float(0.0);
    t21 = t21 * t22 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t22 = tb2.x ? -3.14159274 : float(0.0);
    t21 = t21 + t22;
    t22 = min(t1.z, t1.y);
    tb22 = t22<(-t22);
    t8 = max(t1.z, t1.y);
    tb8 = t8>=(-t8);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb22) * 0xffffffffu);
    t21 = (ti8 != 0) ? (-t21) : t21;
    t3.x = t21 * 0.159154937 + 0.5;
    t21 = t21 * 0.159154937;
    t21 = abs(t21);
    t4.x = dFdx(t21);
    t5.x = dFdy(t21);
    t21 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t1.x) + -0.212114394;
    t21 = t21 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t8 = t21 * t1.x;
    t8 = t8 * -2.0 + 3.14159274;
    t8 = tb2.y ? t8 : float(0.0);
    t21 = t21 * t1.x + t8;
    t3.y = t21 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb21 = t10_1.w>=1.0;
    t21 = (tb21) ? 0.0 : 1.0;
    t14.x = t21 * t14.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t21 = max(abs(t2.y), abs(t2.x));
    t22 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t21);
    t3.x = dFdy(t21);
    t2.y = dFdx(t22);
    t3.y = dFdy(t22);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t14.x * t4.w;
    t2.w = t14.x * t2.w;
    t7.x = dot(t1.xy, t1.xy);
    t7.x = min(t7.x, 1.0);
    t7.x = (-t7.x) + 1.0;
    t1.z = sqrt(t7.x);
    t7.x = dot(t1.xyz, t1.xyz);
    t7.x = inversesqrt(t7.x);
    t7.xyz = t7.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t7.x = dot(t7.xyz, t1.xyz);
    t14.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t14.xy);
    t7.x = dot(t10_1.xx, t7.xx);
    t14.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t14.x = inversesqrt(t14.x);
    t1.xyz = t14.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t14.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t21 = t14.x + 1.00999999;
    t14.x = t14.x * -10.0;
    t14.x = clamp(t14.x, 0.0, 1.0);
    t21 = floor(t21);
    t21 = clamp(t21, 0.0, 1.0);
    t21 = t21 + -1.0;
    t14.x = t14.x * t21 + 1.0;
    t7.x = t14.x * t7.x;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t7.x = (-t7.x) + 1.0;
    t4.w = t7.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 275 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, vec4(float(
    (s_30 >= 0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, vec4(
    float((s_30 >= 0.0))
  )), mix (tmpvar_58, tmpvar_60, vec4(
    float((s_30 >= 0.0))
  )), vec4(zxlerp_32)), vec4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_33.xzy), (tmpvar_73 * tmpvar_33.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_33.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (0.5 * _CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_81;
  tmpvar_81.xy = dFdx(uvCont_78);
  tmpvar_81.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_62, tmpvar_81.xy, tmpvar_81.zw);
  mediump vec4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  mediump vec2 uv_84;
  mediump vec3 detailCoords_85;
  mediump float s_86;
  mediump float nylerp_87;
  mediump float zxlerp_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  highp float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_88);
  s_86 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, s_86, nylerp_87));
  s_86 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94.xz = vec2(1.0, -1.0);
  tmpvar_94.y = -(s_86);
  mediump vec3 tmpvar_95;
  tmpvar_95.xz = vec2(1.0, -1.0);
  tmpvar_95.y = s_86;
  highp vec3 tmpvar_96;
  tmpvar_96 = mix ((tmpvar_94 * tmpvar_33.xzy), (tmpvar_95 * tmpvar_33.zxy), vec3(zxlerp_88));
  detailCoords_85 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97.xy = vec2(1.0, 1.0);
  tmpvar_97.z = s_86;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_97 * tmpvar_33.yxz), detailCoords_85, vec3(nylerp_87));
  detailCoords_85 = tmpvar_98;
  uv_84 = (((
    (0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_99;
  uv_99 = uv_84;
  highp vec2 uvCont_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  highp vec4 tmpvar_102;
  tmpvar_102.xy = dFdx(uvCont_100);
  tmpvar_102.zw = dFdy(uvCont_100);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_84, tmpvar_102.xy, tmpvar_102.zw);
  mediump vec4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_105;
  shadow_105 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_106;
  lightDir_106 = xlv_TEXCOORD5;
  mediump vec3 viewDir_107;
  viewDir_107 = xlv_TEXCOORD1;
  mediump float atten_108;
  atten_108 = shadow_105;
  mediump vec4 c_109;
  mediump vec3 tmpvar_110;
  tmpvar_110 = normalize(lightDir_106);
  lightDir_106 = tmpvar_110;
  mediump vec3 tmpvar_111;
  tmpvar_111 = normalize(viewDir_107);
  viewDir_107 = tmpvar_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(normT_5);
  mediump float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_110);
  highp float tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp (dot (normalize(
    (tmpvar_110 + tmpvar_111)
  ), tmpvar_112), 0.0, 1.0);
  tmpvar_114 = tmpvar_115;
  highp float tmpvar_116;
  tmpvar_116 = (pow (tmpvar_114, _SpecularPower) * _SpecularColor.w);
  c_109.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_113) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_116)) * (atten_108 * 2.0));
  c_109.w = (tmpvar_113 * (atten_108 * 2.0));
  highp vec3 tmpvar_117;
  tmpvar_117 = normalize(_SunDir);
  mediump vec3 lightDir_118;
  lightDir_118 = tmpvar_117;
  mediump vec3 normal_119;
  normal_119 = xlv_TEXCOORD3;
  mediump float tmpvar_120;
  tmpvar_120 = dot (normal_119, lightDir_118);
  color_6 = (c_109 * mix (1.0, clamp (
    floor((1.01 + tmpvar_120))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_120))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_121;
  tmpvar_121 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_121;
  tmpvar_1 = tmpvar_121;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec2 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
lowp float t10_12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
lowp float t10_22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_1.x = textureGrad(cube_CityOverlayTexzp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexzn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_30 = t10_1.x + (-t10_22);
    t16_30 = t16_0.x * t16_30 + t10_22;
    t10_1.x = textureGrad(cube_CityOverlayTexxp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexxn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_3.x = t10_1.x + (-t10_22);
    t16_3.x = t16_0.x * t16_3.x + t10_22;
    t16_30 = t16_30 + (-t16_3.x);
    t16_30 = t12 * t16_30 + t16_3.x;
    t10_1.x = textureGrad(cube_CityOverlayTexyp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_12 = textureGrad(cube_CityOverlayTexyn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.x = t10_1.x + (-t10_12);
    t16_0.x = t16_0.x * t16_10.x + t10_12;
    t16_10.x = (-t16_0.x) + t16_30;
    t16_0.x = t2.x * t16_10.x + t16_0.x;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    vec3 txVec18 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec18, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_30 = t16_30 * t16_33 + _LightShadowData.x;
    t16_20 = dot(vec2(t16_30), vec2(t16_20));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 275 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, vec4(float(
    (s_30 >= 0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, vec4(
    float((s_30 >= 0.0))
  )), mix (tmpvar_58, tmpvar_60, vec4(
    float((s_30 >= 0.0))
  )), vec4(zxlerp_32)), vec4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  mediump vec2 uv_62;
  mediump vec3 detailCoords_63;
  mediump float s_64;
  mediump float nylerp_65;
  mediump float zxlerp_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  highp float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_66);
  s_64 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, s_64, nylerp_65));
  s_64 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72.xz = vec2(1.0, -1.0);
  tmpvar_72.y = -(s_64);
  mediump vec3 tmpvar_73;
  tmpvar_73.xz = vec2(1.0, -1.0);
  tmpvar_73.y = s_64;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix ((tmpvar_72 * tmpvar_33.xzy), (tmpvar_73 * tmpvar_33.zxy), vec3(zxlerp_66));
  detailCoords_63 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75.xy = vec2(1.0, 1.0);
  tmpvar_75.z = s_64;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_75 * tmpvar_33.yxz), detailCoords_63, vec3(nylerp_65));
  detailCoords_63 = tmpvar_76;
  uv_62 = (((
    (0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_77;
  uv_77 = uv_62;
  highp vec2 uvCont_78;
  highp vec2 tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (0.5 * _CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  highp vec4 tmpvar_81;
  tmpvar_81.xy = dFdx(uvCont_78);
  tmpvar_81.zw = dFdy(uvCont_78);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_62, tmpvar_81.xy, tmpvar_81.zw);
  mediump vec4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  mediump vec2 uv_84;
  mediump vec3 detailCoords_85;
  mediump float s_86;
  mediump float nylerp_87;
  mediump float zxlerp_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  highp float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_88);
  s_86 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, s_86, nylerp_87));
  s_86 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94.xz = vec2(1.0, -1.0);
  tmpvar_94.y = -(s_86);
  mediump vec3 tmpvar_95;
  tmpvar_95.xz = vec2(1.0, -1.0);
  tmpvar_95.y = s_86;
  highp vec3 tmpvar_96;
  tmpvar_96 = mix ((tmpvar_94 * tmpvar_33.xzy), (tmpvar_95 * tmpvar_33.zxy), vec3(zxlerp_88));
  detailCoords_85 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97.xy = vec2(1.0, 1.0);
  tmpvar_97.z = s_86;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_97 * tmpvar_33.yxz), detailCoords_85, vec3(nylerp_87));
  detailCoords_85 = tmpvar_98;
  uv_84 = (((
    (0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_99;
  uv_99 = uv_84;
  highp vec2 uvCont_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  highp vec4 tmpvar_102;
  tmpvar_102.xy = dFdx(uvCont_100);
  tmpvar_102.zw = dFdy(uvCont_100);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_84, tmpvar_102.xy, tmpvar_102.zw);
  mediump vec4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_105;
  shadow_105 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_106;
  lightDir_106 = xlv_TEXCOORD5;
  mediump vec3 viewDir_107;
  viewDir_107 = xlv_TEXCOORD1;
  mediump float atten_108;
  atten_108 = shadow_105;
  mediump vec4 c_109;
  mediump vec3 tmpvar_110;
  tmpvar_110 = normalize(lightDir_106);
  lightDir_106 = tmpvar_110;
  mediump vec3 tmpvar_111;
  tmpvar_111 = normalize(viewDir_107);
  viewDir_107 = tmpvar_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(normT_5);
  mediump float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_110);
  highp float tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp (dot (normalize(
    (tmpvar_110 + tmpvar_111)
  ), tmpvar_112), 0.0, 1.0);
  tmpvar_114 = tmpvar_115;
  highp float tmpvar_116;
  tmpvar_116 = (pow (tmpvar_114, _SpecularPower) * _SpecularColor.w);
  c_109.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_113) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_116)) * (atten_108 * 2.0));
  c_109.w = (tmpvar_113 * (atten_108 * 2.0));
  highp vec3 tmpvar_117;
  tmpvar_117 = normalize(_SunDir);
  mediump vec3 lightDir_118;
  lightDir_118 = tmpvar_117;
  mediump vec3 normal_119;
  normal_119 = xlv_TEXCOORD3;
  mediump float tmpvar_120;
  tmpvar_120 = dot (normal_119, lightDir_118);
  color_6 = (c_109 * mix (1.0, clamp (
    floor((1.01 + tmpvar_120))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_120))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_121;
  tmpvar_121 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_121;
  tmpvar_1 = tmpvar_121;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp vec2 t2;
lowp vec4 t10_2;
bvec2 tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
highp vec2 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec2 t16_10;
highp vec3 t11;
lowp vec3 t10_11;
highp float t12;
lowp float t10_12;
bool tb12;
mediump float t16_20;
highp float t21;
highp int ti21;
bool tb21;
highp vec2 t22;
lowp float t10_22;
highp int ti22;
mediump float t16_30;
mediump float t16_33;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2.x = vs_TEXCOORD2.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12 = tb12 ? 1.0 : float(0.0);
    t2.x = t12 * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2.x = t2.x>=abs(t11.x);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = vec3(t12) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t5.xyz = t11.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = t2.xxx * t4.xyz + t5.xyz;
    t16_10.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_10.y), abs(t16_10.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_10.y), abs(t16_10.x));
    t16_10.xy = t16_10.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_1.x = textureGrad(cube_CityOverlayTexzp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexzn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_30 = t10_1.x + (-t10_22);
    t16_30 = t16_0.x * t16_30 + t10_22;
    t10_1.x = textureGrad(cube_CityOverlayTexxp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_22 = textureGrad(cube_CityOverlayTexxn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_3.x = t10_1.x + (-t10_22);
    t16_3.x = t16_0.x * t16_3.x + t10_22;
    t16_30 = t16_30 + (-t16_3.x);
    t16_30 = t12 * t16_30 + t16_3.x;
    t10_1.x = textureGrad(cube_CityOverlayTexyp, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_12 = textureGrad(cube_CityOverlayTexyn, t16_10.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t22.xy = t16_10.xy * vec2(_CityOverlayDetailScale);
    t16_10.x = t10_1.x + (-t10_12);
    t16_0.x = t16_0.x * t16_10.x + t10_12;
    t16_10.x = (-t16_0.x) + t16_30;
    t16_0.x = t2.x * t16_10.x + t16_0.x;
    t1.x = max(abs(t11.z), abs(t11.y));
    t1.x = float(1.0) / t1.x;
    t2.x = min(abs(t11.z), abs(t11.y));
    t1.x = t1.x * t2.x;
    t2.x = t1.x * t1.x;
    t12 = t2.x * 0.0208350997 + -0.0851330012;
    t12 = t2.x * t12 + 0.180141002;
    t12 = t2.x * t12 + -0.330299497;
    t2.x = t2.x * t12 + 0.999866009;
    t12 = t1.x * t2.x;
    t12 = t12 * -2.0 + 1.57079637;
    tb4 = abs(t11.z)<abs(t11.y);
    t12 = tb4 ? t12 : float(0.0);
    t1.x = t1.x * t2.x + t12;
    tb2.xy = lessThan(t11.zxzz, (-t11.zxzz)).xy;
    t2.x = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2.x;
    t2.x = min(t11.z, t11.y);
    tb2.x = t2.x<(-t2.x);
    t21 = max(t11.z, t11.y);
    tb21 = t21>=(-t21);
    ti21 = int(uint(tb21) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti21 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t5.x = dFdx(t1.x);
    t6.x = dFdy(t1.x);
    t1.x = abs(t11.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t11.x) + -0.212114394;
    t1.x = t1.x * abs(t11.x) + 1.57072878;
    t11.x = -abs(t11.x) + 1.0;
    t11.x = sqrt(t11.x);
    t21 = t11.x * t1.x;
    t21 = t21 * -2.0 + 3.14159274;
    t21 = tb2.y ? t21 : float(0.0);
    t1.x = t1.x * t11.x + t21;
    t4.y = t1.x * 0.318309873;
    t5.y = dFdx(t4.y);
    t6.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).w;
    t10_11.xyz = textureGrad(_BumpMap, t4.xy, vec4(t5.xyxx).xy, vec4(t6.xyxx).xy).xyz;
    t10_7.xyz = t10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_10.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_10.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t22.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t2.xy = dFdx(t1.zx);
    t4.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t22.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy);
    t16_10.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_20 = dot(t10_7.xyz, t10_7.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_8.xyz = vec3(t16_20) * t10_7.xyz;
    t16_20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_20 = inversesqrt(t16_20);
    t16_9.xyz = vec3(t16_20) * vs_TEXCOORD5.xyz;
    t16_20 = dot(t16_8.xyz, t16_9.xyz);
    vec3 txVec16 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_30 = t16_30 * t16_33 + _LightShadowData.x;
    t16_20 = dot(vec2(t16_30), vec2(t16_20));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_30 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_33 = t16_30 + 1.00999999;
    t16_30 = t16_30 * -10.0;
    t16_30 = clamp(t16_30, 0.0, 1.0);
    t16_33 = floor(t16_33);
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_33 = t16_33 + -1.0;
    t16_30 = t16_30 * t16_33 + 1.0;
    t16_20 = t16_30 * t16_20;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_20 = (-t16_20) + 1.0;
    t16_30 = t16_10.x * t16_20 + (-t16_0.x);
    t16_10.x = t16_20 * t16_10.x;
    t16_1.w = t16_10.x * t16_30 + t16_0.x;
    t16_1.xyz = t16_10.xxx * t16_3.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 279 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  float tmpvar_32;
  vec4 v_33;
  v_33 = (mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , vec4(tmpvar_21)), vec4(tmpvar_22)) * alphaMask1);
  tmpvar_32 = ((v_33.x + v_33.y) + (v_33.z + v_33.w));
  vec4 tmpvar_34;
  tmpvar_34.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_34.w = tmpvar_32;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_32 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_62;
  vec3 tmpvar_63;
  tmpvar_63 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_64;
  tmpvar_64 = normalize(normal_18);
  float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_63);
  c_62.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_65) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_63 + normalize(xlv_TEXCOORD1)))
    , tmpvar_64), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_62.w = (tmpvar_65 * 2.0);
  float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_62 * mix (1.0, clamp (
    floor((1.01 + tmpvar_66))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_66))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_67;
  gl_FragData[0] = tmpvar_67;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 275 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump float tmpvar_61;
  mediump vec4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, vec4(
    float((s_30 >= 0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, vec4(float((s_30 >= 0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, vec4(float((s_30 >= 0.0))))
  , vec4(zxlerp_32)), vec4(nylerp_31)) * alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  mediump vec4 tmpvar_63;
  tmpvar_63.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  mediump vec2 uv_64;
  mediump vec3 detailCoords_65;
  mediump float s_66;
  mediump float nylerp_67;
  mediump float zxlerp_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  highp float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_68);
  s_66 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, s_66, nylerp_67));
  s_66 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74.xz = vec2(1.0, -1.0);
  tmpvar_74.y = -(s_66);
  mediump vec3 tmpvar_75;
  tmpvar_75.xz = vec2(1.0, -1.0);
  tmpvar_75.y = s_66;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_74 * tmpvar_33.xzy), (tmpvar_75 * tmpvar_33.zxy), vec3(zxlerp_68));
  detailCoords_65 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77.xy = vec2(1.0, 1.0);
  tmpvar_77.z = s_66;
  highp vec3 tmpvar_78;
  tmpvar_78 = mix ((tmpvar_77 * tmpvar_33.yxz), detailCoords_65, vec3(nylerp_67));
  detailCoords_65 = tmpvar_78;
  uv_64 = (((
    (0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_79;
  uv_79 = uv_64;
  highp vec2 uvCont_80;
  highp vec2 tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (0.5 * _CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  highp vec4 tmpvar_83;
  tmpvar_83.xy = dFdx(uvCont_80);
  tmpvar_83.zw = dFdy(uvCont_80);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_64, tmpvar_83.xy, tmpvar_83.zw);
  mediump vec4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  mediump vec2 uv_86;
  mediump vec3 detailCoords_87;
  mediump float s_88;
  mediump float nylerp_89;
  mediump float zxlerp_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  highp float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_90);
  s_88 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, s_88, nylerp_89));
  s_88 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96.xz = vec2(1.0, -1.0);
  tmpvar_96.y = -(s_88);
  mediump vec3 tmpvar_97;
  tmpvar_97.xz = vec2(1.0, -1.0);
  tmpvar_97.y = s_88;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_96 * tmpvar_33.xzy), (tmpvar_97 * tmpvar_33.zxy), vec3(zxlerp_90));
  detailCoords_87 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99.xy = vec2(1.0, 1.0);
  tmpvar_99.z = s_88;
  highp vec3 tmpvar_100;
  tmpvar_100 = mix ((tmpvar_99 * tmpvar_33.yxz), detailCoords_87, vec3(nylerp_89));
  detailCoords_87 = tmpvar_100;
  uv_86 = (((
    (0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_101;
  uv_101 = uv_86;
  highp vec2 uvCont_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  highp vec4 tmpvar_104;
  tmpvar_104.xy = dFdx(uvCont_102);
  tmpvar_104.zw = dFdy(uvCont_102);
  lowp vec4 tmpvar_105;
  tmpvar_105 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_86, tmpvar_104.xy, tmpvar_104.zw);
  mediump vec4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_107;
  lightDir_107 = xlv_TEXCOORD5;
  mediump vec3 viewDir_108;
  viewDir_108 = xlv_TEXCOORD1;
  mediump vec4 c_109;
  mediump vec3 tmpvar_110;
  tmpvar_110 = normalize(lightDir_107);
  lightDir_107 = tmpvar_110;
  mediump vec3 tmpvar_111;
  tmpvar_111 = normalize(viewDir_108);
  viewDir_108 = tmpvar_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(normT_5);
  mediump float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_110);
  highp float tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp (dot (normalize(
    (tmpvar_110 + tmpvar_111)
  ), tmpvar_112), 0.0, 1.0);
  tmpvar_114 = tmpvar_115;
  highp float tmpvar_116;
  tmpvar_116 = (pow (tmpvar_114, _SpecularPower) * _SpecularColor.w);
  c_109.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_113) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_116)) * 2.0);
  c_109.w = (tmpvar_113 * 2.0);
  highp vec3 tmpvar_117;
  tmpvar_117 = normalize(_SunDir);
  mediump vec3 lightDir_118;
  lightDir_118 = tmpvar_117;
  mediump vec3 normal_119;
  normal_119 = xlv_TEXCOORD3;
  mediump float tmpvar_120;
  tmpvar_120 = dot (normal_119, lightDir_118);
  color_6 = (c_109 * mix (1.0, clamp (
    floor((1.01 + tmpvar_120))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_120))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_121;
  tmpvar_121 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_121;
  tmpvar_1 = tmpvar_121;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp float t2;
lowp vec4 t10_2;
bvec4 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
mediump vec4 t16_5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec2 t7;
lowp vec4 t10_7;
highp vec2 t8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
mediump vec3 t16_12;
mediump vec2 t16_13;
highp vec3 t14;
lowp vec3 t10_14;
highp vec2 t15;
bool tb15;
mediump float t16_26;
highp float t27;
highp int ti27;
bool tb27;
highp int ti28;
mediump float t16_39;
highp float t41;
mediump float t16_49;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t14.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2 = vs_TEXCOORD2.z * t1.x + (-t14.y);
    tb15 = abs(t14.z)>=abs(t14.y);
    t15.x = tb15 ? 1.0 : float(0.0);
    t2 = t15.x * t2 + t14.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2;
    t2 = max(abs(t14.z), abs(t14.y));
    tb2.x = t2>=abs(t14.x);
    t2 = tb2.x ? 1.0 : float(0.0);
    t1.x = t2 * t1.x + t14.x;
    ti28 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti28) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t14.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t14.zyx + (-t4.xyz);
    t4.xyz = t15.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t14.xyz + t4.xyz;
    t5.xyz = t14.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = vec3(t2) * t4.xyz + t5.xyz;
    t16_13.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_13.y), abs(t16_13.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_13.y), abs(t16_13.x));
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexzp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_3 = t10_3 + (-t10_6);
    t16_3 = t16_0.xxxx * t16_3 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_3 = t16_3 + (-t16_6);
    t16_3 = t15.xxxx * t16_3 + t16_6;
    t10_6 = textureGrad(cube_CityOverlayTexyp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexyn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t15.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t16_5 = (-t10_4) + t10_6;
    t16_0 = t16_0.xxxx * t16_5 + t10_4;
    t16_3 = (-t16_0) + t16_3;
    t16_0 = vec4(t2) * t16_3 + t16_0;
    t16_0.xy = t16_0.xy * alphaMask1.xy;
    t16_0.x = t16_0.y + t16_0.x;
    t16_0.x = t16_0.z * alphaMask1.z + t16_0.x;
    t16_0.x = t16_0.w * alphaMask1.w + t16_0.x;
    t1.x = max(abs(t14.z), abs(t14.y));
    t1.x = float(1.0) / t1.x;
    t2 = min(abs(t14.z), abs(t14.y));
    t1.x = t1.x * t2;
    t2 = t1.x * t1.x;
    t41 = t2 * 0.0208350997 + -0.0851330012;
    t41 = t2 * t41 + 0.180141002;
    t41 = t2 * t41 + -0.330299497;
    t2 = t2 * t41 + 0.999866009;
    t41 = t1.x * t2;
    t41 = t41 * -2.0 + 1.57079637;
    tb4 = abs(t14.z)<abs(t14.y);
    t41 = tb4 ? t41 : float(0.0);
    t1.x = t1.x * t2 + t41;
    tb2.xw = lessThan(t14.zzzx, (-t14.zzzx)).xw;
    t2 = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2;
    t2 = min(t14.z, t14.y);
    tb2.x = t2<(-t2);
    t27 = max(t14.z, t14.y);
    tb27 = t27>=(-t27);
    ti27 = int(uint(tb27) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti27 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t7.x = dFdx(t1.x);
    t8.x = dFdy(t1.x);
    t1.x = abs(t14.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t14.x) + -0.212114394;
    t1.x = t1.x * abs(t14.x) + 1.57072878;
    t14.x = -abs(t14.x) + 1.0;
    t14.x = sqrt(t14.x);
    t27 = t14.x * t1.x;
    t27 = t27 * -2.0 + 3.14159274;
    t27 = tb2.w ? t27 : float(0.0);
    t1.x = t1.x * t14.x + t27;
    t4.y = t1.x * 0.318309873;
    t7.y = dFdx(t4.y);
    t8.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).w;
    t10_14.xyz = textureGrad(_BumpMap, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).xyz;
    t10_9.xyz = t10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_13.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_13.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t15.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t4.xy = dFdx(t1.zx);
    t7.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t16_13.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_10.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_26 = dot(t10_9.xyz, t10_9.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_11.xyz = vec3(t16_26) * t10_9.xyz;
    t16_26 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_12.xyz = vec3(t16_26) * vs_TEXCOORD5.xyz;
    t16_26 = dot(t16_11.xyz, t16_12.xyz);
    t16_26 = t16_26 + t16_26;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_39 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_49 = t16_39 + 1.00999999;
    t16_39 = t16_39 * -10.0;
    t16_39 = clamp(t16_39, 0.0, 1.0);
    t16_49 = floor(t16_49);
    t16_49 = clamp(t16_49, 0.0, 1.0);
    t16_49 = t16_49 + -1.0;
    t16_39 = t16_39 * t16_49 + 1.0;
    t16_26 = t16_39 * t16_26;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_26 = (-t16_26) + 1.0;
    t16_39 = t16_13.x * t16_26 + (-t16_0.x);
    t16_13.x = t16_26 * t16_13.x;
    t16_1.w = t16_13.x * t16_39 + t16_0.x;
    t16_1.xyz = t16_13.xxx * t16_10.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec3 t8;
float t9;
int ti9;
bool tb9;
vec3 t10;
int ti10;
bool tb10;
vec2 t16;
float t24;
int ti24;
bool tb24;
float t25;
bool tb25;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD2.yxz;
    t25 = vs_TEXCOORD2.z * t24 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD2.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t10.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t10.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t16.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t16.x);
    t4.x = dFdy(t16.x);
    t16.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t16.x);
    t4.y = dFdy(t16.x);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t24) * t16_4 + t10_3;
    t2 = t2 + (-t3);
    t2 = vec4(t25) * t2 + t3;
    t16.xy = t2.xy * alphaMask1.xy;
    t16.x = t16.y + t16.x;
    t16.x = t2.z * alphaMask1.z + t16.x;
    t16.x = t2.w * alphaMask1.w + t16.x;
    t24 = max(abs(t1.z), abs(t1.y));
    t24 = float(1.0) / t24;
    t25 = min(abs(t1.z), abs(t1.y));
    t24 = t24 * t25;
    t25 = t24 * t24;
    t2.x = t25 * 0.0208350997 + -0.0851330012;
    t2.x = t25 * t2.x + 0.180141002;
    t2.x = t25 * t2.x + -0.330299497;
    t25 = t25 * t2.x + 0.999866009;
    t2.x = t24 * t25;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb10 = abs(t1.z)<abs(t1.y);
    t2.x = tb10 ? t2.x : float(0.0);
    t24 = t24 * t25 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t25 = tb2.x ? -3.14159274 : float(0.0);
    t24 = t24 + t25;
    t25 = min(t1.z, t1.y);
    tb25 = t25<(-t25);
    t9 = max(t1.z, t1.y);
    tb9 = t9>=(-t9);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb25) * 0xffffffffu);
    t24 = (ti9 != 0) ? (-t24) : t24;
    t3.x = t24 * 0.159154937 + 0.5;
    t24 = t24 * 0.159154937;
    t24 = abs(t24);
    t4.x = dFdx(t24);
    t5.x = dFdy(t24);
    t24 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t1.x) + -0.212114394;
    t24 = t24 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t9 = t24 * t1.x;
    t9 = t9 * -2.0 + 3.14159274;
    t9 = tb2.y ? t9 : float(0.0);
    t24 = t24 * t1.x + t9;
    t3.y = t24 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb24 = t10_1.w>=1.0;
    t24 = (tb24) ? 0.0 : 1.0;
    t16.x = t24 * t16.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t24 = max(abs(t2.y), abs(t2.x));
    t25 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t24);
    t3.x = dFdy(t24);
    t2.y = dFdx(t25);
    t3.y = dFdy(t25);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t16.x * t4.w;
    t2.w = t16.x * t2.w;
    t8.x = dot(t1.xy, t1.xy);
    t8.x = min(t8.x, 1.0);
    t8.x = (-t8.x) + 1.0;
    t1.z = sqrt(t8.x);
    t8.x = dot(t1.xyz, t1.xyz);
    t8.x = inversesqrt(t8.x);
    t8.xyz = t8.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t8.x = dot(t8.xyz, t1.xyz);
    t8.x = t8.x + t8.x;
    t16.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t16.x = inversesqrt(t16.x);
    t1.xyz = t16.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t16.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t24 = t16.x + 1.00999999;
    t16.x = t16.x * -10.0;
    t16.x = clamp(t16.x, 0.0, 1.0);
    t24 = floor(t24);
    t24 = clamp(t24, 0.0, 1.0);
    t24 = t24 + -1.0;
    t16.x = t16.x * t24 + 1.0;
    t8.x = t16.x * t8.x;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t8.x = (-t8.x) + 1.0;
    t4.w = t8.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 281 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  float tmpvar_32;
  vec4 v_33;
  v_33 = (mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , vec4(tmpvar_21)), vec4(tmpvar_22)) * alphaMask1);
  tmpvar_32 = ((v_33.x + v_33.y) + (v_33.z + v_33.w));
  vec4 tmpvar_34;
  tmpvar_34.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_34.w = tmpvar_32;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_32 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_62;
  tmpvar_62 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_63;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_65;
  tmpvar_65 = normalize(normal_18);
  float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_64);
  c_63.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_66) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_64 + normalize(xlv_TEXCOORD1)))
    , tmpvar_65), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_62.x * 2.0));
  c_63.w = (tmpvar_66 * (tmpvar_62.x * 2.0));
  float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_63 * mix (1.0, clamp (
    floor((1.01 + tmpvar_67))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_67))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_68;
  gl_FragData[0] = tmpvar_68;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 281 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump float tmpvar_61;
  mediump vec4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, vec4(
    float((s_30 >= 0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, vec4(float((s_30 >= 0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, vec4(float((s_30 >= 0.0))))
  , vec4(zxlerp_32)), vec4(nylerp_31)) * alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  mediump vec4 tmpvar_63;
  tmpvar_63.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  mediump vec2 uv_64;
  mediump vec3 detailCoords_65;
  mediump float s_66;
  mediump float nylerp_67;
  mediump float zxlerp_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  highp float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_68);
  s_66 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, s_66, nylerp_67));
  s_66 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74.xz = vec2(1.0, -1.0);
  tmpvar_74.y = -(s_66);
  mediump vec3 tmpvar_75;
  tmpvar_75.xz = vec2(1.0, -1.0);
  tmpvar_75.y = s_66;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_74 * tmpvar_33.xzy), (tmpvar_75 * tmpvar_33.zxy), vec3(zxlerp_68));
  detailCoords_65 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77.xy = vec2(1.0, 1.0);
  tmpvar_77.z = s_66;
  highp vec3 tmpvar_78;
  tmpvar_78 = mix ((tmpvar_77 * tmpvar_33.yxz), detailCoords_65, vec3(nylerp_67));
  detailCoords_65 = tmpvar_78;
  uv_64 = (((
    (0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_79;
  uv_79 = uv_64;
  highp vec2 uvCont_80;
  highp vec2 tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (0.5 * _CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  highp vec4 tmpvar_83;
  tmpvar_83.xy = dFdx(uvCont_80);
  tmpvar_83.zw = dFdy(uvCont_80);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_64, tmpvar_83.xy, tmpvar_83.zw);
  mediump vec4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  mediump vec2 uv_86;
  mediump vec3 detailCoords_87;
  mediump float s_88;
  mediump float nylerp_89;
  mediump float zxlerp_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  highp float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_90);
  s_88 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, s_88, nylerp_89));
  s_88 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96.xz = vec2(1.0, -1.0);
  tmpvar_96.y = -(s_88);
  mediump vec3 tmpvar_97;
  tmpvar_97.xz = vec2(1.0, -1.0);
  tmpvar_97.y = s_88;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_96 * tmpvar_33.xzy), (tmpvar_97 * tmpvar_33.zxy), vec3(zxlerp_90));
  detailCoords_87 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99.xy = vec2(1.0, 1.0);
  tmpvar_99.z = s_88;
  highp vec3 tmpvar_100;
  tmpvar_100 = mix ((tmpvar_99 * tmpvar_33.yxz), detailCoords_87, vec3(nylerp_89));
  detailCoords_87 = tmpvar_100;
  uv_86 = (((
    (0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_101;
  uv_101 = uv_86;
  highp vec2 uvCont_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  highp vec4 tmpvar_104;
  tmpvar_104.xy = dFdx(uvCont_102);
  tmpvar_104.zw = dFdy(uvCont_102);
  lowp vec4 tmpvar_105;
  tmpvar_105 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_86, tmpvar_104.xy, tmpvar_104.zw);
  mediump vec4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_107;
  highp float tmpvar_108;
  tmpvar_108 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_107 = tmpvar_108;
  mediump vec3 lightDir_109;
  lightDir_109 = xlv_TEXCOORD5;
  mediump vec3 viewDir_110;
  viewDir_110 = xlv_TEXCOORD1;
  mediump float atten_111;
  atten_111 = tmpvar_107;
  mediump vec4 c_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = normalize(lightDir_109);
  lightDir_109 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = normalize(viewDir_110);
  viewDir_110 = tmpvar_114;
  mediump vec3 tmpvar_115;
  tmpvar_115 = normalize(normT_5);
  mediump float tmpvar_116;
  tmpvar_116 = dot (tmpvar_115, tmpvar_113);
  highp float tmpvar_117;
  mediump float tmpvar_118;
  tmpvar_118 = clamp (dot (normalize(
    (tmpvar_113 + tmpvar_114)
  ), tmpvar_115), 0.0, 1.0);
  tmpvar_117 = tmpvar_118;
  highp float tmpvar_119;
  tmpvar_119 = (pow (tmpvar_117, _SpecularPower) * _SpecularColor.w);
  c_112.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_116) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_119)) * (atten_111 * 2.0));
  c_112.w = (tmpvar_116 * (atten_111 * 2.0));
  highp vec3 tmpvar_120;
  tmpvar_120 = normalize(_SunDir);
  mediump vec3 lightDir_121;
  lightDir_121 = tmpvar_120;
  mediump vec3 normal_122;
  normal_122 = xlv_TEXCOORD3;
  mediump float tmpvar_123;
  tmpvar_123 = dot (normal_122, lightDir_121);
  color_6 = (c_112 * mix (1.0, clamp (
    floor((1.01 + tmpvar_123))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_123))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_124;
  tmpvar_124 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_124;
  tmpvar_1 = tmpvar_124;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec3 t8;
float t9;
int ti9;
bool tb9;
vec3 t10;
int ti10;
bool tb10;
vec2 t16;
float t24;
int ti24;
bool tb24;
float t25;
bool tb25;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD2.yxz;
    t25 = vs_TEXCOORD2.z * t24 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD2.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t10.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t10.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t16.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t16.x);
    t4.x = dFdy(t16.x);
    t16.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t16.x);
    t4.y = dFdy(t16.x);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t24) * t16_4 + t10_3;
    t2 = t2 + (-t3);
    t2 = vec4(t25) * t2 + t3;
    t16.xy = t2.xy * alphaMask1.xy;
    t16.x = t16.y + t16.x;
    t16.x = t2.z * alphaMask1.z + t16.x;
    t16.x = t2.w * alphaMask1.w + t16.x;
    t24 = max(abs(t1.z), abs(t1.y));
    t24 = float(1.0) / t24;
    t25 = min(abs(t1.z), abs(t1.y));
    t24 = t24 * t25;
    t25 = t24 * t24;
    t2.x = t25 * 0.0208350997 + -0.0851330012;
    t2.x = t25 * t2.x + 0.180141002;
    t2.x = t25 * t2.x + -0.330299497;
    t25 = t25 * t2.x + 0.999866009;
    t2.x = t24 * t25;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb10 = abs(t1.z)<abs(t1.y);
    t2.x = tb10 ? t2.x : float(0.0);
    t24 = t24 * t25 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t25 = tb2.x ? -3.14159274 : float(0.0);
    t24 = t24 + t25;
    t25 = min(t1.z, t1.y);
    tb25 = t25<(-t25);
    t9 = max(t1.z, t1.y);
    tb9 = t9>=(-t9);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb25) * 0xffffffffu);
    t24 = (ti9 != 0) ? (-t24) : t24;
    t3.x = t24 * 0.159154937 + 0.5;
    t24 = t24 * 0.159154937;
    t24 = abs(t24);
    t4.x = dFdx(t24);
    t5.x = dFdy(t24);
    t24 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t1.x) + -0.212114394;
    t24 = t24 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t9 = t24 * t1.x;
    t9 = t9 * -2.0 + 3.14159274;
    t9 = tb2.y ? t9 : float(0.0);
    t24 = t24 * t1.x + t9;
    t3.y = t24 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb24 = t10_1.w>=1.0;
    t24 = (tb24) ? 0.0 : 1.0;
    t16.x = t24 * t16.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t24 = max(abs(t2.y), abs(t2.x));
    t25 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t24);
    t3.x = dFdy(t24);
    t2.y = dFdx(t25);
    t3.y = dFdy(t25);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t16.x * t4.w;
    t2.w = t16.x * t2.w;
    t8.x = dot(t1.xy, t1.xy);
    t8.x = min(t8.x, 1.0);
    t8.x = (-t8.x) + 1.0;
    t1.z = sqrt(t8.x);
    t8.x = dot(t1.xyz, t1.xyz);
    t8.x = inversesqrt(t8.x);
    t8.xyz = t8.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t8.x = dot(t8.xyz, t1.xyz);
    t16.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t16.xy);
    t8.x = dot(t10_1.xx, t8.xx);
    t16.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t16.x = inversesqrt(t16.x);
    t1.xyz = t16.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t16.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t24 = t16.x + 1.00999999;
    t16.x = t16.x * -10.0;
    t16.x = clamp(t16.x, 0.0, 1.0);
    t24 = floor(t24);
    t24 = clamp(t24, 0.0, 1.0);
    t24 = t24 + -1.0;
    t16.x = t16.x * t24 + 1.0;
    t8.x = t16.x * t8.x;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t8.x = (-t8.x) + 1.0;
    t4.w = t8.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 279 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _SunDir;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(gl_Normal);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(TANGENT.xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_6 = TANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * TANGENT.w);
  mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = gl_Normal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = gl_Normal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = gl_Normal.z;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_World2Object * tmpvar_9)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * tmpvar_3).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  float tmpvar_32;
  vec4 v_33;
  v_33 = (mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , vec4(tmpvar_21)), vec4(tmpvar_22)) * alphaMask1);
  tmpvar_32 = ((v_33.x + v_33.y) + (v_33.z + v_33.w));
  vec4 tmpvar_34;
  tmpvar_34.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_34.w = tmpvar_32;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_32 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 c_62;
  vec3 tmpvar_63;
  tmpvar_63 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_64;
  tmpvar_64 = normalize(normal_18);
  float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_63);
  c_62.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_65) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_63 + normalize(xlv_TEXCOORD1)))
    , tmpvar_64), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 2.0);
  c_62.w = (tmpvar_65 * 2.0);
  float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_62 * mix (1.0, clamp (
    floor((1.01 + tmpvar_66))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_66))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_67;
  gl_FragData[0] = tmpvar_67;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c12, 1, 0, 0, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c11
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c12
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0

"
}
SubProgram "d3d11 " {
// Stats: 50 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkdmflccgijkpncgpahgfjlmhfkmdhbmjabaaaaaaceaiaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcmiagaaaaeaaaabaa
lcabaaaafjaaaaaeegiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaacgbjbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaajgbebaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaacgajbaaaaaaaaaaajgaebaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaa
aaaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaajhcaabaaaabaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaa
acaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaa
fgifcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 275 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(_glesNormal);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = _glesTANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump float tmpvar_61;
  mediump vec4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, vec4(
    float((s_30 >= 0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, vec4(float((s_30 >= 0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, vec4(float((s_30 >= 0.0))))
  , vec4(zxlerp_32)), vec4(nylerp_31)) * alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  mediump vec4 tmpvar_63;
  tmpvar_63.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  mediump vec2 uv_64;
  mediump vec3 detailCoords_65;
  mediump float s_66;
  mediump float nylerp_67;
  mediump float zxlerp_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  highp float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_68);
  s_66 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, s_66, nylerp_67));
  s_66 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74.xz = vec2(1.0, -1.0);
  tmpvar_74.y = -(s_66);
  mediump vec3 tmpvar_75;
  tmpvar_75.xz = vec2(1.0, -1.0);
  tmpvar_75.y = s_66;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_74 * tmpvar_33.xzy), (tmpvar_75 * tmpvar_33.zxy), vec3(zxlerp_68));
  detailCoords_65 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77.xy = vec2(1.0, 1.0);
  tmpvar_77.z = s_66;
  highp vec3 tmpvar_78;
  tmpvar_78 = mix ((tmpvar_77 * tmpvar_33.yxz), detailCoords_65, vec3(nylerp_67));
  detailCoords_65 = tmpvar_78;
  uv_64 = (((
    (0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_79;
  uv_79 = uv_64;
  highp vec2 uvCont_80;
  highp vec2 tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (0.5 * _CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  highp vec4 tmpvar_83;
  tmpvar_83.xy = dFdx(uvCont_80);
  tmpvar_83.zw = dFdy(uvCont_80);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_64, tmpvar_83.xy, tmpvar_83.zw);
  mediump vec4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  mediump vec2 uv_86;
  mediump vec3 detailCoords_87;
  mediump float s_88;
  mediump float nylerp_89;
  mediump float zxlerp_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  highp float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_90);
  s_88 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, s_88, nylerp_89));
  s_88 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96.xz = vec2(1.0, -1.0);
  tmpvar_96.y = -(s_88);
  mediump vec3 tmpvar_97;
  tmpvar_97.xz = vec2(1.0, -1.0);
  tmpvar_97.y = s_88;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_96 * tmpvar_33.xzy), (tmpvar_97 * tmpvar_33.zxy), vec3(zxlerp_90));
  detailCoords_87 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99.xy = vec2(1.0, 1.0);
  tmpvar_99.z = s_88;
  highp vec3 tmpvar_100;
  tmpvar_100 = mix ((tmpvar_99 * tmpvar_33.yxz), detailCoords_87, vec3(nylerp_89));
  detailCoords_87 = tmpvar_100;
  uv_86 = (((
    (0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_101;
  uv_101 = uv_86;
  highp vec2 uvCont_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  highp vec4 tmpvar_104;
  tmpvar_104.xy = dFdx(uvCont_102);
  tmpvar_104.zw = dFdy(uvCont_102);
  lowp vec4 tmpvar_105;
  tmpvar_105 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_86, tmpvar_104.xy, tmpvar_104.zw);
  mediump vec4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  mediump vec3 lightDir_107;
  lightDir_107 = xlv_TEXCOORD5;
  mediump vec3 viewDir_108;
  viewDir_108 = xlv_TEXCOORD1;
  mediump vec4 c_109;
  mediump vec3 tmpvar_110;
  tmpvar_110 = normalize(lightDir_107);
  lightDir_107 = tmpvar_110;
  mediump vec3 tmpvar_111;
  tmpvar_111 = normalize(viewDir_108);
  viewDir_108 = tmpvar_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(normT_5);
  mediump float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_110);
  highp float tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp (dot (normalize(
    (tmpvar_110 + tmpvar_111)
  ), tmpvar_112), 0.0, 1.0);
  tmpvar_114 = tmpvar_115;
  highp float tmpvar_116;
  tmpvar_116 = (pow (tmpvar_114, _SpecularPower) * _SpecularColor.w);
  c_109.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_113) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_116)) * 2.0);
  c_109.w = (tmpvar_113 * 2.0);
  highp vec3 tmpvar_117;
  tmpvar_117 = normalize(_SunDir);
  mediump vec3 lightDir_118;
  lightDir_118 = tmpvar_117;
  mediump vec3 normal_119;
  normal_119 = xlv_TEXCOORD3;
  mediump float tmpvar_120;
  tmpvar_120 = dot (normal_119, lightDir_118);
  color_6 = (c_109 * mix (1.0, clamp (
    floor((1.01 + tmpvar_120))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_120))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_121;
  tmpvar_121 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_121;
  tmpvar_1 = tmpvar_121;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp float t2;
lowp vec4 t10_2;
bvec4 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
mediump vec4 t16_5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec2 t7;
lowp vec4 t10_7;
highp vec2 t8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
mediump vec3 t16_12;
mediump vec2 t16_13;
highp vec3 t14;
lowp vec3 t10_14;
highp vec2 t15;
bool tb15;
mediump float t16_26;
highp float t27;
highp int ti27;
bool tb27;
highp int ti28;
mediump float t16_39;
highp float t41;
mediump float t16_49;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t14.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2 = vs_TEXCOORD2.z * t1.x + (-t14.y);
    tb15 = abs(t14.z)>=abs(t14.y);
    t15.x = tb15 ? 1.0 : float(0.0);
    t2 = t15.x * t2 + t14.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2;
    t2 = max(abs(t14.z), abs(t14.y));
    tb2.x = t2>=abs(t14.x);
    t2 = tb2.x ? 1.0 : float(0.0);
    t1.x = t2 * t1.x + t14.x;
    ti28 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti28) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t14.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t14.zyx + (-t4.xyz);
    t4.xyz = t15.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t14.xyz + t4.xyz;
    t5.xyz = t14.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = vec3(t2) * t4.xyz + t5.xyz;
    t16_13.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_13.y), abs(t16_13.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_13.y), abs(t16_13.x));
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexzp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_3 = t10_3 + (-t10_6);
    t16_3 = t16_0.xxxx * t16_3 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_3 = t16_3 + (-t16_6);
    t16_3 = t15.xxxx * t16_3 + t16_6;
    t10_6 = textureGrad(cube_CityOverlayTexyp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexyn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t15.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t16_5 = (-t10_4) + t10_6;
    t16_0 = t16_0.xxxx * t16_5 + t10_4;
    t16_3 = (-t16_0) + t16_3;
    t16_0 = vec4(t2) * t16_3 + t16_0;
    t16_0.xy = t16_0.xy * alphaMask1.xy;
    t16_0.x = t16_0.y + t16_0.x;
    t16_0.x = t16_0.z * alphaMask1.z + t16_0.x;
    t16_0.x = t16_0.w * alphaMask1.w + t16_0.x;
    t1.x = max(abs(t14.z), abs(t14.y));
    t1.x = float(1.0) / t1.x;
    t2 = min(abs(t14.z), abs(t14.y));
    t1.x = t1.x * t2;
    t2 = t1.x * t1.x;
    t41 = t2 * 0.0208350997 + -0.0851330012;
    t41 = t2 * t41 + 0.180141002;
    t41 = t2 * t41 + -0.330299497;
    t2 = t2 * t41 + 0.999866009;
    t41 = t1.x * t2;
    t41 = t41 * -2.0 + 1.57079637;
    tb4 = abs(t14.z)<abs(t14.y);
    t41 = tb4 ? t41 : float(0.0);
    t1.x = t1.x * t2 + t41;
    tb2.xw = lessThan(t14.zzzx, (-t14.zzzx)).xw;
    t2 = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2;
    t2 = min(t14.z, t14.y);
    tb2.x = t2<(-t2);
    t27 = max(t14.z, t14.y);
    tb27 = t27>=(-t27);
    ti27 = int(uint(tb27) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti27 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t7.x = dFdx(t1.x);
    t8.x = dFdy(t1.x);
    t1.x = abs(t14.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t14.x) + -0.212114394;
    t1.x = t1.x * abs(t14.x) + 1.57072878;
    t14.x = -abs(t14.x) + 1.0;
    t14.x = sqrt(t14.x);
    t27 = t14.x * t1.x;
    t27 = t27 * -2.0 + 3.14159274;
    t27 = tb2.w ? t27 : float(0.0);
    t1.x = t1.x * t14.x + t27;
    t4.y = t1.x * 0.318309873;
    t7.y = dFdx(t4.y);
    t8.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).w;
    t10_14.xyz = textureGrad(_BumpMap, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).xyz;
    t10_9.xyz = t10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_13.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_13.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t15.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t4.xy = dFdx(t1.zx);
    t7.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t16_13.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_10.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_26 = dot(t10_9.xyz, t10_9.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_11.xyz = vec3(t16_26) * t10_9.xyz;
    t16_26 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_12.xyz = vec3(t16_26) * vs_TEXCOORD5.xyz;
    t16_26 = dot(t16_11.xyz, t16_12.xyz);
    t16_26 = t16_26 + t16_26;
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_39 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_49 = t16_39 + 1.00999999;
    t16_39 = t16_39 * -10.0;
    t16_39 = clamp(t16_39, 0.0, 1.0);
    t16_49 = floor(t16_49);
    t16_49 = clamp(t16_49, 0.0, 1.0);
    t16_49 = t16_49 + -1.0;
    t16_39 = t16_39 * t16_49 + 1.0;
    t16_26 = t16_39 * t16_26;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_26 = (-t16_26) + 1.0;
    t16_39 = t16_13.x * t16_26 + (-t16_0.x);
    t16_13.x = t16_26 * t16_13.x;
    t16_1.w = t16_13.x * t16_39 + t16_0.x;
    t16_1.xyz = t16_13.xxx * t16_10.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 224
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _mtl_i._glesNormal;
  float4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _mtl_u._SunDir;
  float3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = _mtl_i._glesTANGENT.xyz;
  tmpvar_7 = (((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = _mtl_i._glesNormal.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = _mtl_i._glesNormal.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    (_mtl_u._World2Object * tmpvar_9)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_2).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * tmpvar_3).xyz));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec3 t1;
vec3 t2;
vec3 t5;
float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec3 t8;
float t9;
int ti9;
bool tb9;
vec3 t10;
int ti10;
bool tb10;
vec2 t16;
float t24;
int ti24;
bool tb24;
float t25;
bool tb25;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD2.yxz;
    t25 = vs_TEXCOORD2.z * t24 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD2.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t10.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t10.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t16.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t16.x);
    t4.x = dFdy(t16.x);
    t16.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t16.x);
    t4.y = dFdy(t16.x);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t24) * t16_4 + t10_3;
    t2 = t2 + (-t3);
    t2 = vec4(t25) * t2 + t3;
    t16.xy = t2.xy * alphaMask1.xy;
    t16.x = t16.y + t16.x;
    t16.x = t2.z * alphaMask1.z + t16.x;
    t16.x = t2.w * alphaMask1.w + t16.x;
    t24 = max(abs(t1.z), abs(t1.y));
    t24 = float(1.0) / t24;
    t25 = min(abs(t1.z), abs(t1.y));
    t24 = t24 * t25;
    t25 = t24 * t24;
    t2.x = t25 * 0.0208350997 + -0.0851330012;
    t2.x = t25 * t2.x + 0.180141002;
    t2.x = t25 * t2.x + -0.330299497;
    t25 = t25 * t2.x + 0.999866009;
    t2.x = t24 * t25;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb10 = abs(t1.z)<abs(t1.y);
    t2.x = tb10 ? t2.x : float(0.0);
    t24 = t24 * t25 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t25 = tb2.x ? -3.14159274 : float(0.0);
    t24 = t24 + t25;
    t25 = min(t1.z, t1.y);
    tb25 = t25<(-t25);
    t9 = max(t1.z, t1.y);
    tb9 = t9>=(-t9);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb25) * 0xffffffffu);
    t24 = (ti9 != 0) ? (-t24) : t24;
    t3.x = t24 * 0.159154937 + 0.5;
    t24 = t24 * 0.159154937;
    t24 = abs(t24);
    t4.x = dFdx(t24);
    t5.x = dFdy(t24);
    t24 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t1.x) + -0.212114394;
    t24 = t24 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t9 = t24 * t1.x;
    t9 = t9 * -2.0 + 3.14159274;
    t9 = tb2.y ? t9 : float(0.0);
    t24 = t24 * t1.x + t9;
    t3.y = t24 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb24 = t10_1.w>=1.0;
    t24 = (tb24) ? 0.0 : 1.0;
    t16.x = t24 * t16.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t24 = max(abs(t2.y), abs(t2.x));
    t25 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t24);
    t3.x = dFdy(t24);
    t2.y = dFdx(t25);
    t3.y = dFdy(t25);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t16.x * t4.w;
    t2.w = t16.x * t2.w;
    t8.x = dot(t1.xy, t1.xy);
    t8.x = min(t8.x, 1.0);
    t8.x = (-t8.x) + 1.0;
    t1.z = sqrt(t8.x);
    t8.x = dot(t1.xyz, t1.xyz);
    t8.x = inversesqrt(t8.x);
    t8.xyz = t8.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t8.x = dot(t8.xyz, t1.xyz);
    t8.x = t8.x + t8.x;
    t16.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t16.x = inversesqrt(t16.x);
    t1.xyz = t16.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t16.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t24 = t16.x + 1.00999999;
    t16.x = t16.x * -10.0;
    t16.x = clamp(t16.x, 0.0, 1.0);
    t24 = floor(t24);
    t24 = clamp(t24, 0.0, 1.0);
    t24 = t24 + -1.0;
    t16.x = t16.x * t24 + 1.0;
    t8.x = t16.x * t8.x;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t8.x = (-t8.x) + 1.0;
    t4.w = t8.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 281 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _SunDir;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _SunDir;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(gl_Normal);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(TANGENT.xyz);
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = TANGENT.xyz;
  tmpvar_8 = (((tmpvar_5.yzx * tmpvar_6.zxy) - (tmpvar_5.zxy * tmpvar_6.yzx)) * TANGENT.w);
  mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = gl_Normal.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = gl_Normal.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = gl_Normal.z;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  vec4 o_11;
  vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_1 * 0.5);
  vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_9 * (
    (_World2Object * tmpvar_10)
  .xyz - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (_World2Object * tmpvar_4).xyz));
  xlv_TEXCOORD6 = o_11;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform vec3 _SunDir;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 main_4;
  vec4 color_5;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  vec2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  main_4 = texture2DGradARB (_MainTex, uv_7, dFdx(uvCont_11), dFdy(uvCont_11));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (min (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0) / max (abs(
    (tmpvar_12.x / tmpvar_12.z)
  ), 1.0));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  tmpvar_16 = (((
    ((((
      ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)
     * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)
   * tmpvar_16) + 0.9999793) * tmpvar_15);
  tmpvar_16 = (tmpvar_16 + (float(
    (abs((tmpvar_12.x / tmpvar_12.z)) > 1.0)
  ) * (
    (tmpvar_16 * -2.0)
   + 1.570796)));
  tmpvar_14 = (tmpvar_16 * sign((tmpvar_12.x / tmpvar_12.z)));
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.141593;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.141593);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.570796);
  };
  uv_13.x = (0.5 + (0.1591549 * tmpvar_14));
  uv_13.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_12.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.570796 + (
      abs(tmpvar_12.y)
     * 
      (-0.2146018 + (abs(tmpvar_12.y) * (0.08656672 + (
        abs(tmpvar_12.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_17;
  uvCont_17.y = uv_13.y;
  uvCont_17.x = abs((uv_13.x - 0.5));
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_13, dFdx(uvCont_17), dFdy(uvCont_17)).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (
    dot (normal_18.xy, normal_18.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_21), tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = -(tmpvar_23);
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = tmpvar_23;
  vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = tmpvar_23;
  vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_19.yxz), mix ((tmpvar_24 * tmpvar_19.xzy), (tmpvar_25 * tmpvar_19.zxy), vec3(tmpvar_21)), vec3(tmpvar_22));
  vec2 tmpvar_28;
  tmpvar_28 = (((0.5 * tmpvar_27.yz) / abs(tmpvar_27.x)) + 0.5);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - 0.5));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  float tmpvar_32;
  vec4 v_33;
  v_33 = (mix (mix (texture2DGradARB (cube_CityOverlayTexyn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexyp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(
    float((tmpvar_23 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_CityOverlayTexxn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexxp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_CityOverlayTexzn, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), texture2DGradARB (cube_CityOverlayTexzp, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw), vec4(float((tmpvar_23 >= 0.0))))
  , vec4(tmpvar_21)), vec4(tmpvar_22)) * alphaMask1);
  tmpvar_32 = ((v_33.x + v_33.y) + (v_33.z + v_33.w));
  vec4 tmpvar_34;
  tmpvar_34.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_34.w = tmpvar_32;
  cityoverlay_3.xyz = tmpvar_34.xyz;
  vec2 uv_35;
  vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_19);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_37), tmpvar_38));
  vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = -(tmpvar_39);
  vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, -1.0);
  tmpvar_41.y = tmpvar_39;
  vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = tmpvar_39;
  vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_19.yxz), mix ((tmpvar_40 * tmpvar_19.xzy), (tmpvar_41 * tmpvar_19.zxy), vec3(tmpvar_37)), vec3(tmpvar_38));
  uv_35 = (((
    (0.5 * tmpvar_43.yz)
   / 
    abs(tmpvar_43.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_44;
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (0.5 * _CityOverlayDetailScale);
  tmpvar_45 = abs((uv_35 - tmpvar_46));
  uvCont_44.x = max (tmpvar_45.x, tmpvar_45.y);
  uvCont_44.y = min (tmpvar_45.x, tmpvar_45.y);
  vec4 tmpvar_47;
  tmpvar_47.xy = dFdx(uvCont_44);
  tmpvar_47.zw = dFdy(uvCont_44);
  vec4 tmpvar_48;
  tmpvar_48 = texture2DGradARB (_CityDarkOverlayDetailTex, uv_35, tmpvar_47.xy, tmpvar_47.zw);
  citydarkoverlaydetail_2.xyz = tmpvar_48.xyz;
  vec2 uv_49;
  vec3 tmpvar_50;
  tmpvar_50 = abs(tmpvar_19);
  float tmpvar_51;
  tmpvar_51 = float((tmpvar_50.z >= tmpvar_50.x));
  float tmpvar_52;
  tmpvar_52 = float((max (tmpvar_50.x, tmpvar_50.z) >= tmpvar_50.y));
  float tmpvar_53;
  tmpvar_53 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_51), tmpvar_52));
  vec3 tmpvar_54;
  tmpvar_54.xz = vec2(1.0, -1.0);
  tmpvar_54.y = -(tmpvar_53);
  vec3 tmpvar_55;
  tmpvar_55.xz = vec2(1.0, -1.0);
  tmpvar_55.y = tmpvar_53;
  vec3 tmpvar_56;
  tmpvar_56.xy = vec2(1.0, 1.0);
  tmpvar_56.z = tmpvar_53;
  vec3 tmpvar_57;
  tmpvar_57 = mix ((tmpvar_56 * tmpvar_19.yxz), mix ((tmpvar_54 * tmpvar_19.xzy), (tmpvar_55 * tmpvar_19.zxy), vec3(tmpvar_51)), vec3(tmpvar_52));
  uv_49 = (((
    (0.5 * tmpvar_57.yz)
   / 
    abs(tmpvar_57.x)
  ) + 0.5) * _CityOverlayDetailScale);
  vec2 uvCont_58;
  vec2 tmpvar_59;
  tmpvar_59 = abs((uv_49 - tmpvar_46));
  uvCont_58.x = max (tmpvar_59.x, tmpvar_59.y);
  uvCont_58.y = min (tmpvar_59.x, tmpvar_59.y);
  vec4 tmpvar_60;
  tmpvar_60.xy = dFdx(uvCont_58);
  tmpvar_60.zw = dFdy(uvCont_58);
  vec4 tmpvar_61;
  tmpvar_61 = texture2DGradARB (_CityLightOverlayDetailTex, uv_49, tmpvar_60.xy, tmpvar_60.zw);
  citylightoverlaydetail_1.xyz = tmpvar_61.xyz;
  cityoverlay_3.w = (tmpvar_32 * (1.0 - float(
    (main_4.w >= 1.0)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_48.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_61.w * cityoverlay_3.w);
  color_5.xyz = (tmpvar_61.xyz * citylightoverlaydetail_1.www);
  color_5.w = 0.0;
  vec4 tmpvar_62;
  tmpvar_62 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_63;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_65;
  tmpvar_65 = normalize(normal_18);
  float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_64);
  c_63.xyz = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_66) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_64 + normalize(xlv_TEXCOORD1)))
    , tmpvar_65), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_62.x * 2.0));
  c_63.w = (tmpvar_66 * (tmpvar_62.x * 2.0));
  float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, normalize(_SunDir));
  color_5 = (c_63 * mix (1.0, clamp (
    floor((1.01 + tmpvar_67))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_67))
  , 0.0, 1.0)));
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (color_5.w, 0.0, 1.0)));
  vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_5 = tmpvar_68;
  gl_FragData[0] = tmpvar_68;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
Matrix 4 [_Object2World] 3
Matrix 7 [_World2Object] 3
Matrix 0 [glstate_matrix_mvp]
Vector 11 [_ProjectionParams]
Vector 12 [_ScreenParams]
Vector 13 [_SunDir]
Vector 10 [_WorldSpaceCameraPos]
"vs_3_0
def c14, 1, 0, 0.5, 0
dcl_position v0
dcl_normal v1
dcl_tangent v2
dcl_position o0
dcl_texcoord o1.x
dcl_texcoord1 o2.xyz
dcl_texcoord2 o3.xyz
dcl_texcoord3 o4.xyz
dcl_texcoord5 o5.xyz
dcl_texcoord6 o6
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r0.xyz, r0, -c10
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o1.x, r0.x
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mov o3.xyz, -r0
dp3 r0.x, c4, v1
dp3 r0.y, c5, v1
dp3 r0.z, c6, v1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r0.xyz, r0.x, v1.zxyw
dp3 r0.w, v2, v2
rsq r0.w, r0.w
mul r1.xyz, r0.w, v2.yzxw
mul r2.xyz, r0, r1
mad r0.xyz, r0.zxyw, r1.yzxw, -r2
mul r0.xyz, r0, v2.w
mov r1.xyz, c13
dp3 r2.x, c7, r1
dp3 r2.y, c8, r1
dp3 r2.z, c9, r1
dp3 r1.y, r0, r2
dp3 r1.x, v2, r2
dp3 r1.z, v1, r2
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul o5.xyz, r0.w, r1
mov r1.xy, c14
mad r1, c10.xyzx, r1.xxxy, r1.yyyx
dp4 r2.x, c7, r1
dp4 r2.y, c8, r1
dp4 r2.z, c9, r1
add r1.xyz, r2, -v0
dp3 r0.y, r0, r1
dp3 r0.x, v2, r1
dp3 r0.z, v1, r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o2.xyz, r0.w, r0
dp4 r0.y, c1, v0
mul r1.x, r0.y, c11.x
mul r1.w, r1.x, c14.z
dp4 r0.x, c0, v0
dp4 r0.w, c3, v0
mul r1.xz, r0.xyww, c14.z
mad o6.xy, r1.z, c12.zwzw, r1.xwzw
dp4 r0.z, c2, v0
mov o0, r0
mov o6.zw, r0

"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
root12:aaadaaaa
eefiecedkkigfibmpnpmncpkpdilahokndfbchicabaaaaaaneaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgaahaaaaeaaaabaaniabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
cgbjbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaajgbebaaaacaaaaaadiaaaaahhcaabaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
acaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegiccaaaacaaaaaabdaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafbccabaaaabaaaaaadkaabaaaabaaaaaabbaaaaah
icaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaakgikcaaaaaaaaaaabkaaaaaaegiccaaaacaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabaaaaaaafgifcaaaaaaaaaaa
bkaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bcaaaaaapgipcaaaaaaaaaaabkaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 281 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump float tmpvar_61;
  mediump vec4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, vec4(
    float((s_30 >= 0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, vec4(float((s_30 >= 0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, vec4(float((s_30 >= 0.0))))
  , vec4(zxlerp_32)), vec4(nylerp_31)) * alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  mediump vec4 tmpvar_63;
  tmpvar_63.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  mediump vec2 uv_64;
  mediump vec3 detailCoords_65;
  mediump float s_66;
  mediump float nylerp_67;
  mediump float zxlerp_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  highp float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_68);
  s_66 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, s_66, nylerp_67));
  s_66 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74.xz = vec2(1.0, -1.0);
  tmpvar_74.y = -(s_66);
  mediump vec3 tmpvar_75;
  tmpvar_75.xz = vec2(1.0, -1.0);
  tmpvar_75.y = s_66;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_74 * tmpvar_33.xzy), (tmpvar_75 * tmpvar_33.zxy), vec3(zxlerp_68));
  detailCoords_65 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77.xy = vec2(1.0, 1.0);
  tmpvar_77.z = s_66;
  highp vec3 tmpvar_78;
  tmpvar_78 = mix ((tmpvar_77 * tmpvar_33.yxz), detailCoords_65, vec3(nylerp_67));
  detailCoords_65 = tmpvar_78;
  uv_64 = (((
    (0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_79;
  uv_79 = uv_64;
  highp vec2 uvCont_80;
  highp vec2 tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (0.5 * _CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  highp vec4 tmpvar_83;
  tmpvar_83.xy = dFdx(uvCont_80);
  tmpvar_83.zw = dFdy(uvCont_80);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_64, tmpvar_83.xy, tmpvar_83.zw);
  mediump vec4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  mediump vec2 uv_86;
  mediump vec3 detailCoords_87;
  mediump float s_88;
  mediump float nylerp_89;
  mediump float zxlerp_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  highp float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_90);
  s_88 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, s_88, nylerp_89));
  s_88 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96.xz = vec2(1.0, -1.0);
  tmpvar_96.y = -(s_88);
  mediump vec3 tmpvar_97;
  tmpvar_97.xz = vec2(1.0, -1.0);
  tmpvar_97.y = s_88;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_96 * tmpvar_33.xzy), (tmpvar_97 * tmpvar_33.zxy), vec3(zxlerp_90));
  detailCoords_87 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99.xy = vec2(1.0, 1.0);
  tmpvar_99.z = s_88;
  highp vec3 tmpvar_100;
  tmpvar_100 = mix ((tmpvar_99 * tmpvar_33.yxz), detailCoords_87, vec3(nylerp_89));
  detailCoords_87 = tmpvar_100;
  uv_86 = (((
    (0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_101;
  uv_101 = uv_86;
  highp vec2 uvCont_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  highp vec4 tmpvar_104;
  tmpvar_104.xy = dFdx(uvCont_102);
  tmpvar_104.zw = dFdy(uvCont_102);
  lowp vec4 tmpvar_105;
  tmpvar_105 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_86, tmpvar_104.xy, tmpvar_104.zw);
  mediump vec4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float tmpvar_107;
  highp float tmpvar_108;
  tmpvar_108 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_107 = tmpvar_108;
  mediump vec3 lightDir_109;
  lightDir_109 = xlv_TEXCOORD5;
  mediump vec3 viewDir_110;
  viewDir_110 = xlv_TEXCOORD1;
  mediump float atten_111;
  atten_111 = tmpvar_107;
  mediump vec4 c_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = normalize(lightDir_109);
  lightDir_109 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = normalize(viewDir_110);
  viewDir_110 = tmpvar_114;
  mediump vec3 tmpvar_115;
  tmpvar_115 = normalize(normT_5);
  mediump float tmpvar_116;
  tmpvar_116 = dot (tmpvar_115, tmpvar_113);
  highp float tmpvar_117;
  mediump float tmpvar_118;
  tmpvar_118 = clamp (dot (normalize(
    (tmpvar_113 + tmpvar_114)
  ), tmpvar_115), 0.0, 1.0);
  tmpvar_117 = tmpvar_118;
  highp float tmpvar_119;
  tmpvar_119 = (pow (tmpvar_117, _SpecularPower) * _SpecularColor.w);
  c_112.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_116) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_119)) * (atten_111 * 2.0));
  c_112.w = (tmpvar_116 * (atten_111 * 2.0));
  highp vec3 tmpvar_120;
  tmpvar_120 = normalize(_SunDir);
  mediump vec3 lightDir_121;
  lightDir_121 = tmpvar_120;
  mediump vec3 normal_122;
  normal_122 = xlv_TEXCOORD3;
  mediump float tmpvar_123;
  tmpvar_123 = dot (normal_122, lightDir_121);
  color_6 = (c_112 * mix (1.0, clamp (
    floor((1.01 + tmpvar_123))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_123))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_124;
  tmpvar_124 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_124;
  tmpvar_1 = tmpvar_124;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
out float vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 t0;
vec4 t1;
vec3 t2;
vec3 t3;
vec3 t7;
float t13;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t1.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * in_NORMAL0.zxy;
    t13 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_TANGENT0.yzx;
    t3.xyz = t1.xyz * t2.xyz;
    t1.xyz = t1.zxy * t2.yzx + (-t3.xyz);
    t1.xyz = t1.xyz * in_TANGENT0.www;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t7.y = dot(t1.xyz, t2.xyz);
    t7.x = dot(in_TANGENT0.xyz, t2.xyz);
    t7.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD1.xyz = vec3(t13) * t7.xyz;
    t2.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xyz = t2.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t13 = dot(t2.xyz, t2.xyz);
    vs_TEXCOORD0 = sqrt(t13);
    t13 = dot(in_POSITION0, in_POSITION0);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t2.xyz);
    t2.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD3.xyz = vec3(t13) * t2.xyz;
    t2.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t2.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t2.xyz;
    t2.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t2.xyz;
    t1.y = dot(t1.xyz, t2.xyz);
    t1.x = dot(in_TANGENT0.xyz, t2.xyz);
    t1.z = dot(in_NORMAL0.xyz, t2.xyz);
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    vs_TEXCOORD5.xyz = vec3(t13) * t1.xyz;
    t0.y = t0.y * _ProjectionParams.x;
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = t0.zw;
    vs_TEXCOORD6.xy = t1.zz + t1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	float _SpecularPower;
uniform 	vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform  sampler2D _MainTex;
uniform  sampler2D _BumpMap;
uniform  sampler2D cube_CityOverlayTexxn;
uniform  sampler2D cube_CityOverlayTexxp;
uniform  sampler2D cube_CityOverlayTexyn;
uniform  sampler2D cube_CityOverlayTexyp;
uniform  sampler2D cube_CityOverlayTexzn;
uniform  sampler2D cube_CityOverlayTexzp;
uniform  sampler2D _CityDarkOverlayDetailTex;
uniform  sampler2D _CityLightOverlayDetailTex;
uniform  sampler2D _ShadowMapTexture;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
out vec4 SV_Target0;
vec4 t0;
vec3 t1;
lowp vec4 t10_1;
vec4 t2;
lowp vec4 t10_2;
bvec2 tb2;
vec4 t3;
lowp vec4 t10_3;
vec4 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec3 t8;
float t9;
int ti9;
bool tb9;
vec3 t10;
int ti10;
bool tb10;
vec2 t16;
float t24;
int ti24;
bool tb24;
float t25;
bool tb25;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD2.yxz;
    t25 = vs_TEXCOORD2.z * t24 + (-t1.y);
    tb2.x = abs(t1.z)>=abs(t1.y);
    t2.x = tb2.x ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD2.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t10.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t10.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t16.x = max(abs(t0.y), abs(t0.x));
    t3.x = dFdx(t16.x);
    t4.x = dFdy(t16.x);
    t16.x = min(abs(t0.y), abs(t0.x));
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t3.y = dFdx(t16.x);
    t4.y = dFdy(t16.x);
    t10_5 = textureGrad(cube_CityOverlayTexzp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_CityOverlayTexyp, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_CityOverlayTexyn, t0.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t0.xy = t0.xy * vec2(_CityOverlayDetailScale);
    t16_4 = (-t10_3) + t10_5;
    t3 = vec4(t24) * t16_4 + t10_3;
    t2 = t2 + (-t3);
    t2 = vec4(t25) * t2 + t3;
    t16.xy = t2.xy * alphaMask1.xy;
    t16.x = t16.y + t16.x;
    t16.x = t2.z * alphaMask1.z + t16.x;
    t16.x = t2.w * alphaMask1.w + t16.x;
    t24 = max(abs(t1.z), abs(t1.y));
    t24 = float(1.0) / t24;
    t25 = min(abs(t1.z), abs(t1.y));
    t24 = t24 * t25;
    t25 = t24 * t24;
    t2.x = t25 * 0.0208350997 + -0.0851330012;
    t2.x = t25 * t2.x + 0.180141002;
    t2.x = t25 * t2.x + -0.330299497;
    t25 = t25 * t2.x + 0.999866009;
    t2.x = t24 * t25;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb10 = abs(t1.z)<abs(t1.y);
    t2.x = tb10 ? t2.x : float(0.0);
    t24 = t24 * t25 + t2.x;
    tb2.xy = lessThan(t1.zxzz, (-t1.zxzz)).xy;
    t25 = tb2.x ? -3.14159274 : float(0.0);
    t24 = t24 + t25;
    t25 = min(t1.z, t1.y);
    tb25 = t25<(-t25);
    t9 = max(t1.z, t1.y);
    tb9 = t9>=(-t9);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb25) * 0xffffffffu);
    t24 = (ti9 != 0) ? (-t24) : t24;
    t3.x = t24 * 0.159154937 + 0.5;
    t24 = t24 * 0.159154937;
    t24 = abs(t24);
    t4.x = dFdx(t24);
    t5.x = dFdy(t24);
    t24 = abs(t1.x) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t1.x) + -0.212114394;
    t24 = t24 * abs(t1.x) + 1.57072878;
    t1.x = -abs(t1.x) + 1.0;
    t1.x = sqrt(t1.x);
    t9 = t24 * t1.x;
    t9 = t9 * -2.0 + 3.14159274;
    t9 = tb2.y ? t9 : float(0.0);
    t24 = t24 * t1.x + t9;
    t3.y = t24 * 0.318309873;
    t4.y = dFdx(t3.y);
    t5.y = dFdy(t3.y);
    t10_1 = textureGrad(_MainTex, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_2 = textureGrad(_BumpMap, t3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t1.xy = t10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    tb24 = t10_1.w>=1.0;
    t24 = (tb24) ? 0.0 : 1.0;
    t16.x = t24 * t16.x;
    t2.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t24 = max(abs(t2.y), abs(t2.x));
    t25 = min(abs(t2.y), abs(t2.x));
    t2.x = dFdx(t24);
    t3.x = dFdy(t24);
    t2.y = dFdx(t25);
    t3.y = dFdy(t25);
    t4 = textureGrad(_CityDarkOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t2 = textureGrad(_CityLightOverlayDetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t0.x = t16.x * t4.w;
    t2.w = t16.x * t2.w;
    t8.x = dot(t1.xy, t1.xy);
    t8.x = min(t8.x, 1.0);
    t8.x = (-t8.x) + 1.0;
    t1.z = sqrt(t8.x);
    t8.x = dot(t1.xyz, t1.xyz);
    t8.x = inversesqrt(t8.x);
    t8.xyz = t8.xxx * t1.xyz;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t8.x = dot(t8.xyz, t1.xyz);
    t16.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    t10_1 = texture(_ShadowMapTexture, t16.xy);
    t8.x = dot(t10_1.xx, t8.xx);
    t16.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t16.x = inversesqrt(t16.x);
    t1.xyz = t16.xxx * vec3(_SunDir.x, _SunDir.y, _SunDir.z);
    t16.x = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t24 = t16.x + 1.00999999;
    t16.x = t16.x * -10.0;
    t16.x = clamp(t16.x, 0.0, 1.0);
    t24 = floor(t24);
    t24 = clamp(t24, 0.0, 1.0);
    t24 = t24 + -1.0;
    t16.x = t16.x * t24 + 1.0;
    t8.x = t16.x * t8.x;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t8.x = (-t8.x) + 1.0;
    t4.w = t8.x * t0.x;
    t0 = (-t2) + t4;
    SV_Target0 = t4.wwww * t0 + t2;
    return;
}

#endif
"
}
SubProgram "gles " {
// Stats: 280 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump float tmpvar_61;
  mediump vec4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, vec4(
    float((s_30 >= 0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, vec4(float((s_30 >= 0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, vec4(float((s_30 >= 0.0))))
  , vec4(zxlerp_32)), vec4(nylerp_31)) * alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  mediump vec4 tmpvar_63;
  tmpvar_63.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  mediump vec2 uv_64;
  mediump vec3 detailCoords_65;
  mediump float s_66;
  mediump float nylerp_67;
  mediump float zxlerp_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  highp float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_68);
  s_66 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, s_66, nylerp_67));
  s_66 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74.xz = vec2(1.0, -1.0);
  tmpvar_74.y = -(s_66);
  mediump vec3 tmpvar_75;
  tmpvar_75.xz = vec2(1.0, -1.0);
  tmpvar_75.y = s_66;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_74 * tmpvar_33.xzy), (tmpvar_75 * tmpvar_33.zxy), vec3(zxlerp_68));
  detailCoords_65 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77.xy = vec2(1.0, 1.0);
  tmpvar_77.z = s_66;
  highp vec3 tmpvar_78;
  tmpvar_78 = mix ((tmpvar_77 * tmpvar_33.yxz), detailCoords_65, vec3(nylerp_67));
  detailCoords_65 = tmpvar_78;
  uv_64 = (((
    (0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_79;
  uv_79 = uv_64;
  highp vec2 uvCont_80;
  highp vec2 tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (0.5 * _CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  highp vec4 tmpvar_83;
  tmpvar_83.xy = dFdx(uvCont_80);
  tmpvar_83.zw = dFdy(uvCont_80);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_64, tmpvar_83.xy, tmpvar_83.zw);
  mediump vec4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  mediump vec2 uv_86;
  mediump vec3 detailCoords_87;
  mediump float s_88;
  mediump float nylerp_89;
  mediump float zxlerp_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  highp float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_90);
  s_88 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, s_88, nylerp_89));
  s_88 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96.xz = vec2(1.0, -1.0);
  tmpvar_96.y = -(s_88);
  mediump vec3 tmpvar_97;
  tmpvar_97.xz = vec2(1.0, -1.0);
  tmpvar_97.y = s_88;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_96 * tmpvar_33.xzy), (tmpvar_97 * tmpvar_33.zxy), vec3(zxlerp_90));
  detailCoords_87 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99.xy = vec2(1.0, 1.0);
  tmpvar_99.z = s_88;
  highp vec3 tmpvar_100;
  tmpvar_100 = mix ((tmpvar_99 * tmpvar_33.yxz), detailCoords_87, vec3(nylerp_89));
  detailCoords_87 = tmpvar_100;
  uv_86 = (((
    (0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_101;
  uv_101 = uv_86;
  highp vec2 uvCont_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  highp vec4 tmpvar_104;
  tmpvar_104.xy = dFdx(uvCont_102);
  tmpvar_104.zw = dFdy(uvCont_102);
  lowp vec4 tmpvar_105;
  tmpvar_105 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_86, tmpvar_104.xy, tmpvar_104.zw);
  mediump vec4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_107;
  shadow_107 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_108;
  lightDir_108 = xlv_TEXCOORD5;
  mediump vec3 viewDir_109;
  viewDir_109 = xlv_TEXCOORD1;
  mediump float atten_110;
  atten_110 = shadow_107;
  mediump vec4 c_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(lightDir_108);
  lightDir_108 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = normalize(viewDir_109);
  viewDir_109 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = normalize(normT_5);
  mediump float tmpvar_115;
  tmpvar_115 = dot (tmpvar_114, tmpvar_112);
  highp float tmpvar_116;
  mediump float tmpvar_117;
  tmpvar_117 = clamp (dot (normalize(
    (tmpvar_112 + tmpvar_113)
  ), tmpvar_114), 0.0, 1.0);
  tmpvar_116 = tmpvar_117;
  highp float tmpvar_118;
  tmpvar_118 = (pow (tmpvar_116, _SpecularPower) * _SpecularColor.w);
  c_111.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_115) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_118)) * (atten_110 * 2.0));
  c_111.w = (tmpvar_115 * (atten_110 * 2.0));
  highp vec3 tmpvar_119;
  tmpvar_119 = normalize(_SunDir);
  mediump vec3 lightDir_120;
  lightDir_120 = tmpvar_119;
  mediump vec3 normal_121;
  normal_121 = xlv_TEXCOORD3;
  mediump float tmpvar_122;
  tmpvar_122 = dot (normal_121, lightDir_120);
  color_6 = (c_111 * mix (1.0, clamp (
    floor((1.01 + tmpvar_122))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_122))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_123;
  tmpvar_123 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_123;
  tmpvar_1 = tmpvar_123;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp float t2;
lowp vec4 t10_2;
bvec4 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
mediump vec4 t16_5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec2 t7;
lowp vec4 t10_7;
highp vec2 t8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
mediump vec3 t16_12;
mediump vec2 t16_13;
highp vec3 t14;
lowp vec3 t10_14;
highp vec2 t15;
bool tb15;
mediump float t16_26;
highp float t27;
highp int ti27;
bool tb27;
highp int ti28;
mediump float t16_39;
highp float t41;
mediump float t16_49;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t14.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2 = vs_TEXCOORD2.z * t1.x + (-t14.y);
    tb15 = abs(t14.z)>=abs(t14.y);
    t15.x = tb15 ? 1.0 : float(0.0);
    t2 = t15.x * t2 + t14.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2;
    t2 = max(abs(t14.z), abs(t14.y));
    tb2.x = t2>=abs(t14.x);
    t2 = tb2.x ? 1.0 : float(0.0);
    t1.x = t2 * t1.x + t14.x;
    ti28 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti28) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t14.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t14.zyx + (-t4.xyz);
    t4.xyz = t15.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t14.xyz + t4.xyz;
    t5.xyz = t14.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = vec3(t2) * t4.xyz + t5.xyz;
    t16_13.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_13.y), abs(t16_13.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_13.y), abs(t16_13.x));
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexzp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_3 = t10_3 + (-t10_6);
    t16_3 = t16_0.xxxx * t16_3 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_3 = t16_3 + (-t16_6);
    t16_3 = t15.xxxx * t16_3 + t16_6;
    t10_6 = textureGrad(cube_CityOverlayTexyp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexyn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t15.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t16_5 = (-t10_4) + t10_6;
    t16_0 = t16_0.xxxx * t16_5 + t10_4;
    t16_3 = (-t16_0) + t16_3;
    t16_0 = vec4(t2) * t16_3 + t16_0;
    t16_0.xy = t16_0.xy * alphaMask1.xy;
    t16_0.x = t16_0.y + t16_0.x;
    t16_0.x = t16_0.z * alphaMask1.z + t16_0.x;
    t16_0.x = t16_0.w * alphaMask1.w + t16_0.x;
    t1.x = max(abs(t14.z), abs(t14.y));
    t1.x = float(1.0) / t1.x;
    t2 = min(abs(t14.z), abs(t14.y));
    t1.x = t1.x * t2;
    t2 = t1.x * t1.x;
    t41 = t2 * 0.0208350997 + -0.0851330012;
    t41 = t2 * t41 + 0.180141002;
    t41 = t2 * t41 + -0.330299497;
    t2 = t2 * t41 + 0.999866009;
    t41 = t1.x * t2;
    t41 = t41 * -2.0 + 1.57079637;
    tb4 = abs(t14.z)<abs(t14.y);
    t41 = tb4 ? t41 : float(0.0);
    t1.x = t1.x * t2 + t41;
    tb2.xw = lessThan(t14.zzzx, (-t14.zzzx)).xw;
    t2 = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2;
    t2 = min(t14.z, t14.y);
    tb2.x = t2<(-t2);
    t27 = max(t14.z, t14.y);
    tb27 = t27>=(-t27);
    ti27 = int(uint(tb27) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti27 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t7.x = dFdx(t1.x);
    t8.x = dFdy(t1.x);
    t1.x = abs(t14.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t14.x) + -0.212114394;
    t1.x = t1.x * abs(t14.x) + 1.57072878;
    t14.x = -abs(t14.x) + 1.0;
    t14.x = sqrt(t14.x);
    t27 = t14.x * t1.x;
    t27 = t27 * -2.0 + 3.14159274;
    t27 = tb2.w ? t27 : float(0.0);
    t1.x = t1.x * t14.x + t27;
    t4.y = t1.x * 0.318309873;
    t7.y = dFdx(t4.y);
    t8.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).w;
    t10_14.xyz = textureGrad(_BumpMap, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).xyz;
    t10_9.xyz = t10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_13.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_13.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t15.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t4.xy = dFdx(t1.zx);
    t7.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t16_13.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_10.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_26 = dot(t10_9.xyz, t10_9.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_11.xyz = vec3(t16_26) * t10_9.xyz;
    t16_26 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_12.xyz = vec3(t16_26) * vs_TEXCOORD5.xyz;
    t16_26 = dot(t16_11.xyz, t16_12.xyz);
    vec3 txVec18 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_39 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec18, 0.0);
    t16_49 = (-_LightShadowData.x) + 1.0;
    t16_39 = t16_39 * t16_49 + _LightShadowData.x;
    t16_26 = dot(vec2(t16_39), vec2(t16_26));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_39 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_49 = t16_39 + 1.00999999;
    t16_39 = t16_39 * -10.0;
    t16_39 = clamp(t16_39, 0.0, 1.0);
    t16_49 = floor(t16_49);
    t16_49 = clamp(t16_49, 0.0, 1.0);
    t16_49 = t16_49 + -1.0;
    t16_39 = t16_39 * t16_49 + 1.0;
    t16_26 = t16_39 * t16_26;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_26 = (-t16_26) + 1.0;
    t16_39 = t16_13.x * t16_26 + (-t16_0.x);
    t16_13.x = t16_26 * t16_13.x;
    t16_1.w = t16_13.x * t16_39 + t16_0.x;
    t16_1.xyz = t16_13.xxx * t16_10.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 280 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _SunDir;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  mediump vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (tmpvar_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _SunDir;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(_glesNormal);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = _glesTANGENT.xyz;
  tmpvar_10 = (((tmpvar_7.yzx * tmpvar_8.zxy) - (tmpvar_7.zxy * tmpvar_8.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_1.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_1.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_1.z;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _WorldSpaceCameraPos;
  tmpvar_2 = (unity_World2Shadow[0] * tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_11 * (
    (_World2Object * tmpvar_12)
  .xyz - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_11 * (_World2Object * tmpvar_6).xyz));
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_CityOverlayTexxn;
uniform sampler2D cube_CityOverlayTexxp;
uniform sampler2D cube_CityOverlayTexyn;
uniform sampler2D cube_CityOverlayTexyp;
uniform sampler2D cube_CityOverlayTexzn;
uniform sampler2D cube_CityOverlayTexzp;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform highp vec3 _SunDir;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec3 normT_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_8;
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  highp float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdx(uvCont_12);
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdy(uvCont_12);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(uvCont_22);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (_BumpMap, uv_18, tmpvar_23, tmpvar_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec3 tmpvar_27;
  lowp vec4 packednormal_28;
  packednormal_28 = tmpvar_26;
  tmpvar_27 = ((packednormal_28.xyz * 2.0) - 1.0);
  normT_5 = tmpvar_27;
  mediump vec3 detailCoords_29;
  mediump float s_30;
  mediump float nylerp_31;
  mediump float zxlerp_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD2);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_32);
  s_30 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, s_30, nylerp_31));
  s_30 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39.xz = vec2(1.0, -1.0);
  tmpvar_39.y = -(s_30);
  mediump vec3 tmpvar_40;
  tmpvar_40.xz = vec2(1.0, -1.0);
  tmpvar_40.y = s_30;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix ((tmpvar_39 * tmpvar_33.xzy), (tmpvar_40 * tmpvar_33.zxy), vec3(zxlerp_32));
  detailCoords_29 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xy = vec2(1.0, 1.0);
  tmpvar_42.z = s_30;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix ((tmpvar_42 * tmpvar_33.yxz), detailCoords_29, vec3(nylerp_31));
  detailCoords_29 = tmpvar_43;
  mediump vec2 tmpvar_44;
  tmpvar_44 = (((0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + 0.5);
  highp vec2 uv_45;
  uv_45 = tmpvar_44;
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (cube_CityOverlayTexxn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (cube_CityOverlayTexxp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (cube_CityOverlayTexyn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (cube_CityOverlayTexyp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (cube_CityOverlayTexzn, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (cube_CityOverlayTexzp, tmpvar_44, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  mediump float tmpvar_61;
  mediump vec4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, vec4(
    float((s_30 >= 0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, vec4(float((s_30 >= 0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, vec4(float((s_30 >= 0.0))))
  , vec4(zxlerp_32)), vec4(nylerp_31)) * alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  mediump vec4 tmpvar_63;
  tmpvar_63.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  mediump vec2 uv_64;
  mediump vec3 detailCoords_65;
  mediump float s_66;
  mediump float nylerp_67;
  mediump float zxlerp_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  highp float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_68);
  s_66 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, s_66, nylerp_67));
  s_66 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74.xz = vec2(1.0, -1.0);
  tmpvar_74.y = -(s_66);
  mediump vec3 tmpvar_75;
  tmpvar_75.xz = vec2(1.0, -1.0);
  tmpvar_75.y = s_66;
  highp vec3 tmpvar_76;
  tmpvar_76 = mix ((tmpvar_74 * tmpvar_33.xzy), (tmpvar_75 * tmpvar_33.zxy), vec3(zxlerp_68));
  detailCoords_65 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77.xy = vec2(1.0, 1.0);
  tmpvar_77.z = s_66;
  highp vec3 tmpvar_78;
  tmpvar_78 = mix ((tmpvar_77 * tmpvar_33.yxz), detailCoords_65, vec3(nylerp_67));
  detailCoords_65 = tmpvar_78;
  uv_64 = (((
    (0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_79;
  uv_79 = uv_64;
  highp vec2 uvCont_80;
  highp vec2 tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (0.5 * _CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  highp vec4 tmpvar_83;
  tmpvar_83.xy = dFdx(uvCont_80);
  tmpvar_83.zw = dFdy(uvCont_80);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DGradEXT (_CityDarkOverlayDetailTex, uv_64, tmpvar_83.xy, tmpvar_83.zw);
  mediump vec4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  mediump vec2 uv_86;
  mediump vec3 detailCoords_87;
  mediump float s_88;
  mediump float nylerp_89;
  mediump float zxlerp_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  highp float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_90);
  s_88 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, s_88, nylerp_89));
  s_88 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96.xz = vec2(1.0, -1.0);
  tmpvar_96.y = -(s_88);
  mediump vec3 tmpvar_97;
  tmpvar_97.xz = vec2(1.0, -1.0);
  tmpvar_97.y = s_88;
  highp vec3 tmpvar_98;
  tmpvar_98 = mix ((tmpvar_96 * tmpvar_33.xzy), (tmpvar_97 * tmpvar_33.zxy), vec3(zxlerp_90));
  detailCoords_87 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99.xy = vec2(1.0, 1.0);
  tmpvar_99.z = s_88;
  highp vec3 tmpvar_100;
  tmpvar_100 = mix ((tmpvar_99 * tmpvar_33.yxz), detailCoords_87, vec3(nylerp_89));
  detailCoords_87 = tmpvar_100;
  uv_86 = (((
    (0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + 0.5) * _CityOverlayDetailScale);
  highp vec2 uv_101;
  uv_101 = uv_86;
  highp vec2 uvCont_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  highp vec4 tmpvar_104;
  tmpvar_104.xy = dFdx(uvCont_102);
  tmpvar_104.zw = dFdy(uvCont_102);
  lowp vec4 tmpvar_105;
  tmpvar_105 = texture2DGradEXT (_CityLightOverlayDetailTex, uv_86, tmpvar_104.xy, tmpvar_104.zw);
  mediump vec4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * (1.0 - float(
    (tmpvar_16.w >= 1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = 0.0;
  lowp float shadow_107;
  shadow_107 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump vec3 lightDir_108;
  lightDir_108 = xlv_TEXCOORD5;
  mediump vec3 viewDir_109;
  viewDir_109 = xlv_TEXCOORD1;
  mediump float atten_110;
  atten_110 = shadow_107;
  mediump vec4 c_111;
  mediump vec3 tmpvar_112;
  tmpvar_112 = normalize(lightDir_108);
  lightDir_108 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = normalize(viewDir_109);
  viewDir_109 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = normalize(normT_5);
  mediump float tmpvar_115;
  tmpvar_115 = dot (tmpvar_114, tmpvar_112);
  highp float tmpvar_116;
  mediump float tmpvar_117;
  tmpvar_117 = clamp (dot (normalize(
    (tmpvar_112 + tmpvar_113)
  ), tmpvar_114), 0.0, 1.0);
  tmpvar_116 = tmpvar_117;
  highp float tmpvar_118;
  tmpvar_118 = (pow (tmpvar_116, _SpecularPower) * _SpecularColor.w);
  c_111.xyz = (((
    (color_6.xyz * _LightColor0.xyz)
   * tmpvar_115) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * tmpvar_118)) * (atten_110 * 2.0));
  c_111.w = (tmpvar_115 * (atten_110 * 2.0));
  highp vec3 tmpvar_119;
  tmpvar_119 = normalize(_SunDir);
  mediump vec3 lightDir_120;
  lightDir_120 = tmpvar_119;
  mediump vec3 normal_121;
  normal_121 = xlv_TEXCOORD3;
  mediump float tmpvar_122;
  tmpvar_122 = dot (normal_121, lightDir_120);
  color_6 = (c_111 * mix (1.0, clamp (
    floor((1.01 + tmpvar_122))
  , 0.0, 1.0), clamp (
    (10.0 * -(tmpvar_122))
  , 0.0, 1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (color_6.w, 0.0, 1.0)));
  mediump vec4 tmpvar_123;
  tmpvar_123 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_123;
  tmpvar_1 = tmpvar_123;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp float vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t5;
highp float t9;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * in_NORMAL0.zxy;
    t9 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_TANGENT0.yzx;
    t2.xyz = t0.xyz * t1.xyz;
    t0.xyz = t0.zxy * t1.yzx + (-t2.xyz);
    t0.xyz = t0.xyz * in_TANGENT0.www;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t5.y = dot(t0.xyz, t1.xyz);
    t5.x = dot(in_TANGENT0.xyz, t1.xyz);
    t5.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t5.xyz, t5.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD1.xyz = vec3(t9) * t5.xyz;
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t1.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t9 = dot(t1.xyz, t1.xyz);
    vs_TEXCOORD0 = sqrt(t9);
    t9 = dot(in_POSITION0, in_POSITION0);
    t9 = inversesqrt(t9);
    t1.xyz = vec3(t9) * in_POSITION0.xyz;
    vs_TEXCOORD2.xyz = (-t1.xyz);
    t1.xyz = in_NORMAL0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_NORMAL0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_NORMAL0.zzz + t1.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD3.xyz = vec3(t9) * t1.xyz;
    t1.xyz = _World2Object[1].xyz * _SunDir.xxyz.zzz;
    t1.xyz = _World2Object[0].xyz * _SunDir.xxyz.yyy + t1.xyz;
    t1.xyz = _World2Object[2].xyz * vec3(_SunDir.z, _SunDir.z, _SunDir.z) + t1.xyz;
    t0.y = dot(t0.xyz, t1.xyz);
    t0.x = dot(in_TANGENT0.xyz, t1.xyz);
    t0.z = dot(in_NORMAL0.xyz, t1.xyz);
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    vs_TEXCOORD5.xyz = vec3(t9) * t0.xyz;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	float _SpecularPower;
uniform 	mediump vec4 _SpecularColor;
uniform 	float _DetailDist;
uniform 	vec3 _SunDir;
uniform 	float _CityOverlayDetailScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D cube_CityOverlayTexxn;
uniform lowp sampler2D cube_CityOverlayTexxp;
uniform lowp sampler2D cube_CityOverlayTexyn;
uniform lowp sampler2D cube_CityOverlayTexyp;
uniform lowp sampler2D cube_CityOverlayTexzn;
uniform lowp sampler2D cube_CityOverlayTexzp;
uniform lowp sampler2D _CityDarkOverlayDetailTex;
uniform lowp sampler2D _CityLightOverlayDetailTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bool tb1;
highp float t2;
lowp vec4 t10_2;
bvec4 tb2;
mediump vec4 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
lowp vec4 t10_4;
bool tb4;
highp vec3 t5;
mediump vec4 t16_5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec2 t7;
lowp vec4 t10_7;
highp vec2 t8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_11;
mediump vec3 t16_12;
mediump vec2 t16_13;
highp vec3 t14;
lowp vec3 t10_14;
highp vec2 t15;
bool tb15;
mediump float t16_26;
highp float t27;
highp int ti27;
bool tb27;
highp int ti28;
mediump float t16_39;
highp float t41;
mediump float t16_49;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    t1.x = inversesqrt(t1.x);
    t14.xyz = t1.xxx * vs_TEXCOORD2.yxz;
    t2 = vs_TEXCOORD2.z * t1.x + (-t14.y);
    tb15 = abs(t14.z)>=abs(t14.y);
    t15.x = tb15 ? 1.0 : float(0.0);
    t2 = t15.x * t2 + t14.y;
    t1.x = (-vs_TEXCOORD2.y) * t1.x + t2;
    t2 = max(abs(t14.z), abs(t14.y));
    tb2.x = t2>=abs(t14.x);
    t2 = tb2.x ? 1.0 : float(0.0);
    t1.x = t2 * t1.x + t14.x;
    ti28 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti28) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t14.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t14.zyx + (-t4.xyz);
    t4.xyz = t15.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t14.xyz + t4.xyz;
    t5.xyz = t14.xyz * t16_3.xxy;
    tb1 = t16_3.y>=0.0;
    t16_0.x = (tb1) ? 1.0 : 0.0;
    t4.xyz = vec3(t2) * t4.xyz + t5.xyz;
    t16_13.xy = vec2(t4.y * float(0.5), t4.z * float(0.5));
    t16_13.xy = t16_13.xy / abs(t4.xx);
    t16_1.x = max(abs(t16_13.y), abs(t16_13.x));
    t4.x = dFdx(t16_1.x);
    t5.x = dFdy(t16_1.x);
    t16_1.x = min(abs(t16_13.y), abs(t16_13.x));
    t16_13.xy = t16_13.xy + vec2(0.5, 0.5);
    t4.y = dFdx(t16_1.x);
    t5.y = dFdy(t16_1.x);
    t10_3 = textureGrad(cube_CityOverlayTexzp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_CityOverlayTexzn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_3 = t10_3 + (-t10_6);
    t16_3 = t16_0.xxxx * t16_3 + t10_6;
    t10_6 = textureGrad(cube_CityOverlayTexxp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_CityOverlayTexxn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_3 = t16_3 + (-t16_6);
    t16_3 = t15.xxxx * t16_3 + t16_6;
    t10_6 = textureGrad(cube_CityOverlayTexyp, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_4 = textureGrad(cube_CityOverlayTexyn, t16_13.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t15.xy = t16_13.xy * vec2(_CityOverlayDetailScale);
    t16_5 = (-t10_4) + t10_6;
    t16_0 = t16_0.xxxx * t16_5 + t10_4;
    t16_3 = (-t16_0) + t16_3;
    t16_0 = vec4(t2) * t16_3 + t16_0;
    t16_0.xy = t16_0.xy * alphaMask1.xy;
    t16_0.x = t16_0.y + t16_0.x;
    t16_0.x = t16_0.z * alphaMask1.z + t16_0.x;
    t16_0.x = t16_0.w * alphaMask1.w + t16_0.x;
    t1.x = max(abs(t14.z), abs(t14.y));
    t1.x = float(1.0) / t1.x;
    t2 = min(abs(t14.z), abs(t14.y));
    t1.x = t1.x * t2;
    t2 = t1.x * t1.x;
    t41 = t2 * 0.0208350997 + -0.0851330012;
    t41 = t2 * t41 + 0.180141002;
    t41 = t2 * t41 + -0.330299497;
    t2 = t2 * t41 + 0.999866009;
    t41 = t1.x * t2;
    t41 = t41 * -2.0 + 1.57079637;
    tb4 = abs(t14.z)<abs(t14.y);
    t41 = tb4 ? t41 : float(0.0);
    t1.x = t1.x * t2 + t41;
    tb2.xw = lessThan(t14.zzzx, (-t14.zzzx)).xw;
    t2 = tb2.x ? -3.14159274 : float(0.0);
    t1.x = t1.x + t2;
    t2 = min(t14.z, t14.y);
    tb2.x = t2<(-t2);
    t27 = max(t14.z, t14.y);
    tb27 = t27>=(-t27);
    ti27 = int(uint(tb27) * 0xffffffffu & uint(tb2.x) * 0xffffffffu);
    t1.x = (ti27 != 0) ? (-t1.x) : t1.x;
    t4.x = t1.x * 0.159154937 + 0.5;
    t1.x = t1.x * 0.159154937;
    t1.x = abs(t1.x);
    t7.x = dFdx(t1.x);
    t8.x = dFdy(t1.x);
    t1.x = abs(t14.x) * -0.0187292993 + 0.0742610022;
    t1.x = t1.x * abs(t14.x) + -0.212114394;
    t1.x = t1.x * abs(t14.x) + 1.57072878;
    t14.x = -abs(t14.x) + 1.0;
    t14.x = sqrt(t14.x);
    t27 = t14.x * t1.x;
    t27 = t27 * -2.0 + 3.14159274;
    t27 = tb2.w ? t27 : float(0.0);
    t1.x = t1.x * t14.x + t27;
    t4.y = t1.x * 0.318309873;
    t7.y = dFdx(t4.y);
    t8.y = dFdy(t4.y);
    t10_1.x = textureGrad(_MainTex, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).w;
    t10_14.xyz = textureGrad(_BumpMap, t4.xy, vec4(t7.xyxx).xy, vec4(t8.xyxx).xy).xyz;
    t10_9.xyz = t10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    tb1 = t10_1.x>=1.0;
    t16_13.x = (tb1) ? 0.0 : 1.0;
    t16_0.x = t16_13.x * t16_0.x;
    t1.xy = (-vec2(_CityOverlayDetailScale)) * vec2(0.5, 0.5) + t15.xy;
    t1.z = max(abs(t1.y), abs(t1.x));
    t1.x = min(abs(t1.y), abs(t1.x));
    t4.xy = dFdx(t1.zx);
    t7.xy = dFdy(t1.zx);
    t10_1 = textureGrad(_CityDarkOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t10_2 = textureGrad(_CityLightOverlayDetailTex, t15.xy, vec4(t4.xyxx).xy, vec4(t7.xyxx).xy);
    t16_13.x = t16_0.x * t10_1.w;
    t16_0.x = t16_0.x * t10_2.w;
    t16_10.xyz = t10_1.xyz + (-t10_2.xyz);
    t16_26 = dot(t10_9.xyz, t10_9.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_11.xyz = vec3(t16_26) * t10_9.xyz;
    t16_26 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16_26 = inversesqrt(t16_26);
    t16_12.xyz = vec3(t16_26) * vs_TEXCOORD5.xyz;
    t16_26 = dot(t16_11.xyz, t16_12.xyz);
    vec3 txVec24 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_39 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec24, 0.0);
    t16_49 = (-_LightShadowData.x) + 1.0;
    t16_39 = t16_39 * t16_49 + _LightShadowData.x;
    t16_26 = dot(vec2(t16_39), vec2(t16_26));
    t1.x = dot(vec3(_SunDir.x, _SunDir.y, _SunDir.z), vec3(_SunDir.x, _SunDir.y, _SunDir.z));
    t1.x = inversesqrt(t1.x);
    t1.xyz = vec3(t1.x * _SunDir.xxyz.y, t1.x * _SunDir.xxyz.z, t1.x * float(_SunDir.z));
    t16_39 = dot(vs_TEXCOORD3.xyz, t1.xyz);
    t16_49 = t16_39 + 1.00999999;
    t16_39 = t16_39 * -10.0;
    t16_39 = clamp(t16_39, 0.0, 1.0);
    t16_49 = floor(t16_49);
    t16_49 = clamp(t16_49, 0.0, 1.0);
    t16_49 = t16_49 + -1.0;
    t16_39 = t16_39 * t16_49 + 1.0;
    t16_26 = t16_39 * t16_26;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_26 = (-t16_26) + 1.0;
    t16_39 = t16_13.x * t16_26 + (-t16_0.x);
    t16_13.x = t16_26 * t16_13.x;
    t16_1.w = t16_13.x * t16_39 + t16_0.x;
    t16_1.xyz = t16_13.xxx * t16_10.xyz + t10_2.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [_SunDir] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float3 _SunDir;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_1 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _mtl_i._glesNormal;
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _mtl_u._SunDir;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i._glesNormal);
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i._glesTANGENT.xyz);
  float3 tmpvar_8;
  float3 tmpvar_9;
  tmpvar_8 = _mtl_i._glesTANGENT.xyz;
  tmpvar_9 = (((tmpvar_6.yzx * tmpvar_7.zxy) - (tmpvar_6.zxy * tmpvar_7.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = _mtl_i._glesNormal.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = _mtl_i._glesNormal.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = _mtl_i._glesNormal.z;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_u._WorldSpaceCameraPos;
  float4 o_12;
  float4 tmpvar_13;
  tmpvar_13 = (tmpvar_1 * 0.5);
  float2 tmpvar_14;
  tmpvar_14.x = tmpvar_13.x;
  tmpvar_14.y = (tmpvar_13.y * _mtl_u._ProjectionParams.x);
  o_12.xy = (tmpvar_14 + tmpvar_13.w);
  o_12.zw = tmpvar_1.zw;
  tmpvar_2 = half4(o_12);
  _mtl_o.gl_Position = tmpvar_1;
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_10 * (
    (_mtl_u._World2Object * tmpvar_11)
  .xyz - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_10 * (_mtl_u._World2Object * tmpvar_5).xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_2;
  return _mtl_o;
}

"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 106 math, 15 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
"ps_3_0
def c2, -2, 1.57079637, 0.159154937, 0.5
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c6, -2, 3.14159274, 0.318309873, 1
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c4.y, c4.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c3.x, c3.y
mad r2.x, r1.w, r2.x, c3.z
mad r2.x, r1.w, r2.x, c3.w
mad r1.w, r1.w, r2.x, c4.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c2.x, c2.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c8.xyxy, c8
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c4.z, c4.y
cmp r1.x, r1.x, c4.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c4.w
mad r2.x, r0.x, c2.z, c2.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c5.x, c5.y
mad r0.x, r0.x, r0_abs.y, c5.z
mad r0.x, r0.x, r0_abs.y, c5.w
add r1.z, -r0_abs.y, c4.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c6.x, c6.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c6.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s1, r1, r3
add r0.x, r4.w, -c4.z
texldd_pp r4, r2, s0, r1, r3
texldd_pp r1, r2, s2, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
cmp_pp r0.x, r0.x, c4.y, r4.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c4.y, c4.z
cmp r2.y, r2.y, -c4.y, -c4.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c7.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c2.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c2.w
mul_pp r0.yz, r0, c1.x
mov r0.w, c2.w
mad r2.xy, c1.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s3, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s4, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c4.y
add_pp r0.x, -r0.x, c4.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
add_pp r0.x, r0.x, r0.x
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c4.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 102 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_BumpMap] 2D 2
SetTexture 2 [_CityOverlayTex] 2D 0
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:afabafaa
eefiecedkhgdncoakfhkdkdkbhncbhmppnfbcincabaaaaaaaebaaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoeaoaaaa
eaaaaaaaljadaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaabnaaaaah
ecaabaaaabaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiadpdhaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpejaaaaan
pcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaaaaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaa
abaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaaeaaaaaadcaaaaak
ccaabaaaabaaaaaackbabaaaacaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaa
aaaaaaaabnaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaa
akaabaaaaaaaaaaabkaabaaaabaaaaaadeaaaaajccaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaabkaabaaa
abaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaahicaabaaaabaaaaaa
abeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
abaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaaaaaaaaa
dgaaaaagccaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaifcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadiaaaaahhcaabaaa
aeaaaaaaogajbaaaaaaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakhcaabaaaafaaaaaa
egacbaaaadaaaaaalganbaaaaaaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaaeaaaaaakgakbaaaabaaaaaaegacbaaaafaaaaaaegacbaaaaeaaaaaa
dcaaaaakhcaabaaaaeaaaaaaagabbaiaebaaaaaaadaaaaaajgahbaaaaaaaaaaa
egacbaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaaaaaaaaaagabbaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaadcaaaaaomcaabaaa
aaaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajccaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaa
adaaaaaabkaabaaaabaaaaaaamaaaaafbcaabaaaaeaaaaaabkaabaaaabaaaaaa
alaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaaakaabaaa
abaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaaaaaaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahncaabaaaabaaaaaaagaabaaaabaaaaaaagajbaaaacaaaaaa
baaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaa
acaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaigadbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaa
abaaaaaabaaaaaajecaabaaaabaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaa
aaaaaaaabkaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
hcaabaaaacaaaaaakgakbaaaabaaaaaajgihcaaaaaaaaaaabkaaaaaabaaaaaah
ecaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialp
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdicaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaafaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaai
pcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaaj
pccabaaaaaaaaaaapgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 300 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(0)]], sampler _mtlsmp__CityOverlayTex [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_28;
  float tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_32);
  tmpvar_33.zw = dfdy(uvCont_32);
  half4 tmpvar_34;
  tmpvar_34 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_28), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  half2 uv_36;
  half3 detailCoords_37;
  half s_38;
  half nylerp_39;
  half zxlerp_40;
  float3 tmpvar_41;
  tmpvar_41 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = half(tmpvar_43);
  float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = half(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, (float)zxlerp_40);
  s_38 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, (float)s_38, (float)nylerp_39));
  s_38 = half(tmpvar_46);
  half3 tmpvar_47;
  tmpvar_47.xz = half2(float2(1.0, -1.0));
  tmpvar_47.y = -(s_38);
  half3 tmpvar_48;
  tmpvar_48.xz = half2(float2(1.0, -1.0));
  tmpvar_48.y = s_38;
  float3 tmpvar_49;
  tmpvar_49 = mix (((float3)tmpvar_47 * tmpvar_41.xzy), ((float3)tmpvar_48 * tmpvar_41.zxy), (float3)half3(zxlerp_40));
  detailCoords_37 = half3(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xy = half2(float2(1.0, 1.0));
  tmpvar_50.z = s_38;
  float3 tmpvar_51;
  tmpvar_51 = mix (((float3)tmpvar_50 * tmpvar_41.yxz), (float3)detailCoords_37, (float3)half3(nylerp_39));
  detailCoords_37 = half3(tmpvar_51);
  uv_36 = half2(((float2)((
    ((half)0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_52;
  uv_52 = float2(uv_36);
  float2 uvCont_53;
  float2 tmpvar_54;
  float tmpvar_55;
  tmpvar_55 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  float4 tmpvar_56;
  tmpvar_56.xy = dfdx(uvCont_53);
  tmpvar_56.zw = dfdy(uvCont_53);
  half4 tmpvar_57;
  tmpvar_57 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_36), gradient2d((float2)(tmpvar_56.xy), (float2)(tmpvar_56.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  half2 uv_59;
  half3 detailCoords_60;
  half s_61;
  half nylerp_62;
  half zxlerp_63;
  float3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = half(tmpvar_65);
  float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = half(tmpvar_66);
  float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, (float)zxlerp_63);
  s_61 = half(tmpvar_67);
  float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, (float)s_61, (float)nylerp_62));
  s_61 = half(tmpvar_68);
  half3 tmpvar_69;
  tmpvar_69.xz = half2(float2(1.0, -1.0));
  tmpvar_69.y = -(s_61);
  half3 tmpvar_70;
  tmpvar_70.xz = half2(float2(1.0, -1.0));
  tmpvar_70.y = s_61;
  float3 tmpvar_71;
  tmpvar_71 = mix (((float3)tmpvar_69 * tmpvar_41.xzy), ((float3)tmpvar_70 * tmpvar_41.zxy), (float3)half3(zxlerp_63));
  detailCoords_60 = half3(tmpvar_71);
  half3 tmpvar_72;
  tmpvar_72.xy = half2(float2(1.0, 1.0));
  tmpvar_72.z = s_61;
  float3 tmpvar_73;
  tmpvar_73 = mix (((float3)tmpvar_72 * tmpvar_41.yxz), (float3)detailCoords_60, (float3)half3(nylerp_62));
  detailCoords_60 = half3(tmpvar_73);
  uv_59 = half2(((float2)((
    ((half)0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_74;
  uv_74 = float2(uv_59);
  float2 uvCont_75;
  float2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  float4 tmpvar_77;
  tmpvar_77.xy = dfdx(uvCont_75);
  tmpvar_77.zw = dfdy(uvCont_75);
  half4 tmpvar_78;
  tmpvar_78 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_59), gradient2d((float2)(tmpvar_77.xy), (float2)(tmpvar_77.zw)));
  half4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_80;
  lightDir_80 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_81;
  viewDir_81 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_82;
  half3 tmpvar_83;
  tmpvar_83 = normalize(lightDir_80);
  lightDir_80 = tmpvar_83;
  half3 tmpvar_84;
  tmpvar_84 = normalize(viewDir_81);
  viewDir_81 = tmpvar_84;
  half3 tmpvar_85;
  tmpvar_85 = normalize(normT_5);
  half tmpvar_86;
  tmpvar_86 = dot (tmpvar_85, tmpvar_83);
  float tmpvar_87;
  half tmpvar_88;
  tmpvar_88 = clamp (dot (normalize(
    (tmpvar_83 + tmpvar_84)
  ), tmpvar_85), (half)0.0, (half)1.0);
  tmpvar_87 = float(tmpvar_88);
  float tmpvar_89;
  tmpvar_89 = (pow (tmpvar_87, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_82.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_86) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_89)) * 2.0));
  c_82.w = (tmpvar_86 * (half)2.0);
  float3 tmpvar_90;
  tmpvar_90 = normalize(_mtl_u._SunDir);
  half3 lightDir_91;
  lightDir_91 = half3(tmpvar_90);
  half3 normal_92;
  normal_92 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_93;
  tmpvar_93 = dot (normal_92, lightDir_91);
  color_6 = (c_82 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_93))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_93))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_94;
  tmpvar_94 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_94;
  tmpvar_1 = tmpvar_94;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 107 math, 16 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
"ps_3_0
def c2, -2, 1.57079637, 0.159154937, 0.5
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c6, -2, 3.14159274, 0.318309873, 1
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c4.y, c4.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c3.x, c3.y
mad r2.x, r1.w, r2.x, c3.z
mad r2.x, r1.w, r2.x, c3.w
mad r1.w, r1.w, r2.x, c4.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c2.x, c2.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c8.xyxy, c8
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c4.z, c4.y
cmp r1.x, r1.x, c4.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c4.w
mad r2.x, r0.x, c2.z, c2.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c5.x, c5.y
mad r0.x, r0.x, r0_abs.y, c5.z
mad r0.x, r0.x, r0_abs.y, c5.w
add r1.z, -r0_abs.y, c4.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c6.x, c6.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c6.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s2, r1, r3
add r0.x, r4.w, -c4.z
texldd_pp r4, r2, s1, r1, r3
texldd_pp r1, r2, s3, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
cmp_pp r0.x, r0.x, c4.y, r4.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c4.y, c4.z
cmp r2.y, r2.y, -c4.y, -c4.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c7.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c2.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c2.w
mul_pp r0.yz, r0, c1.x
mov r0.w, c2.w
mad r2.xy, c1.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s4, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s5, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c4.y
add_pp r0.x, -r0.x, c4.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.x, r1.x, r0.x, c4.y
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c4.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 103 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_BumpMap] 2D 3
SetTexture 2 [_CityOverlayTex] 2D 1
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 4 [_CityLightOverlayDetailTex] 2D 5
SetTexture 5 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:agabagaa
eefiecedkcilkohnbkdnoodppfodgpbhpgcckdfoabaaaaaaiebaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcemapaaaaeaaaaaaandadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
lcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaabnaaaaah
ecaabaaaabaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiadpdhaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpejaaaaan
pcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaa
abaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaaeaaaaaadcaaaaak
ccaabaaaabaaaaaackbabaaaacaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaa
aaaaaaaabnaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaa
akaabaaaaaaaaaaabkaabaaaabaaaaaadeaaaaajccaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaabkaabaaa
abaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaahicaabaaaabaaaaaa
abeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
abaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaaaaaaaaa
dgaaaaagccaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaifcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadiaaaaahhcaabaaa
aeaaaaaaogajbaaaaaaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakhcaabaaaafaaaaaa
egacbaaaadaaaaaalganbaaaaaaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaaeaaaaaakgakbaaaabaaaaaaegacbaaaafaaaaaaegacbaaaaeaaaaaa
dcaaaaakhcaabaaaaeaaaaaaagabbaiaebaaaaaaadaaaaaajgahbaaaaaaaaaaa
egacbaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaaaaaaaaaagabbaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaadcaaaaaomcaabaaa
aaaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajccaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaa
adaaaaaabkaabaaaabaaaaaaamaaaaafbcaabaaaaeaaaaaabkaabaaaabaaaaaa
alaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaa
adaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaaakaabaaa
abaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaaaaaaaaaaaapaaaaahbcaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahncaabaaaabaaaaaaagaabaaaabaaaaaaagajbaaaacaaaaaa
baaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaa
acaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaigadbaaaabaaaaaa
egacbaaaacaaaaaaaoaaaaahmcaabaaaabaaaaaaagbebaaaafaaaaaapgbpbaaa
afaaaaaaefaaaaajpcaabaaaacaaaaaaogakbaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaaapaaaaahbcaabaaaabaaaaaaagaabaaaacaaaaaaagaabaaa
abaaaaaabaaaaaajecaabaaaabaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaa
aaaaaaaabkaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
hcaabaaaacaaaaaakgakbaaaabaaaaaajgihcaaaaaaaaaaabkaaaaaabaaaaaah
ecaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialp
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdicaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaafaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaai
pcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaaj
pccabaaaaaaaaaaapgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 302 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_N_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(1)]], sampler _mtlsmp__CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_28;
  float tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_32);
  tmpvar_33.zw = dfdy(uvCont_32);
  half4 tmpvar_34;
  tmpvar_34 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_28), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  cityoverlay_4.xyz = tmpvar_35.xyz;
  half2 uv_36;
  half3 detailCoords_37;
  half s_38;
  half nylerp_39;
  half zxlerp_40;
  float3 tmpvar_41;
  tmpvar_41 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_41);
  float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_40 = half(tmpvar_43);
  float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_39 = half(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = mix (tmpvar_41.x, tmpvar_41.z, (float)zxlerp_40);
  s_38 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_41.y, (float)s_38, (float)nylerp_39));
  s_38 = half(tmpvar_46);
  half3 tmpvar_47;
  tmpvar_47.xz = half2(float2(1.0, -1.0));
  tmpvar_47.y = -(s_38);
  half3 tmpvar_48;
  tmpvar_48.xz = half2(float2(1.0, -1.0));
  tmpvar_48.y = s_38;
  float3 tmpvar_49;
  tmpvar_49 = mix (((float3)tmpvar_47 * tmpvar_41.xzy), ((float3)tmpvar_48 * tmpvar_41.zxy), (float3)half3(zxlerp_40));
  detailCoords_37 = half3(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xy = half2(float2(1.0, 1.0));
  tmpvar_50.z = s_38;
  float3 tmpvar_51;
  tmpvar_51 = mix (((float3)tmpvar_50 * tmpvar_41.yxz), (float3)detailCoords_37, (float3)half3(nylerp_39));
  detailCoords_37 = half3(tmpvar_51);
  uv_36 = half2(((float2)((
    ((half)0.5 * detailCoords_37.yz)
   / 
    abs(detailCoords_37.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_52;
  uv_52 = float2(uv_36);
  float2 uvCont_53;
  float2 tmpvar_54;
  float tmpvar_55;
  tmpvar_55 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_54 = abs((uv_52 - tmpvar_55));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  float4 tmpvar_56;
  tmpvar_56.xy = dfdx(uvCont_53);
  tmpvar_56.zw = dfdy(uvCont_53);
  half4 tmpvar_57;
  tmpvar_57 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_36), gradient2d((float2)(tmpvar_56.xy), (float2)(tmpvar_56.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  citydarkoverlaydetail_3.xyz = tmpvar_58.xyz;
  half2 uv_59;
  half3 detailCoords_60;
  half s_61;
  half nylerp_62;
  half zxlerp_63;
  float3 tmpvar_64;
  tmpvar_64 = abs(tmpvar_41);
  float tmpvar_65;
  tmpvar_65 = float((tmpvar_64.z >= tmpvar_64.x));
  zxlerp_63 = half(tmpvar_65);
  float tmpvar_66;
  tmpvar_66 = float((max (tmpvar_64.x, tmpvar_64.z) >= tmpvar_64.y));
  nylerp_62 = half(tmpvar_66);
  float tmpvar_67;
  tmpvar_67 = mix (tmpvar_41.x, tmpvar_41.z, (float)zxlerp_63);
  s_61 = half(tmpvar_67);
  float tmpvar_68;
  tmpvar_68 = sign(mix (tmpvar_41.y, (float)s_61, (float)nylerp_62));
  s_61 = half(tmpvar_68);
  half3 tmpvar_69;
  tmpvar_69.xz = half2(float2(1.0, -1.0));
  tmpvar_69.y = -(s_61);
  half3 tmpvar_70;
  tmpvar_70.xz = half2(float2(1.0, -1.0));
  tmpvar_70.y = s_61;
  float3 tmpvar_71;
  tmpvar_71 = mix (((float3)tmpvar_69 * tmpvar_41.xzy), ((float3)tmpvar_70 * tmpvar_41.zxy), (float3)half3(zxlerp_63));
  detailCoords_60 = half3(tmpvar_71);
  half3 tmpvar_72;
  tmpvar_72.xy = half2(float2(1.0, 1.0));
  tmpvar_72.z = s_61;
  float3 tmpvar_73;
  tmpvar_73 = mix (((float3)tmpvar_72 * tmpvar_41.yxz), (float3)detailCoords_60, (float3)half3(nylerp_62));
  detailCoords_60 = half3(tmpvar_73);
  uv_59 = half2(((float2)((
    ((half)0.5 * detailCoords_60.yz)
   / 
    abs(detailCoords_60.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_74;
  uv_74 = float2(uv_59);
  float2 uvCont_75;
  float2 tmpvar_76;
  tmpvar_76 = abs((uv_74 - tmpvar_55));
  uvCont_75.x = max (tmpvar_76.x, tmpvar_76.y);
  uvCont_75.y = min (tmpvar_76.x, tmpvar_76.y);
  float4 tmpvar_77;
  tmpvar_77.xy = dfdx(uvCont_75);
  tmpvar_77.zw = dfdy(uvCont_75);
  half4 tmpvar_78;
  tmpvar_78 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_59), gradient2d((float2)(tmpvar_77.xy), (float2)(tmpvar_77.zw)));
  half4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citylightoverlaydetail_2.xyz = tmpvar_79.xyz;
  cityoverlay_4.w = (tmpvar_35.w * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_58.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_79.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_79.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_80;
  tmpvar_80 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_81;
  lightDir_81 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_82;
  viewDir_82 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_83;
  atten_83 = tmpvar_80;
  half4 c_84;
  half3 tmpvar_85;
  tmpvar_85 = normalize(lightDir_81);
  lightDir_81 = tmpvar_85;
  half3 tmpvar_86;
  tmpvar_86 = normalize(viewDir_82);
  viewDir_82 = tmpvar_86;
  half3 tmpvar_87;
  tmpvar_87 = normalize(normT_5);
  half tmpvar_88;
  tmpvar_88 = dot (tmpvar_87, tmpvar_85);
  float tmpvar_89;
  half tmpvar_90;
  tmpvar_90 = clamp (dot (normalize(
    (tmpvar_85 + tmpvar_86)
  ), tmpvar_87), (half)0.0, (half)1.0);
  tmpvar_89 = float(tmpvar_90);
  float tmpvar_91;
  tmpvar_91 = (pow (tmpvar_89, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_84.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_88) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_91)) * (float)(atten_83 * (half)2.0)));
  c_84.w = (tmpvar_88 * (atten_83 * (half)2.0));
  float3 tmpvar_92;
  tmpvar_92 = normalize(_mtl_u._SunDir);
  half3 lightDir_93;
  lightDir_93 = half3(tmpvar_92);
  half3 normal_94;
  normal_94 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_95;
  tmpvar_95 = dot (normal_94, lightDir_93);
  color_6 = (c_84 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_95))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_95))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_96;
  tmpvar_96 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_96;
  tmpvar_1 = tmpvar_96;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 111 math, 15 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
"ps_3_0
def c3, -2, 1.57079637, 0.159154937, 0.5
def c4, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c5, 0.999866009, 0, 1, 0.159154937
def c6, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c7, -2, 3.14159274, 0.318309873, 1
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c5.y, c5.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c4.x, c4.y
mad r2.x, r1.w, r2.x, c4.z
mad r2.x, r1.w, r2.x, c4.w
mad r1.w, r1.w, r2.x, c5.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c3.x, c3.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c9.xyxy, c9
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c5.z, c5.y
cmp r1.x, r1.x, c5.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c5.w
mad r2.x, r0.x, c3.z, c3.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c6.x, c6.y
mad r0.x, r0.x, r0_abs.y, c6.z
mad r0.x, r0.x, r0_abs.y, c6.w
add r1.z, -r0_abs.y, c5.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c7.x, c7.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c7.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s0, r1, r3
mul_pp r1.zw, r4.xyxy, c0.xyxy
add_pp r0.x, r1.w, r1.z
mad_pp r0.x, r4.z, c0.z, r0.x
mad_pp r0.x, r4.w, c0.w, r0.x
texldd_pp r4, r2, s1, r1, r3
texldd_pp r1, r2, s2, r1, r3
mad_pp r1.xy, r1.wyzw, -c7.x, -c7.w
add r1.w, r4.w, -c5.z
cmp_pp r1.w, r1.w, c5.y, c5.z
mul_pp r0.x, r0.x, r1.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c5.y, c5.z
cmp r2.y, r2.y, -c5.y, -c5.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c8.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c3.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c3.w
mul_pp r0.yz, r0, c2.x
mov r0.w, c3.w
mad r2.xy, c2.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s3, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s4, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c5.y
add_pp r0.x, -r0.x, c5.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
add_pp r0.x, r0.x, r0.x
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c5.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c5.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 106 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_BumpMap] 2D 2
SetTexture 2 [_CityOverlayTex] 2D 0
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:afabafaa
eefieceddcfefccomdpgdmhhldaibodfmbnlinlhabaaaaaajabaaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchaapaaaa
eaaaaaaanmadaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaadiaaaaai
mcaabaaaabaaaaaaagaebaaaaeaaaaaaagiecaaaaaaaaaaabgaaaaaaaaaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaakecaabaaa
abaaaaaackaabaaaaeaaaaaackiacaaaaaaaaaaabgaaaaaackaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaadkaabaaaaeaaaaaadkiacaaaaaaaaaaabgaaaaaa
ckaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaabnaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaiadpdhaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaackbabaaaacaaaaaaakaabaaa
aaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
bkbabaiaebaaaaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaabaaaaaadeaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bnaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaahicaabaaaabaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
aaaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaaaaaaaaadgaaaaagccaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadiaaaaahhcaabaaaaeaaaaaaogajbaaaaaaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
dcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaalganbaaaaaaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaaeaaaaaakgakbaaaabaaaaaaegacbaaa
afaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaagabbaiaebaaaaaa
adaaaaaajgahbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
jgahbaaaaaaaaaaaagabbaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaa
abaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaakgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaai
dcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaak
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaa
blaaaaaadcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
ddaaaaajecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaalaaaaafbcaabaaaadaaaaaabkaabaaaabaaaaaaamaaaaafbcaabaaa
aeaaaaaabkaabaaaabaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaa
egaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
ccaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaaapaaaaahbcaabaaaabaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahncaabaaaabaaaaaaagaabaaa
abaaaaaaagajbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaagaabaaaacaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaa
abaaaaaaigadbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaajecaabaaaabaaaaaajgihcaaa
aaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaakgakbaaaabaaaaaajgihcaaa
aaaaaaaabkaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaa
acaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaafaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaa
egaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaafaaaaaaegaobaaa
abaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 305 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(0)]], sampler _mtlsmp__CityOverlayTex [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_28;
  float tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_32);
  tmpvar_33.zw = dfdy(uvCont_32);
  half4 tmpvar_34;
  tmpvar_34 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_28), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half tmpvar_36;
  half4 v_37;
  v_37 = (tmpvar_35 * _mtl_u.alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  half4 tmpvar_38;
  tmpvar_38.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  half2 uv_39;
  half3 detailCoords_40;
  half s_41;
  half nylerp_42;
  half zxlerp_43;
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, (float)zxlerp_43);
  s_41 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, (float)s_41, (float)nylerp_42));
  s_41 = half(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, -1.0));
  tmpvar_50.y = -(s_41);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, -1.0));
  tmpvar_51.y = s_41;
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_50 * tmpvar_44.xzy), ((float3)tmpvar_51 * tmpvar_44.zxy), (float3)half3(zxlerp_43));
  detailCoords_40 = half3(tmpvar_52);
  half3 tmpvar_53;
  tmpvar_53.xy = half2(float2(1.0, 1.0));
  tmpvar_53.z = s_41;
  float3 tmpvar_54;
  tmpvar_54 = mix (((float3)tmpvar_53 * tmpvar_44.yxz), (float3)detailCoords_40, (float3)half3(nylerp_42));
  detailCoords_40 = half3(tmpvar_54);
  uv_39 = half2(((float2)((
    ((half)0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_55;
  uv_55 = float2(uv_39);
  float2 uvCont_56;
  float2 tmpvar_57;
  float tmpvar_58;
  tmpvar_58 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  float4 tmpvar_59;
  tmpvar_59.xy = dfdx(uvCont_56);
  tmpvar_59.zw = dfdy(uvCont_56);
  half4 tmpvar_60;
  tmpvar_60 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_39), gradient2d((float2)(tmpvar_59.xy), (float2)(tmpvar_59.zw)));
  half4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  half2 uv_62;
  half3 detailCoords_63;
  half s_64;
  half nylerp_65;
  half zxlerp_66;
  float3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = half(tmpvar_68);
  float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = half(tmpvar_69);
  float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, (float)zxlerp_66);
  s_64 = half(tmpvar_70);
  float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, (float)s_64, (float)nylerp_65));
  s_64 = half(tmpvar_71);
  half3 tmpvar_72;
  tmpvar_72.xz = half2(float2(1.0, -1.0));
  tmpvar_72.y = -(s_64);
  half3 tmpvar_73;
  tmpvar_73.xz = half2(float2(1.0, -1.0));
  tmpvar_73.y = s_64;
  float3 tmpvar_74;
  tmpvar_74 = mix (((float3)tmpvar_72 * tmpvar_44.xzy), ((float3)tmpvar_73 * tmpvar_44.zxy), (float3)half3(zxlerp_66));
  detailCoords_63 = half3(tmpvar_74);
  half3 tmpvar_75;
  tmpvar_75.xy = half2(float2(1.0, 1.0));
  tmpvar_75.z = s_64;
  float3 tmpvar_76;
  tmpvar_76 = mix (((float3)tmpvar_75 * tmpvar_44.yxz), (float3)detailCoords_63, (float3)half3(nylerp_65));
  detailCoords_63 = half3(tmpvar_76);
  uv_62 = half2(((float2)((
    ((half)0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_77;
  uv_77 = float2(uv_62);
  float2 uvCont_78;
  float2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  float4 tmpvar_80;
  tmpvar_80.xy = dfdx(uvCont_78);
  tmpvar_80.zw = dfdy(uvCont_78);
  half4 tmpvar_81;
  tmpvar_81 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_62), gradient2d((float2)(tmpvar_80.xy), (float2)(tmpvar_80.zw)));
  half4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_83;
  lightDir_83 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_84;
  viewDir_84 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_85;
  half3 tmpvar_86;
  tmpvar_86 = normalize(lightDir_83);
  lightDir_83 = tmpvar_86;
  half3 tmpvar_87;
  tmpvar_87 = normalize(viewDir_84);
  viewDir_84 = tmpvar_87;
  half3 tmpvar_88;
  tmpvar_88 = normalize(normT_5);
  half tmpvar_89;
  tmpvar_89 = dot (tmpvar_88, tmpvar_86);
  float tmpvar_90;
  half tmpvar_91;
  tmpvar_91 = clamp (dot (normalize(
    (tmpvar_86 + tmpvar_87)
  ), tmpvar_88), (half)0.0, (half)1.0);
  tmpvar_90 = float(tmpvar_91);
  float tmpvar_92;
  tmpvar_92 = (pow (tmpvar_90, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_85.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_89) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_92)) * 2.0));
  c_85.w = (tmpvar_89 * (half)2.0);
  float3 tmpvar_93;
  tmpvar_93 = normalize(_mtl_u._SunDir);
  half3 lightDir_94;
  lightDir_94 = half3(tmpvar_93);
  half3 normal_95;
  normal_95 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_96;
  tmpvar_96 = dot (normal_95, lightDir_94);
  color_6 = (c_85 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_96))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_96))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_97;
  tmpvar_97 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_97;
  tmpvar_1 = tmpvar_97;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 112 math, 16 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
"ps_3_0
def c3, -2, 1.57079637, 0.159154937, 0.5
def c4, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c5, 0.999866009, 0, 1, 0.159154937
def c6, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c7, -2, 3.14159274, 0.318309873, 1
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c5.y, c5.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c4.x, c4.y
mad r2.x, r1.w, r2.x, c4.z
mad r2.x, r1.w, r2.x, c4.w
mad r1.w, r1.w, r2.x, c5.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c3.x, c3.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c9.xyxy, c9
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c5.z, c5.y
cmp r1.x, r1.x, c5.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c5.w
mad r2.x, r0.x, c3.z, c3.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c6.x, c6.y
mad r0.x, r0.x, r0_abs.y, c6.z
mad r0.x, r0.x, r0_abs.y, c6.w
add r1.z, -r0_abs.y, c5.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c7.x, c7.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c7.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s1, r1, r3
mul_pp r1.zw, r4.xyxy, c0.xyxy
add_pp r0.x, r1.w, r1.z
mad_pp r0.x, r4.z, c0.z, r0.x
mad_pp r0.x, r4.w, c0.w, r0.x
texldd_pp r4, r2, s2, r1, r3
texldd_pp r1, r2, s3, r1, r3
mad_pp r1.xy, r1.wyzw, -c7.x, -c7.w
add r1.w, r4.w, -c5.z
cmp_pp r1.w, r1.w, c5.y, c5.z
mul_pp r0.x, r0.x, r1.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c5.y, c5.z
cmp r2.y, r2.y, -c5.y, -c5.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c8.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c3.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c3.w
mul_pp r0.yz, r0, c2.x
mov r0.w, c3.w
mad r2.xy, c2.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s4, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s5, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c5.y
add_pp r0.x, -r0.x, c5.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.x, r1.x, r0.x, c5.y
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c5.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c5.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 107 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_BumpMap] 2D 3
SetTexture 2 [_CityOverlayTex] 2D 1
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 4 [_CityLightOverlayDetailTex] 2D 5
SetTexture 5 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:agabagaa
eefiecednjjpdgbkfanopgipjbadooeaggfkdlkcabaaaaaababbaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcniapaaaaeaaaaaaapgadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
lcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaadiaaaaai
mcaabaaaabaaaaaaagaebaaaaeaaaaaaagiecaaaaaaaaaaabgaaaaaaaaaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaakecaabaaa
abaaaaaackaabaaaaeaaaaaackiacaaaaaaaaaaabgaaaaaackaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaadkaabaaaaeaaaaaadkiacaaaaaaaaaaabgaaaaaa
ckaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaabnaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaiadpdhaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaackbabaaaacaaaaaaakaabaaa
aaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
bkbabaiaebaaaaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaabaaaaaadeaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bnaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaahicaabaaaabaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
aaaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaaaaaaaaadgaaaaagccaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadiaaaaahhcaabaaaaeaaaaaaogajbaaaaaaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
dcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaalganbaaaaaaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaaeaaaaaakgakbaaaabaaaaaaegacbaaa
afaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaagabbaiaebaaaaaa
adaaaaaajgahbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
jgahbaaaaaaaaaaaagabbaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaa
abaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaakgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaai
dcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaak
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaa
blaaaaaadcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
ddaaaaajecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaalaaaaafbcaabaaaadaaaaaabkaabaaaabaaaaaaamaaaaafbcaabaaa
aeaaaaaabkaabaaaabaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaa
egaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
ccaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaaapaaaaahbcaabaaaabaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaaakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahncaabaaaabaaaaaaagaabaaa
abaaaaaaagajbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaagaabaaaacaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaa
abaaaaaaigadbaaaabaaaaaaegacbaaaacaaaaaaaoaaaaahmcaabaaaabaaaaaa
agbebaaaafaaaaaapgbpbaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaogakbaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaapaaaaahbcaabaaaabaaaaaa
agaabaaaacaaaaaaagaabaaaabaaaaaabaaaaaajecaabaaaabaaaaaajgihcaaa
aaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaakgakbaaaabaaaaaajgihcaaa
aaaaaaaabkaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaa
acaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaafaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaa
egaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaafaaaaaaegaobaaa
abaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 307 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "MAP_TYPE_1" "ALPHAMAP_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(1)]], sampler _mtlsmp__CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_28;
  float tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (min (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0) / max (abs(
    (tmpvar_27.x / tmpvar_27.z)
  ), 1.0));
  float tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  tmpvar_31 = (((
    ((((
      ((((-0.01213232 * tmpvar_31) + 0.05368138) * tmpvar_31) - 0.1173503)
     * tmpvar_31) + 0.1938925) * tmpvar_31) - 0.3326756)
   * tmpvar_31) + 0.9999793) * tmpvar_30);
  tmpvar_31 = (tmpvar_31 + (float(
    (abs((tmpvar_27.x / tmpvar_27.z)) > 1.0)
  ) * (
    (tmpvar_31 * -2.0)
   + 1.570796)));
  tmpvar_29 = (tmpvar_31 * sign((tmpvar_27.x / tmpvar_27.z)));
  if ((abs(tmpvar_27.z) > (1e-08 * abs(tmpvar_27.x)))) {
    if ((tmpvar_27.z < 0.0)) {
      if ((tmpvar_27.x >= 0.0)) {
        tmpvar_29 += 3.141593;
      } else {
        tmpvar_29 = (tmpvar_29 - 3.141593);
      };
    };
  } else {
    tmpvar_29 = (sign(tmpvar_27.x) * 1.570796);
  };
  uv_28.x = (0.5 + (0.1591549 * tmpvar_29));
  uv_28.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_27.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_27.y)
    )) * (1.570796 + (
      abs(tmpvar_27.y)
     * 
      (-0.2146018 + (abs(tmpvar_27.y) * (0.08656672 + (
        abs(tmpvar_27.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_32;
  uvCont_32.y = uv_28.y;
  uvCont_32.x = abs((uv_28.x - 0.5));
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_32);
  tmpvar_33.zw = dfdy(uvCont_32);
  half4 tmpvar_34;
  tmpvar_34 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_28), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half tmpvar_36;
  half4 v_37;
  v_37 = (tmpvar_35 * _mtl_u.alphaMask1);
  tmpvar_36 = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  half4 tmpvar_38;
  tmpvar_38.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_38.w = tmpvar_36;
  cityoverlay_4.xyz = tmpvar_38.xyz;
  half2 uv_39;
  half3 detailCoords_40;
  half s_41;
  half nylerp_42;
  half zxlerp_43;
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, (float)zxlerp_43);
  s_41 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, (float)s_41, (float)nylerp_42));
  s_41 = half(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, -1.0));
  tmpvar_50.y = -(s_41);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, -1.0));
  tmpvar_51.y = s_41;
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_50 * tmpvar_44.xzy), ((float3)tmpvar_51 * tmpvar_44.zxy), (float3)half3(zxlerp_43));
  detailCoords_40 = half3(tmpvar_52);
  half3 tmpvar_53;
  tmpvar_53.xy = half2(float2(1.0, 1.0));
  tmpvar_53.z = s_41;
  float3 tmpvar_54;
  tmpvar_54 = mix (((float3)tmpvar_53 * tmpvar_44.yxz), (float3)detailCoords_40, (float3)half3(nylerp_42));
  detailCoords_40 = half3(tmpvar_54);
  uv_39 = half2(((float2)((
    ((half)0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_55;
  uv_55 = float2(uv_39);
  float2 uvCont_56;
  float2 tmpvar_57;
  float tmpvar_58;
  tmpvar_58 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_57 = abs((uv_55 - tmpvar_58));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  float4 tmpvar_59;
  tmpvar_59.xy = dfdx(uvCont_56);
  tmpvar_59.zw = dfdy(uvCont_56);
  half4 tmpvar_60;
  tmpvar_60 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_39), gradient2d((float2)(tmpvar_59.xy), (float2)(tmpvar_59.zw)));
  half4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  citydarkoverlaydetail_3.xyz = tmpvar_61.xyz;
  half2 uv_62;
  half3 detailCoords_63;
  half s_64;
  half nylerp_65;
  half zxlerp_66;
  float3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_44);
  float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = half(tmpvar_68);
  float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = half(tmpvar_69);
  float tmpvar_70;
  tmpvar_70 = mix (tmpvar_44.x, tmpvar_44.z, (float)zxlerp_66);
  s_64 = half(tmpvar_70);
  float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_44.y, (float)s_64, (float)nylerp_65));
  s_64 = half(tmpvar_71);
  half3 tmpvar_72;
  tmpvar_72.xz = half2(float2(1.0, -1.0));
  tmpvar_72.y = -(s_64);
  half3 tmpvar_73;
  tmpvar_73.xz = half2(float2(1.0, -1.0));
  tmpvar_73.y = s_64;
  float3 tmpvar_74;
  tmpvar_74 = mix (((float3)tmpvar_72 * tmpvar_44.xzy), ((float3)tmpvar_73 * tmpvar_44.zxy), (float3)half3(zxlerp_66));
  detailCoords_63 = half3(tmpvar_74);
  half3 tmpvar_75;
  tmpvar_75.xy = half2(float2(1.0, 1.0));
  tmpvar_75.z = s_64;
  float3 tmpvar_76;
  tmpvar_76 = mix (((float3)tmpvar_75 * tmpvar_44.yxz), (float3)detailCoords_63, (float3)half3(nylerp_65));
  detailCoords_63 = half3(tmpvar_76);
  uv_62 = half2(((float2)((
    ((half)0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_77;
  uv_77 = float2(uv_62);
  float2 uvCont_78;
  float2 tmpvar_79;
  tmpvar_79 = abs((uv_77 - tmpvar_58));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  float4 tmpvar_80;
  tmpvar_80.xy = dfdx(uvCont_78);
  tmpvar_80.zw = dfdy(uvCont_78);
  half4 tmpvar_81;
  tmpvar_81 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_62), gradient2d((float2)(tmpvar_80.xy), (float2)(tmpvar_80.zw)));
  half4 tmpvar_82;
  tmpvar_82 = tmpvar_81;
  citylightoverlaydetail_2.xyz = tmpvar_82.xyz;
  cityoverlay_4.w = (tmpvar_36 * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_61.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_82.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_82.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_83;
  tmpvar_83 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_84;
  lightDir_84 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_85;
  viewDir_85 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_86;
  atten_86 = tmpvar_83;
  half4 c_87;
  half3 tmpvar_88;
  tmpvar_88 = normalize(lightDir_84);
  lightDir_84 = tmpvar_88;
  half3 tmpvar_89;
  tmpvar_89 = normalize(viewDir_85);
  viewDir_85 = tmpvar_89;
  half3 tmpvar_90;
  tmpvar_90 = normalize(normT_5);
  half tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, tmpvar_88);
  float tmpvar_92;
  half tmpvar_93;
  tmpvar_93 = clamp (dot (normalize(
    (tmpvar_88 + tmpvar_89)
  ), tmpvar_90), (half)0.0, (half)1.0);
  tmpvar_92 = float(tmpvar_93);
  float tmpvar_94;
  tmpvar_94 = (pow (tmpvar_92, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_87.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_91) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_94)) * (float)(atten_86 * (half)2.0)));
  c_87.w = (tmpvar_91 * (atten_86 * (half)2.0));
  float3 tmpvar_95;
  tmpvar_95 = normalize(_mtl_u._SunDir);
  half3 lightDir_96;
  lightDir_96 = half3(tmpvar_95);
  half3 normal_97;
  normal_97 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_98;
  tmpvar_98 = dot (normal_97, lightDir_96);
  color_6 = (c_87 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_98))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_98))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_99;
  tmpvar_99 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_99;
  tmpvar_1 = tmpvar_99;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 106 math, 13 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [cube_CityOverlayTex] CUBE 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
"ps_3_0
def c2, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c3, 0.999866009, 0, 1, 0.159154937
def c4, -2, 1.57079637, 0.159154937, 0.5
def c5, -2, 3.14159274, 0.318309873, 1
def c6, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_cube s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c3.y, c3.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c2.x, c2.y
mad r2.x, r1.w, r2.x, c2.z
mad r2.x, r1.w, r2.x, c2.w
mad r1.w, r1.w, r2.x, c3.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c4.x, c4.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c8.xyxy, c8
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c3.z, c3.y
cmp r1.x, r1.x, c3.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c3.w
mad r2.x, r0.x, c4.z, c4.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c6.x, c6.y
mad r0.x, r0.x, r0_abs.y, c6.z
mad r0.x, r0.x, r0_abs.y, c6.w
add r1.z, -r0_abs.y, c3.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c5.x, c5.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c5.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s1, r1, r3
texldd_pp r1, r2, s2, r1, r3
mad_pp r1.xy, r1.wyzw, -c5.x, -c5.w
add r0.x, r4.w, -c3.z
texld_pp r2, r0.zyww, s0
cmp_pp r0.x, r0.x, c3.y, r2.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c3.y, c3.z
cmp r2.y, r2.y, -c3.y, -c3.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c7.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c4.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c4.w
mul_pp r0.yz, r0, c1.x
mov r0.w, c4.w
mad r2.xy, c1.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s3, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s4, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c3.y
add_pp r0.x, -r0.x, c3.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
add_pp r0.x, r0.x, r0.x
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c3.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c3.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 102 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_BumpMap] 2D 2
SetTexture 2 [cube_CityOverlayTex] CUBE 0
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:afabafaa
eefieceddahjdegmmcbbokjbcmkgphpinpkbbggbabaaaaaapeapaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcneaoaaaa
eaaaaaaalfadaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafidaaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaabnaaaaahicaabaaaabaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaiadpdhaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaabeaaaaaaaaaiadpefaaaaajpcaabaaaacaaaaaaggalbaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaacaaaaaa
akaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaajccaabaaaacaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
acaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaa
bkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaabkbabaiaebaaaaaaacaaaaaaakaabaaaaaaaaaaaakaabaaaacaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
bcaabaaaaaaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaaakaabaaaaaaaaaaadgaaaaagccaabaaaaeaaaaaabkaabaia
ebaaaaaaadaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaadiaaaaahhcaabaaaaeaaaaaaogajbaaaaaaaaaaaegacbaaa
aeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaalganbaaaaaaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaa
agajbaaaafaaaaaaagajbaaaaeaaaaaadcaaaaakocaabaaaacaaaaaaagaebaia
ebaaaaaaadaaaaaafgaobaaaaaaaaaaafgaobaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaajgahbaaaaaaaaaaaagabbaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaakgcaabaaa
aaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaa
aaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaa
aaaaaaaablaaaaaadcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaa
blaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
aaaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaa
aeaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaapaaaaahicaabaaa
abaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaadkaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
abaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahocaabaaaacaaaaaapgapbaaaabaaaaaaagbjbaaaaeaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaabaaaaaajgahbaaaacaaaaaaaaaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaajccaabaaaabaaaaaa
jgihcaaaaaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiocaabaaaabaaaaaafgafbaaaabaaaaaa
fgiocaaaaaaaaaaabkaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaa
jgahbaaaabaaaaaaaaaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
koehibdpdicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaacamb
ebcaaaafecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaiaebaaaaaa
aaaaaaaaegaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaaeaaaaaa
egaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 235 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [cube_CityOverlayTex] CUBE 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_CityOverlayTex [[texture(0)]], sampler _mtlsmp_cube_CityOverlayTex [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_28;
  tmpvar_28 = cube_CityOverlayTex.sample(_mtlsmp_cube_CityOverlayTex, (float3)(tmpvar_27));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  half2 uv_30;
  half3 detailCoords_31;
  half s_32;
  half nylerp_33;
  half zxlerp_34;
  float3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_34);
  s_32 = half(tmpvar_38);
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, (float)s_32, (float)nylerp_33));
  s_32 = half(tmpvar_39);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = -(s_32);
  half3 tmpvar_41;
  tmpvar_41.xz = half2(float2(1.0, -1.0));
  tmpvar_41.y = s_32;
  float3 tmpvar_42;
  tmpvar_42 = mix (((float3)tmpvar_40 * tmpvar_27.xzy), ((float3)tmpvar_41 * tmpvar_27.zxy), (float3)half3(zxlerp_34));
  detailCoords_31 = half3(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xy = half2(float2(1.0, 1.0));
  tmpvar_43.z = s_32;
  float3 tmpvar_44;
  tmpvar_44 = mix (((float3)tmpvar_43 * tmpvar_27.yxz), (float3)detailCoords_31, (float3)half3(nylerp_33));
  detailCoords_31 = half3(tmpvar_44);
  uv_30 = half2(((float2)((
    ((half)0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_45;
  uv_45 = float2(uv_30);
  float2 uvCont_46;
  float2 tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_49;
  tmpvar_49.xy = dfdx(uvCont_46);
  tmpvar_49.zw = dfdy(uvCont_46);
  half4 tmpvar_50;
  tmpvar_50 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_30), gradient2d((float2)(tmpvar_49.xy), (float2)(tmpvar_49.zw)));
  half4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  half2 uv_52;
  half3 detailCoords_53;
  half s_54;
  half nylerp_55;
  half zxlerp_56;
  float3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = half(tmpvar_58);
  float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_56);
  s_54 = half(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, (float)s_54, (float)nylerp_55));
  s_54 = half(tmpvar_61);
  half3 tmpvar_62;
  tmpvar_62.xz = half2(float2(1.0, -1.0));
  tmpvar_62.y = -(s_54);
  half3 tmpvar_63;
  tmpvar_63.xz = half2(float2(1.0, -1.0));
  tmpvar_63.y = s_54;
  float3 tmpvar_64;
  tmpvar_64 = mix (((float3)tmpvar_62 * tmpvar_27.xzy), ((float3)tmpvar_63 * tmpvar_27.zxy), (float3)half3(zxlerp_56));
  detailCoords_53 = half3(tmpvar_64);
  half3 tmpvar_65;
  tmpvar_65.xy = half2(float2(1.0, 1.0));
  tmpvar_65.z = s_54;
  float3 tmpvar_66;
  tmpvar_66 = mix (((float3)tmpvar_65 * tmpvar_27.yxz), (float3)detailCoords_53, (float3)half3(nylerp_55));
  detailCoords_53 = half3(tmpvar_66);
  uv_52 = half2(((float2)((
    ((half)0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_67;
  uv_67 = float2(uv_52);
  float2 uvCont_68;
  float2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  float4 tmpvar_70;
  tmpvar_70.xy = dfdx(uvCont_68);
  tmpvar_70.zw = dfdy(uvCont_68);
  half4 tmpvar_71;
  tmpvar_71 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_52), gradient2d((float2)(tmpvar_70.xy), (float2)(tmpvar_70.zw)));
  half4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_73;
  lightDir_73 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_74;
  viewDir_74 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_75;
  half3 tmpvar_76;
  tmpvar_76 = normalize(lightDir_73);
  lightDir_73 = tmpvar_76;
  half3 tmpvar_77;
  tmpvar_77 = normalize(viewDir_74);
  viewDir_74 = tmpvar_77;
  half3 tmpvar_78;
  tmpvar_78 = normalize(normT_5);
  half tmpvar_79;
  tmpvar_79 = dot (tmpvar_78, tmpvar_76);
  float tmpvar_80;
  half tmpvar_81;
  tmpvar_81 = clamp (dot (normalize(
    (tmpvar_76 + tmpvar_77)
  ), tmpvar_78), (half)0.0, (half)1.0);
  tmpvar_80 = float(tmpvar_81);
  float tmpvar_82;
  tmpvar_82 = (pow (tmpvar_80, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_75.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_79) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_82)) * 2.0));
  c_75.w = (tmpvar_79 * (half)2.0);
  float3 tmpvar_83;
  tmpvar_83 = normalize(_mtl_u._SunDir);
  half3 lightDir_84;
  lightDir_84 = half3(tmpvar_83);
  half3 normal_85;
  normal_85 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_86;
  tmpvar_86 = dot (normal_85, lightDir_84);
  color_6 = (c_75 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_86))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_86))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_87;
  tmpvar_1 = tmpvar_87;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 107 math, 14 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTex] CUBE 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
"ps_3_0
def c2, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c3, 0.999866009, 0, 1, 0.159154937
def c4, -2, 1.57079637, 0.159154937, 0.5
def c5, -2, 3.14159274, 0.318309873, 1
def c6, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_cube s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c3.y, c3.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c2.x, c2.y
mad r2.x, r1.w, r2.x, c2.z
mad r2.x, r1.w, r2.x, c2.w
mad r1.w, r1.w, r2.x, c3.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c4.x, c4.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c8.xyxy, c8
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c3.z, c3.y
cmp r1.x, r1.x, c3.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c3.w
mad r2.x, r0.x, c4.z, c4.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c6.x, c6.y
mad r0.x, r0.x, r0_abs.y, c6.z
mad r0.x, r0.x, r0_abs.y, c6.w
add r1.z, -r0_abs.y, c3.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c5.x, c5.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c5.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s2, r1, r3
texldd_pp r1, r2, s3, r1, r3
mad_pp r1.xy, r1.wyzw, -c5.x, -c5.w
add r0.x, r4.w, -c3.z
texld_pp r2, r0.zyww, s1
cmp_pp r0.x, r0.x, c3.y, r2.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c3.y, c3.z
cmp r2.y, r2.y, -c3.y, -c3.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c7.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c4.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c4.w
mul_pp r0.yz, r0, c1.x
mov r0.w, c4.w
mad r2.xy, c1.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s4, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s5, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c3.y
add_pp r0.x, -r0.x, c3.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.x, r1.x, r0.x, c3.y
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c3.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c3.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 103 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_BumpMap] 2D 3
SetTexture 2 [cube_CityOverlayTex] CUBE 1
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 4 [_CityLightOverlayDetailTex] 2D 5
SetTexture 5 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:agabagaa
eefiecedojifogehikagchjlgckpdkebiaajjcgnabaaaaaahebaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmapaaaaeaaaaaaampadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafidaaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
lcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaabnaaaaahicaabaaaabaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaiadpdhaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaabeaaaaaaaaaiadpefaaaaajpcaabaaaacaaaaaaggalbaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaacaaaaaa
akaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaajccaabaaaacaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
acaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaa
bkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaabkbabaiaebaaaaaaacaaaaaaakaabaaaaaaaaaaaakaabaaaacaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
bcaabaaaaaaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaaakaabaaaaaaaaaaadgaaaaagccaabaaaaeaaaaaabkaabaia
ebaaaaaaadaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaadiaaaaahhcaabaaaaeaaaaaaogajbaaaaaaaaaaaegacbaaa
aeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaalganbaaaaaaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaa
agajbaaaafaaaaaaagajbaaaaeaaaaaadcaaaaakocaabaaaacaaaaaaagaebaia
ebaaaaaaadaaaaaafgaobaaaaaaaaaaafgaobaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaajgahbaaaaaaaaaaaagabbaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaakgcaabaaa
aaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaa
aaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaa
aaaaaaaablaaaaaadcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaa
blaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
aaaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaa
aeaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaapaaaaahicaabaaa
abaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaadkaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaadkaabaaa
abaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahocaabaaaacaaaaaapgapbaaaabaaaaaaagbjbaaaaeaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaabaaaaaajgahbaaaacaaaaaaaoaaaaahgcaabaaa
abaaaaaaagbbbaaaafaaaaaapgbpbaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
jgafbaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaapaaaaahbcaabaaa
abaaaaaaagaabaaaadaaaaaaagaabaaaabaaaaaabaaaaaajccaabaaaabaaaaaa
jgihcaaaaaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiocaabaaaabaaaaaafgafbaaaabaaaaaa
fgiocaaaaaaaaaaabkaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaa
jgahbaaaabaaaaaaaaaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
koehibdpdicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaacamb
ebcaaaafecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaiaebaaaaaa
aaaaaaaaegaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaaeaaaaaa
egaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 237 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTex] CUBE 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texturecube<half> cube_CityOverlayTex [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_28;
  tmpvar_28 = cube_CityOverlayTex.sample(_mtlsmp_cube_CityOverlayTex, (float3)(tmpvar_27));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  cityoverlay_4.xyz = tmpvar_29.xyz;
  half2 uv_30;
  half3 detailCoords_31;
  half s_32;
  half nylerp_33;
  half zxlerp_34;
  float3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_27);
  float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = float((max (tmpvar_35.x, tmpvar_35.z) >= tmpvar_35.y));
  nylerp_33 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_34);
  s_32 = half(tmpvar_38);
  float tmpvar_39;
  tmpvar_39 = sign(mix (tmpvar_27.y, (float)s_32, (float)nylerp_33));
  s_32 = half(tmpvar_39);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = -(s_32);
  half3 tmpvar_41;
  tmpvar_41.xz = half2(float2(1.0, -1.0));
  tmpvar_41.y = s_32;
  float3 tmpvar_42;
  tmpvar_42 = mix (((float3)tmpvar_40 * tmpvar_27.xzy), ((float3)tmpvar_41 * tmpvar_27.zxy), (float3)half3(zxlerp_34));
  detailCoords_31 = half3(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xy = half2(float2(1.0, 1.0));
  tmpvar_43.z = s_32;
  float3 tmpvar_44;
  tmpvar_44 = mix (((float3)tmpvar_43 * tmpvar_27.yxz), (float3)detailCoords_31, (float3)half3(nylerp_33));
  detailCoords_31 = half3(tmpvar_44);
  uv_30 = half2(((float2)((
    ((half)0.5 * detailCoords_31.yz)
   / 
    abs(detailCoords_31.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_45;
  uv_45 = float2(uv_30);
  float2 uvCont_46;
  float2 tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_47 = abs((uv_45 - tmpvar_48));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_49;
  tmpvar_49.xy = dfdx(uvCont_46);
  tmpvar_49.zw = dfdy(uvCont_46);
  half4 tmpvar_50;
  tmpvar_50 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_30), gradient2d((float2)(tmpvar_49.xy), (float2)(tmpvar_49.zw)));
  half4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  citydarkoverlaydetail_3.xyz = tmpvar_51.xyz;
  half2 uv_52;
  half3 detailCoords_53;
  half s_54;
  half nylerp_55;
  half zxlerp_56;
  float3 tmpvar_57;
  tmpvar_57 = abs(tmpvar_27);
  float tmpvar_58;
  tmpvar_58 = float((tmpvar_57.z >= tmpvar_57.x));
  zxlerp_56 = half(tmpvar_58);
  float tmpvar_59;
  tmpvar_59 = float((max (tmpvar_57.x, tmpvar_57.z) >= tmpvar_57.y));
  nylerp_55 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_56);
  s_54 = half(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = sign(mix (tmpvar_27.y, (float)s_54, (float)nylerp_55));
  s_54 = half(tmpvar_61);
  half3 tmpvar_62;
  tmpvar_62.xz = half2(float2(1.0, -1.0));
  tmpvar_62.y = -(s_54);
  half3 tmpvar_63;
  tmpvar_63.xz = half2(float2(1.0, -1.0));
  tmpvar_63.y = s_54;
  float3 tmpvar_64;
  tmpvar_64 = mix (((float3)tmpvar_62 * tmpvar_27.xzy), ((float3)tmpvar_63 * tmpvar_27.zxy), (float3)half3(zxlerp_56));
  detailCoords_53 = half3(tmpvar_64);
  half3 tmpvar_65;
  tmpvar_65.xy = half2(float2(1.0, 1.0));
  tmpvar_65.z = s_54;
  float3 tmpvar_66;
  tmpvar_66 = mix (((float3)tmpvar_65 * tmpvar_27.yxz), (float3)detailCoords_53, (float3)half3(nylerp_55));
  detailCoords_53 = half3(tmpvar_66);
  uv_52 = half2(((float2)((
    ((half)0.5 * detailCoords_53.yz)
   / 
    abs(detailCoords_53.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_67;
  uv_67 = float2(uv_52);
  float2 uvCont_68;
  float2 tmpvar_69;
  tmpvar_69 = abs((uv_67 - tmpvar_48));
  uvCont_68.x = max (tmpvar_69.x, tmpvar_69.y);
  uvCont_68.y = min (tmpvar_69.x, tmpvar_69.y);
  float4 tmpvar_70;
  tmpvar_70.xy = dfdx(uvCont_68);
  tmpvar_70.zw = dfdy(uvCont_68);
  half4 tmpvar_71;
  tmpvar_71 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_52), gradient2d((float2)(tmpvar_70.xy), (float2)(tmpvar_70.zw)));
  half4 tmpvar_72;
  tmpvar_72 = tmpvar_71;
  citylightoverlaydetail_2.xyz = tmpvar_72.xyz;
  cityoverlay_4.w = (tmpvar_29.w * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_51.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_72.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_72.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_73;
  tmpvar_73 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_74;
  lightDir_74 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_75;
  viewDir_75 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_76;
  atten_76 = tmpvar_73;
  half4 c_77;
  half3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  half3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  half3 tmpvar_80;
  tmpvar_80 = normalize(normT_5);
  half tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  float tmpvar_82;
  half tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), (half)0.0, (half)1.0);
  tmpvar_82 = float(tmpvar_83);
  float tmpvar_84;
  tmpvar_84 = (pow (tmpvar_82, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_77.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_81) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_84)) * (float)(atten_76 * (half)2.0)));
  c_77.w = (tmpvar_81 * (atten_76 * (half)2.0));
  float3 tmpvar_85;
  tmpvar_85 = normalize(_mtl_u._SunDir);
  half3 lightDir_86;
  lightDir_86 = half3(tmpvar_85);
  half3 normal_87;
  normal_87 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  color_6 = (c_77 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_88))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_88))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 111 math, 13 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [cube_CityOverlayTex] CUBE 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
"ps_3_0
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -2, 1.57079637, 0.159154937, 0.5
def c6, -2, 3.14159274, 0.318309873, 1
def c7, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_cube s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c4.y, c4.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c3.x, c3.y
mad r2.x, r1.w, r2.x, c3.z
mad r2.x, r1.w, r2.x, c3.w
mad r1.w, r1.w, r2.x, c4.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c5.x, c5.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c9.xyxy, c9
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c4.z, c4.y
cmp r1.x, r1.x, c4.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c4.w
mad r2.x, r0.x, c5.z, c5.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c7.x, c7.y
mad r0.x, r0.x, r0_abs.y, c7.z
mad r0.x, r0.x, r0_abs.y, c7.w
add r1.z, -r0_abs.y, c4.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c6.x, c6.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c6.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s1, r1, r3
texldd_pp r1, r2, s2, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
add r0.x, r4.w, -c4.z
cmp_pp r0.x, r0.x, c4.y, c4.z
texld_pp r2, r0.zyww, s0
mul_pp r2.xy, r2, c0
add_pp r1.w, r2.y, r2.x
mad_pp r1.w, r2.z, c0.z, r1.w
mad_pp r1.w, r2.w, c0.w, r1.w
mul_pp r0.x, r0.x, r1.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c4.y, c4.z
cmp r2.y, r2.y, -c4.y, -c4.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c8.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c5.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c5.w
mul_pp r0.yz, r0, c2.x
mov r0.w, c5.w
mad r2.xy, c2.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s3, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s4, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c4.y
add_pp r0.x, -r0.x, c4.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
add_pp r0.x, r0.x, r0.x
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c4.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 106 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_BumpMap] 2D 2
SetTexture 2 [cube_CityOverlayTex] CUBE 0
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:afabafaa
eefiecednngonebonnhmcpcpgcjcgdceobbajpndabaaaaaaiabaaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgaapaaaa
eaaaaaaaniadaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafidaaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaabnaaaaahicaabaaaabaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaiadpdhaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaabeaaaaaaaaaiadpefaaaaajpcaabaaaacaaaaaaggalbaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaaaaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaa
acaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaakbcaabaaaacaaaaaackaabaaaacaaaaaa
ckiacaaaaaaaaaaabgaaaaaaakaabaaaacaaaaaadcaaaaakbcaabaaaacaaaaaa
dkaabaaaacaaaaaadkiacaaaaaaaaaaabgaaaaaaakaabaaaacaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadcaaaaakbcaabaaa
acaaaaaackbabaaaacaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaa
bnaaaaajccaabaaaacaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaaakaabaaa
aaaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaa
acaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaaacaaaaaa
akaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaaaaaaaaadgaaaaag
ccaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaifcaabaaaaeaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadiaaaaahhcaabaaaaeaaaaaa
ogajbaaaaaaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaa
adaaaaaalganbaaaaaaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajocaabaaa
acaaaaaafgafbaaaacaaaaaaagajbaaaafaaaaaaagajbaaaaeaaaaaadcaaaaak
ocaabaaaacaaaaaaagaebaiaebaaaaaaadaaaaaafgaobaaaaaaaaaaafgaobaaa
acaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaaaaaaaaaagabbaaaadaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaadcaaaaaomcaabaaaaaaaaaaa
agiacaiaebaaaaaaaaaaaaaablaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
dkaabaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaabaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahocaabaaaacaaaaaapgapbaaaabaaaaaa
agbjbaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaajgahbaaa
acaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaa
baaaaaajccaabaaaabaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaaaaaaaaaa
bkaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiocaabaaa
abaaaaaafgafbaaaabaaaaaafgiocaaaaaaaaaaabkaaaaaabaaaaaahccaabaaa
abaaaaaaegbcbaaaadaaaaaajgahbaaaabaaaaaaaaaaaaahecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadp
dicaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaeaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaaeaaaaaadcaaaaajpccabaaa
aaaaaaaapgapbaaaaeaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 240 math, 5 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [cube_CityOverlayTex] CUBE 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_CityOverlayTex [[texture(0)]], sampler _mtlsmp_cube_CityOverlayTex [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_28;
  tmpvar_28 = cube_CityOverlayTex.sample(_mtlsmp_cube_CityOverlayTex, (float3)(tmpvar_27));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half tmpvar_30;
  half4 v_31;
  v_31 = (tmpvar_29 * _mtl_u.alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  half4 tmpvar_32;
  tmpvar_32.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  half2 uv_33;
  half3 detailCoords_34;
  half s_35;
  half nylerp_36;
  half zxlerp_37;
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_37);
  s_35 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, (float)s_35, (float)nylerp_36));
  s_35 = half(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, -1.0));
  tmpvar_43.y = -(s_35);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, -1.0));
  tmpvar_44.y = s_35;
  float3 tmpvar_45;
  tmpvar_45 = mix (((float3)tmpvar_43 * tmpvar_27.xzy), ((float3)tmpvar_44 * tmpvar_27.zxy), (float3)half3(zxlerp_37));
  detailCoords_34 = half3(tmpvar_45);
  half3 tmpvar_46;
  tmpvar_46.xy = half2(float2(1.0, 1.0));
  tmpvar_46.z = s_35;
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_46 * tmpvar_27.yxz), (float3)detailCoords_34, (float3)half3(nylerp_36));
  detailCoords_34 = half3(tmpvar_47);
  uv_33 = half2(((float2)((
    ((half)0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_48;
  uv_48 = float2(uv_33);
  float2 uvCont_49;
  float2 tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  float4 tmpvar_52;
  tmpvar_52.xy = dfdx(uvCont_49);
  tmpvar_52.zw = dfdy(uvCont_49);
  half4 tmpvar_53;
  tmpvar_53 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_33), gradient2d((float2)(tmpvar_52.xy), (float2)(tmpvar_52.zw)));
  half4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  half2 uv_55;
  half3 detailCoords_56;
  half s_57;
  half nylerp_58;
  half zxlerp_59;
  float3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = half(tmpvar_61);
  float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = half(tmpvar_62);
  float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_59);
  s_57 = half(tmpvar_63);
  float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, (float)s_57, (float)nylerp_58));
  s_57 = half(tmpvar_64);
  half3 tmpvar_65;
  tmpvar_65.xz = half2(float2(1.0, -1.0));
  tmpvar_65.y = -(s_57);
  half3 tmpvar_66;
  tmpvar_66.xz = half2(float2(1.0, -1.0));
  tmpvar_66.y = s_57;
  float3 tmpvar_67;
  tmpvar_67 = mix (((float3)tmpvar_65 * tmpvar_27.xzy), ((float3)tmpvar_66 * tmpvar_27.zxy), (float3)half3(zxlerp_59));
  detailCoords_56 = half3(tmpvar_67);
  half3 tmpvar_68;
  tmpvar_68.xy = half2(float2(1.0, 1.0));
  tmpvar_68.z = s_57;
  float3 tmpvar_69;
  tmpvar_69 = mix (((float3)tmpvar_68 * tmpvar_27.yxz), (float3)detailCoords_56, (float3)half3(nylerp_58));
  detailCoords_56 = half3(tmpvar_69);
  uv_55 = half2(((float2)((
    ((half)0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_70;
  uv_70 = float2(uv_55);
  float2 uvCont_71;
  float2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  float4 tmpvar_73;
  tmpvar_73.xy = dfdx(uvCont_71);
  tmpvar_73.zw = dfdy(uvCont_71);
  half4 tmpvar_74;
  tmpvar_74 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_55), gradient2d((float2)(tmpvar_73.xy), (float2)(tmpvar_73.zw)));
  half4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_76;
  lightDir_76 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_77;
  viewDir_77 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_78;
  half3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_76);
  lightDir_76 = tmpvar_79;
  half3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_77);
  viewDir_77 = tmpvar_80;
  half3 tmpvar_81;
  tmpvar_81 = normalize(normT_5);
  half tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  float tmpvar_83;
  half tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), (half)0.0, (half)1.0);
  tmpvar_83 = float(tmpvar_84);
  float tmpvar_85;
  tmpvar_85 = (pow (tmpvar_83, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_78.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_82) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_85)) * 2.0));
  c_78.w = (tmpvar_82 * (half)2.0);
  float3 tmpvar_86;
  tmpvar_86 = normalize(_mtl_u._SunDir);
  half3 lightDir_87;
  lightDir_87 = half3(tmpvar_86);
  half3 normal_88;
  normal_88 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  color_6 = (c_78 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_89))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_89))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_90;
  tmpvar_1 = tmpvar_90;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 112 math, 14 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTex] CUBE 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
"ps_3_0
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -2, 1.57079637, 0.159154937, 0.5
def c6, -2, 3.14159274, 0.318309873, 1
def c7, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_cube s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c4.y, c4.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c3.x, c3.y
mad r2.x, r1.w, r2.x, c3.z
mad r2.x, r1.w, r2.x, c3.w
mad r1.w, r1.w, r2.x, c4.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c5.x, c5.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c9.xyxy, c9
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c4.z, c4.y
cmp r1.x, r1.x, c4.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c4.w
mad r2.x, r0.x, c5.z, c5.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c7.x, c7.y
mad r0.x, r0.x, r0_abs.y, c7.z
mad r0.x, r0.x, r0_abs.y, c7.w
add r1.z, -r0_abs.y, c4.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c6.x, c6.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c6.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s2, r1, r3
texldd_pp r1, r2, s3, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
add r0.x, r4.w, -c4.z
cmp_pp r0.x, r0.x, c4.y, c4.z
texld_pp r2, r0.zyww, s1
mul_pp r2.xy, r2, c0
add_pp r1.w, r2.y, r2.x
mad_pp r1.w, r2.z, c0.z, r1.w
mad_pp r1.w, r2.w, c0.w, r1.w
mul_pp r0.x, r0.x, r1.w
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c4.y, c4.z
cmp r2.y, r2.y, -c4.y, -c4.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c8.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.xyz, r2.x, r4, r2.yzww
cmp_pp r0.yzw, r1.w, r2.xxyz, r0
mul_pp r0.zw, r0, c5.w
rcp r0.y, r0_abs.y
mad_pp r0.yz, r0.xzww, r0.y, c5.w
mul_pp r0.yz, r0, c2.x
mov r0.w, c5.w
mad r2.xy, c2.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s4, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s5, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c4.y
add_pp r0.x, -r0.x, c4.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.x, r1.x, r0.x, c4.y
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c4.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 107 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_BumpMap] 2D 3
SetTexture 2 [cube_CityOverlayTex] CUBE 1
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 4 [_CityLightOverlayDetailTex] 2D 5
SetTexture 5 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:agabagaa
eefiecedommjfhmedgakkimkjfjkgeffohkljpkbabaaaaaaaabbaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmiapaaaaeaaaaaaapcadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafidaaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
lcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaa
fgbibaaaacaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdodcaaaaajbcaabaaaacaaaaaa
akaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdgaaaaagbcaabaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaacaaaaaabkaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaackaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaackaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaabaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
egaabaaaadaaaaaaegaabaaaabaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaa
abaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaaaaaaaaaaaaabnaaaaahicaabaaaabaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaiadpdhaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaabeaaaaaaaaaiadpefaaaaajpcaabaaaacaaaaaaggalbaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaa
acaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaakbcaabaaaacaaaaaackaabaaaacaaaaaa
ckiacaaaaaaaaaaabgaaaaaaakaabaaaacaaaaaadcaaaaakbcaabaaaacaaaaaa
dkaabaaaacaaaaaadkiacaaaaaaaaaaabgaaaaaaakaabaaaacaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadcaaaaakbcaabaaa
acaaaaaackbabaaaacaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaa
bnaaaaajccaabaaaacaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaaakaabaaa
aaaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaa
acaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaaacaaaaaa
akaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaaaaaaaaadgaaaaag
ccaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaifcaabaaaaeaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadiaaaaahhcaabaaaaeaaaaaa
ogajbaaaaaaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaa
adaaaaaalganbaaaaaaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajocaabaaa
acaaaaaafgafbaaaacaaaaaaagajbaaaafaaaaaaagajbaaaaeaaaaaadcaaaaak
ocaabaaaacaaaaaaagaebaiaebaaaaaaadaaaaaafgaobaaaaaaaaaaafgaobaaa
acaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaaaaaaaaaagabbaaaadaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaadcaaaaaomcaabaaaaaaaaaaa
agiacaiaebaaaaaaaaaaaaaablaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
dkaabaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaabaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahocaabaaaacaaaaaapgapbaaaabaaaaaa
agbjbaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaajgahbaaa
acaaaaaaaoaaaaahgcaabaaaabaaaaaaagbbbaaaafaaaaaapgbpbaaaafaaaaaa
efaaaaajpcaabaaaadaaaaaajgafbaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
aaaaaaaaapaaaaahbcaabaaaabaaaaaaagaabaaaadaaaaaaagaabaaaabaaaaaa
baaaaaajccaabaaaabaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaaaaaaaaaa
bkaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiocaabaaa
abaaaaaafgafbaaaabaaaaaafgiocaaaaaaaaaaabkaaaaaabaaaaaahccaabaaa
abaaaaaaegbcbaaaadaaaaaajgahbaaaabaaaaaaaaaaaaahecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadp
dicaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaeaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaaeaaaaaadcaaaaajpccabaaa
aaaaaaaapgapbaaaaeaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 242 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTex] CUBE 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texturecube<half> cube_CityOverlayTex [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float4 tmpvar_13;
  tmpvar_13.xy = dfdx(uvCont_12);
  tmpvar_13.zw = dfdy(uvCont_12);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_17;
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_16.x / tmpvar_16.z)
  ), 1.0));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_16.x / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_16.x / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_16.x)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_16.x >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_16.x) * 1.570796);
  };
  uv_17.x = (0.5 + (0.1591549 * tmpvar_18));
  uv_17.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_16.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_16.y)
    )) * (1.570796 + (
      abs(tmpvar_16.y)
     * 
      (-0.2146018 + (abs(tmpvar_16.y) * (0.08656672 + (
        abs(tmpvar_16.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_21;
  uvCont_21.y = uv_17.y;
  uvCont_21.x = abs((uv_17.x - 0.5));
  float4 tmpvar_22;
  tmpvar_22.xy = dfdx(uvCont_21);
  tmpvar_22.zw = dfdy(uvCont_21);
  half4 tmpvar_23;
  tmpvar_23 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_17), gradient2d((float2)(tmpvar_22.xy), (float2)(tmpvar_22.zw)));
  half4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  half4 packednormal_25;
  packednormal_25 = tmpvar_24;
  half3 normal_26;
  normal_26.xy = ((packednormal_25.wy * (half)2.0) - (half)1.0);
  normal_26.z = sqrt(((half)1.0 - clamp (
    dot (normal_26.xy, normal_26.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_26;
  float3 tmpvar_27;
  tmpvar_27 = normalize(_mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_28;
  tmpvar_28 = cube_CityOverlayTex.sample(_mtlsmp_cube_CityOverlayTex, (float3)(tmpvar_27));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half tmpvar_30;
  half4 v_31;
  v_31 = (tmpvar_29 * _mtl_u.alphaMask1);
  tmpvar_30 = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  half4 tmpvar_32;
  tmpvar_32.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_32.w = tmpvar_30;
  cityoverlay_4.xyz = tmpvar_32.xyz;
  half2 uv_33;
  half3 detailCoords_34;
  half s_35;
  half nylerp_36;
  half zxlerp_37;
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_27);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_37);
  s_35 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_27.y, (float)s_35, (float)nylerp_36));
  s_35 = half(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, -1.0));
  tmpvar_43.y = -(s_35);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, -1.0));
  tmpvar_44.y = s_35;
  float3 tmpvar_45;
  tmpvar_45 = mix (((float3)tmpvar_43 * tmpvar_27.xzy), ((float3)tmpvar_44 * tmpvar_27.zxy), (float3)half3(zxlerp_37));
  detailCoords_34 = half3(tmpvar_45);
  half3 tmpvar_46;
  tmpvar_46.xy = half2(float2(1.0, 1.0));
  tmpvar_46.z = s_35;
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_46 * tmpvar_27.yxz), (float3)detailCoords_34, (float3)half3(nylerp_36));
  detailCoords_34 = half3(tmpvar_47);
  uv_33 = half2(((float2)((
    ((half)0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_48;
  uv_48 = float2(uv_33);
  float2 uvCont_49;
  float2 tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_50 = abs((uv_48 - tmpvar_51));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  float4 tmpvar_52;
  tmpvar_52.xy = dfdx(uvCont_49);
  tmpvar_52.zw = dfdy(uvCont_49);
  half4 tmpvar_53;
  tmpvar_53 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_33), gradient2d((float2)(tmpvar_52.xy), (float2)(tmpvar_52.zw)));
  half4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  citydarkoverlaydetail_3.xyz = tmpvar_54.xyz;
  half2 uv_55;
  half3 detailCoords_56;
  half s_57;
  half nylerp_58;
  half zxlerp_59;
  float3 tmpvar_60;
  tmpvar_60 = abs(tmpvar_27);
  float tmpvar_61;
  tmpvar_61 = float((tmpvar_60.z >= tmpvar_60.x));
  zxlerp_59 = half(tmpvar_61);
  float tmpvar_62;
  tmpvar_62 = float((max (tmpvar_60.x, tmpvar_60.z) >= tmpvar_60.y));
  nylerp_58 = half(tmpvar_62);
  float tmpvar_63;
  tmpvar_63 = mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_59);
  s_57 = half(tmpvar_63);
  float tmpvar_64;
  tmpvar_64 = sign(mix (tmpvar_27.y, (float)s_57, (float)nylerp_58));
  s_57 = half(tmpvar_64);
  half3 tmpvar_65;
  tmpvar_65.xz = half2(float2(1.0, -1.0));
  tmpvar_65.y = -(s_57);
  half3 tmpvar_66;
  tmpvar_66.xz = half2(float2(1.0, -1.0));
  tmpvar_66.y = s_57;
  float3 tmpvar_67;
  tmpvar_67 = mix (((float3)tmpvar_65 * tmpvar_27.xzy), ((float3)tmpvar_66 * tmpvar_27.zxy), (float3)half3(zxlerp_59));
  detailCoords_56 = half3(tmpvar_67);
  half3 tmpvar_68;
  tmpvar_68.xy = half2(float2(1.0, 1.0));
  tmpvar_68.z = s_57;
  float3 tmpvar_69;
  tmpvar_69 = mix (((float3)tmpvar_68 * tmpvar_27.yxz), (float3)detailCoords_56, (float3)half3(nylerp_58));
  detailCoords_56 = half3(tmpvar_69);
  uv_55 = half2(((float2)((
    ((half)0.5 * detailCoords_56.yz)
   / 
    abs(detailCoords_56.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_70;
  uv_70 = float2(uv_55);
  float2 uvCont_71;
  float2 tmpvar_72;
  tmpvar_72 = abs((uv_70 - tmpvar_51));
  uvCont_71.x = max (tmpvar_72.x, tmpvar_72.y);
  uvCont_71.y = min (tmpvar_72.x, tmpvar_72.y);
  float4 tmpvar_73;
  tmpvar_73.xy = dfdx(uvCont_71);
  tmpvar_73.zw = dfdy(uvCont_71);
  half4 tmpvar_74;
  tmpvar_74 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_55), gradient2d((float2)(tmpvar_73.xy), (float2)(tmpvar_73.zw)));
  half4 tmpvar_75;
  tmpvar_75 = tmpvar_74;
  citylightoverlaydetail_2.xyz = tmpvar_75.xyz;
  cityoverlay_4.w = (tmpvar_30 * ((half)1.0 - half(
    (tmpvar_15.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_54.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_75.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_75.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_76;
  tmpvar_76 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_77;
  lightDir_77 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_78;
  viewDir_78 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_79;
  atten_79 = tmpvar_76;
  half4 c_80;
  half3 tmpvar_81;
  tmpvar_81 = normalize(lightDir_77);
  lightDir_77 = tmpvar_81;
  half3 tmpvar_82;
  tmpvar_82 = normalize(viewDir_78);
  viewDir_78 = tmpvar_82;
  half3 tmpvar_83;
  tmpvar_83 = normalize(normT_5);
  half tmpvar_84;
  tmpvar_84 = dot (tmpvar_83, tmpvar_81);
  float tmpvar_85;
  half tmpvar_86;
  tmpvar_86 = clamp (dot (normalize(
    (tmpvar_81 + tmpvar_82)
  ), tmpvar_83), (half)0.0, (half)1.0);
  tmpvar_85 = float(tmpvar_86);
  float tmpvar_87;
  tmpvar_87 = (pow (tmpvar_85, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_80.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_84) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_87)) * (float)(atten_79 * (half)2.0)));
  c_80.w = (tmpvar_84 * (atten_79 * (half)2.0));
  float3 tmpvar_88;
  tmpvar_88 = normalize(_mtl_u._SunDir);
  half3 lightDir_89;
  lightDir_89 = half3(tmpvar_88);
  half3 normal_90;
  normal_90 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_91;
  tmpvar_91 = dot (normal_90, lightDir_89);
  color_6 = (c_80 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_91))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_91))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_92;
  tmpvar_1 = tmpvar_92;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 116 math, 18 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [cube_CityOverlayTexPOS] 2D 0
SetTexture 1 [cube_CityOverlayTexNEG] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
"ps_3_0
def c2, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c3, 0.999866009, 0, 1, 0.159154937
def c4, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c5, -2, 3.14159274, 0.318309873, 1
def c6, -2, 1.57079637, 0.159154937, 0.5
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c3.y, c3.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c2.x, c2.y
mad r2.x, r1.w, r2.x, c2.z
mad r2.x, r1.w, r2.x, c2.w
mad r1.w, r1.w, r2.x, c3.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c6.x, c6.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c8.xyxy, c8
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c3.z, c3.y
cmp r1.x, r1.x, c3.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c3.w
mad r2.x, r0.x, c6.z, c6.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c4.x, c4.y
mad r0.x, r0.x, r0_abs.y, c4.z
mad r0.x, r0.x, r0_abs.y, c4.w
add r1.z, -r0_abs.y, c3.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c5.x, c5.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c5.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s2, r1, r3
texldd_pp r1, r2, s3, r1, r3
mad_pp r1.xy, r1.wyzw, -c5.x, -c5.w
add r0.x, r4.w, -c3.z
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c3.y, c3.z
cmp r2.y, r2.y, -c3.y, -c3.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c7.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.yzw, r2.x, r4.xxyz, r2
cmp_pp r0.yzw, r1.w, r2, r0
mul_pp r0.zw, r0, c6.w
rcp r0.y, r0_abs.y
mad_pp r2.yz, r0.xzww, r0.y, c6.w
mul_pp r0.yz, r0.y, r0.xzww
add r0.w, -r0_abs.z, r0_abs.y
cmp r0.yz, r0.w, r0_abs, r0_abs.xzyw
dsx r3.xz, r0.yyzw
dsy r0.yz, r0
texldd_pp r4, r2.yzzw, s0, r3.xzzw, r0.yzzw
texldd_pp r5, r2.yzzw, s1, r3.xzzw, r0.yzzw
mul_pp r0.yz, r2, c1.x
cmp_pp r2.yzw, r3.y, r4.xxyz, r5.xxyz
cmp_pp r0.w, r2.x, r2.w, r2.y
cmp_pp r0.w, r1.w, r0.w, r2.z
cmp_pp r0.x, r0.x, c3.y, r0.w
mov r0.w, c6.w
mad r2.xy, c1.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s4, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s5, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c3.y
add_pp r0.x, -r0.x, c3.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
add_pp r0.x, r0.x, r0.x
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c3.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c3.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 116 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_BumpMap] 2D 3
SetTexture 2 [cube_CityOverlayTexPOS] 2D 0
SetTexture 3 [cube_CityOverlayTexNEG] 2D 1
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:agabagaa
eefiecedpkdhimiphpoibnoaabhjdaoooclfcncoabaaaaaapabbaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnabaaaaa
eaaaaaaadeaeaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaa
acaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaacaaaaaadkaabaaaaaaaaaaa
bkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaa
abaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahocaabaaaacaaaaaaagajbaaa
abaaaaaaagaebaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
jgahbaaaacaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaa
ckaabaaaaaaaaaaaamaaaaafbcaabaaaaeaaaaaackaabaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaaaaaaaaaiocaabaaa
acaaaaaaagajbaiaebaaaaaaadaaaaaaagajbaaaafaaaaaadcaaaaajocaabaaa
acaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaaagajbaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaacaaaaaadcaaaaaj
ecaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaabkaabaaaacaaaaaa
aaaaaaaiecaabaaaaaaaaaaackaabaiaebaaaaaaacaaaaaackaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaabaaaaaackaabaaaaaaaaaaackaabaaa
acaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaacgakbaaaabaaaaaacgakbaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagicaabaaaaaaaaaaa
dkaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
amaaaaafbcaabaaaafaaaaaadkaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahccaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaaeaaaaaabkaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaabkaabaaa
adaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaacaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaabnaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdhaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaaodcaabaaaacaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaegaabaaaaaaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaa
ddaaaaajicaabaaaabaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaa
acaaaaaaalaaaaafbcaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaa
adaaaaaadkaabaaaaaaaaaaaalaaaaafccaabaaaacaaaaaadkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaadkaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaa
egaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaa
afaaaaaaaagabaaaafaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaapaaaaahccaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaabkaabaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagajbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaa
aaaaaaaajgahbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaabkaabaaaaaaaaaaabaaaaaajecaabaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaakgakbaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaaaaaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaa
aaaaaaaaegaobaaaacaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 268 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [cube_CityOverlayTexPOS] 2D 0
SetTexture 1 [cube_CityOverlayTexNEG] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_CityOverlayTexPOS [[texture(0)]], sampler _mtlsmp_cube_CityOverlayTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexNEG [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexNEG [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexPOS.sample(_mtlsmp_cube_CityOverlayTexPOS, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexNEG.sample(_mtlsmp_cube_CityOverlayTexNEG, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, half4(half((s_30 >= (half)0.0))));
  half tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  half4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  half2 uv_56;
  half3 detailCoords_57;
  half s_58;
  half nylerp_59;
  half zxlerp_60;
  float3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = half(tmpvar_62);
  float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = half(tmpvar_63);
  float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_60);
  s_58 = half(tmpvar_64);
  float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, (float)s_58, (float)nylerp_59));
  s_58 = half(tmpvar_65);
  half3 tmpvar_66;
  tmpvar_66.xz = half2(float2(1.0, -1.0));
  tmpvar_66.y = -(s_58);
  half3 tmpvar_67;
  tmpvar_67.xz = half2(float2(1.0, -1.0));
  tmpvar_67.y = s_58;
  float3 tmpvar_68;
  tmpvar_68 = mix (((float3)tmpvar_66 * tmpvar_33.xzy), ((float3)tmpvar_67 * tmpvar_33.zxy), (float3)half3(zxlerp_60));
  detailCoords_57 = half3(tmpvar_68);
  half3 tmpvar_69;
  tmpvar_69.xy = half2(float2(1.0, 1.0));
  tmpvar_69.z = s_58;
  float3 tmpvar_70;
  tmpvar_70 = mix (((float3)tmpvar_69 * tmpvar_33.yxz), (float3)detailCoords_57, (float3)half3(nylerp_59));
  detailCoords_57 = half3(tmpvar_70);
  uv_56 = half2(((float2)((
    ((half)0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_71;
  uv_71 = float2(uv_56);
  float2 uvCont_72;
  float2 tmpvar_73;
  float tmpvar_74;
  tmpvar_74 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  float4 tmpvar_75;
  tmpvar_75.xy = dfdx(uvCont_72);
  tmpvar_75.zw = dfdy(uvCont_72);
  half4 tmpvar_76;
  tmpvar_76 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_56), gradient2d((float2)(tmpvar_75.xy), (float2)(tmpvar_75.zw)));
  half4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  half2 uv_78;
  half3 detailCoords_79;
  half s_80;
  half nylerp_81;
  half zxlerp_82;
  float3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = half(tmpvar_84);
  float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = half(tmpvar_85);
  float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_82);
  s_80 = half(tmpvar_86);
  float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, (float)s_80, (float)nylerp_81));
  s_80 = half(tmpvar_87);
  half3 tmpvar_88;
  tmpvar_88.xz = half2(float2(1.0, -1.0));
  tmpvar_88.y = -(s_80);
  half3 tmpvar_89;
  tmpvar_89.xz = half2(float2(1.0, -1.0));
  tmpvar_89.y = s_80;
  float3 tmpvar_90;
  tmpvar_90 = mix (((float3)tmpvar_88 * tmpvar_33.xzy), ((float3)tmpvar_89 * tmpvar_33.zxy), (float3)half3(zxlerp_82));
  detailCoords_79 = half3(tmpvar_90);
  half3 tmpvar_91;
  tmpvar_91.xy = half2(float2(1.0, 1.0));
  tmpvar_91.z = s_80;
  float3 tmpvar_92;
  tmpvar_92 = mix (((float3)tmpvar_91 * tmpvar_33.yxz), (float3)detailCoords_79, (float3)half3(nylerp_81));
  detailCoords_79 = half3(tmpvar_92);
  uv_78 = half2(((float2)((
    ((half)0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_93;
  uv_93 = float2(uv_78);
  float2 uvCont_94;
  float2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  float4 tmpvar_96;
  tmpvar_96.xy = dfdx(uvCont_94);
  tmpvar_96.zw = dfdy(uvCont_94);
  half4 tmpvar_97;
  tmpvar_97 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_78), gradient2d((float2)(tmpvar_96.xy), (float2)(tmpvar_96.zw)));
  half4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_99;
  lightDir_99 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_100;
  viewDir_100 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_101;
  half3 tmpvar_102;
  tmpvar_102 = normalize(lightDir_99);
  lightDir_99 = tmpvar_102;
  half3 tmpvar_103;
  tmpvar_103 = normalize(viewDir_100);
  viewDir_100 = tmpvar_103;
  half3 tmpvar_104;
  tmpvar_104 = normalize(normT_5);
  half tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_102);
  float tmpvar_106;
  half tmpvar_107;
  tmpvar_107 = clamp (dot (normalize(
    (tmpvar_102 + tmpvar_103)
  ), tmpvar_104), (half)0.0, (half)1.0);
  tmpvar_106 = float(tmpvar_107);
  float tmpvar_108;
  tmpvar_108 = (pow (tmpvar_106, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_101.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_105) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_108)) * 2.0));
  c_101.w = (tmpvar_105 * (half)2.0);
  float3 tmpvar_109;
  tmpvar_109 = normalize(_mtl_u._SunDir);
  half3 lightDir_110;
  lightDir_110 = half3(tmpvar_109);
  half3 normal_111;
  normal_111 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_112;
  tmpvar_112 = dot (normal_111, lightDir_110);
  color_6 = (c_101 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_112))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_112))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_113;
  tmpvar_113 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_113;
  tmpvar_1 = tmpvar_113;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 117 math, 19 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexPOS] 2D 1
SetTexture 2 [cube_CityOverlayTexNEG] 2D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_BumpMap] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
"ps_3_0
def c2, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c3, 0.999866009, 0, 1, 0.159154937
def c4, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c5, -2, 3.14159274, 0.318309873, 1
def c6, -2, 1.57079637, 0.159154937, 0.5
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dp3 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.yzw, r0.x, v0.xyxz
mad r0.x, v0.x, r0.x, -r0.w
cmp r1.xy, r0.x, r0.wzzw, r0.zwzw
add r1.zw, -r0_abs.xywz, r0_abs
cmp r2.xy, r1.z, r0_abs.wzzw, r0_abs.zwzw
cmp r0.x, r1.w, c3.y, c3.z
rcp r1.z, r2.y
mul r1.z, r1.z, r2.x
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, c2.x, c2.y
mad r2.x, r1.w, r2.x, c2.z
mad r2.x, r1.w, r2.x, c2.w
mad r1.w, r1.w, r2.x, c3.x
mul r1.z, r1.w, r1.z
mad r1.w, r1.z, c6.x, c6.y
mad r0.x, r1.w, r0.x, r1.z
cmp r1.zw, r0.xywy, c8.xyxy, c8
add r0.x, r0.x, r1.z
add r1.z, r0.x, r0.x
cmp r1.y, r1.y, c3.z, c3.y
cmp r1.x, r1.x, c3.y, r1.y
mad r0.x, r1.x, -r1.z, r0.x
mul r1.x, r0.x, c3.w
mad r2.x, r0.x, c6.z, c6.w
abs r0.x, r1.x
dsx r1.x, r0.x
dsy r3.x, r0.x
mad r0.x, r0_abs.y, c4.x, c4.y
mad r0.x, r0.x, r0_abs.y, c4.z
mad r0.x, r0.x, r0_abs.y, c4.w
add r1.z, -r0_abs.y, c3.z
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r0.x, r0.x, r1.z
mad r1.z, r0.x, c5.x, c5.y
mad r0.x, r1.z, r1.w, r0.x
mul r2.y, r0.x, c5.z
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s3, r1, r3
texldd_pp r1, r2, s4, r1, r3
mad_pp r1.xy, r1.wyzw, -c5.x, -c5.w
add r0.x, r4.w, -c3.z
max r1.w, r0_abs.z, r0_abs.w
add r1.w, -r0_abs.y, r1.w
add r2.x, -r0_abs.z, r0_abs.w
cmp_pp r2.y, r2.x, r0.w, r0.z
cmp r2.y, r1.w, r2.y, r0.y
cmp r2.z, -r2.y, c3.y, c3.z
cmp r2.y, r2.y, -c3.y, -c3.z
add_pp r3.y, r2.y, r2.z
mov_pp r4.y, -r3.y
mov r4.xz, c7.xyyw
mul_pp r2.yzw, r0.xzwy, r4.xxyz
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r0.wzyw, r3
mul_pp r0.yzw, r0, r3.xxxy
cmp_pp r2.yzw, r2.x, r4.xxyz, r2
cmp_pp r0.yzw, r1.w, r2, r0
mul_pp r0.zw, r0, c6.w
rcp r0.y, r0_abs.y
mad_pp r2.yz, r0.xzww, r0.y, c6.w
mul_pp r0.yz, r0.y, r0.xzww
add r0.w, -r0_abs.z, r0_abs.y
cmp r0.yz, r0.w, r0_abs, r0_abs.xzyw
dsx r3.xz, r0.yyzw
dsy r0.yz, r0
texldd_pp r4, r2.yzzw, s1, r3.xzzw, r0.yzzw
texldd_pp r5, r2.yzzw, s2, r3.xzzw, r0.yzzw
mul_pp r0.yz, r2, c1.x
cmp_pp r2.yzw, r3.y, r4.xxyz, r5.xxyz
cmp_pp r0.w, r2.x, r2.w, r2.y
cmp_pp r0.w, r1.w, r0.w, r2.z
cmp_pp r0.x, r0.x, c3.y, r0.w
mov r0.w, c6.w
mad r2.xy, c1.x, -r0.w, r0.yzzw
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0.yzzw, s5, r2.zwzw, r2
texldd_pp r2, r0.yzzw, s6, r2.zwzw, r2
mul_pp r0.y, r0.x, r3.w
mul_pp r2.w, r0.x, r2.w
dp2add_sat_pp r0.x, r1, r1, c3.y
add_pp r0.x, -r0.x, c3.z
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.x, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.x, r1.x, r0.x, c3.y
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c3.z
mul_sat_pp r0.x, r0.x, r1.x
add_pp r0.x, -r0.x, c3.z
mul_pp r3.w, r0.x, r0.y
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 117 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_BumpMap] 2D 4
SetTexture 2 [cube_CityOverlayTexPOS] 2D 1
SetTexture 3 [cube_CityOverlayTexNEG] 2D 2
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:ahabahaa
eefiecedmacnehefdjccnlkoinnchmhieahijbcoabaaaaaahabcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdibbaaaaeaaaaaaaeoaeaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadlcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaa
acaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaacaaaaaadkaabaaaaaaaaaaa
bkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaa
abaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahocaabaaaacaaaaaaagajbaaa
abaaaaaaagaebaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
jgahbaaaacaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaa
ckaabaaaaaaaaaaaamaaaaafbcaabaaaaeaaaaaackaabaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaaaaaaaaaiocaabaaa
acaaaaaaagajbaiaebaaaaaaadaaaaaaagajbaaaafaaaaaadcaaaaajocaabaaa
acaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaaagajbaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaacaaaaaadcaaaaaj
ecaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaabkaabaaaacaaaaaa
aaaaaaaiecaabaaaaaaaaaaackaabaiaebaaaaaaacaaaaaackaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaabaaaaaackaabaaaaaaaaaaackaabaaa
acaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaacgakbaaaabaaaaaacgakbaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagicaabaaaaaaaaaaa
dkaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
amaaaaafbcaabaaaafaaaaaadkaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahccaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaaeaaaaaabkaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaabkaabaaa
adaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaabnaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdhaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaaodcaabaaaacaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaegaabaaaaaaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaa
ddaaaaajicaabaaaabaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaa
acaaaaaaalaaaaafbcaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaa
adaaaaaadkaabaaaaaaaaaaaalaaaaafccaabaaaacaaaaaadkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaadkaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaa
egaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaa
afaaaaaaaagabaaaagaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaapaaaaahccaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaabkaabaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagajbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaa
aaaaaaaajgahbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahmcaabaaaaaaaaaaa
agbebaaaafaaaaaapgbpbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
aaaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaaapaaaaahccaabaaaaaaaaaaa
agaabaaaabaaaaaafgafbaaaaaaaaaaabaaaaaajecaabaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaakgakbaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaaaaaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaa
aaaaaaaaegaobaaaacaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 270 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexPOS] 2D 1
SetTexture 2 [cube_CityOverlayTexNEG] 2D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_BumpMap] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexPOS [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexPOS [[sampler(1)]]
  ,   texture2d<half> cube_CityOverlayTexNEG [[texture(2)]], sampler _mtlsmp_cube_CityOverlayTexNEG [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _BumpMap [[texture(4)]], sampler _mtlsmp__BumpMap [[sampler(4)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(5)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(6)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexPOS.sample(_mtlsmp_cube_CityOverlayTexPOS, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexNEG.sample(_mtlsmp_cube_CityOverlayTexNEG, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, half4(half((s_30 >= (half)0.0))));
  half tmpvar_54;
  tmpvar_54 = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  half4 tmpvar_55;
  tmpvar_55.x = tmpvar_53.w;
  tmpvar_55.y = tmpvar_53.w;
  tmpvar_55.z = tmpvar_53.w;
  tmpvar_55.w = tmpvar_54;
  cityoverlay_4.xyz = tmpvar_55.xyz;
  half2 uv_56;
  half3 detailCoords_57;
  half s_58;
  half nylerp_59;
  half zxlerp_60;
  float3 tmpvar_61;
  tmpvar_61 = abs(tmpvar_33);
  float tmpvar_62;
  tmpvar_62 = float((tmpvar_61.z >= tmpvar_61.x));
  zxlerp_60 = half(tmpvar_62);
  float tmpvar_63;
  tmpvar_63 = float((max (tmpvar_61.x, tmpvar_61.z) >= tmpvar_61.y));
  nylerp_59 = half(tmpvar_63);
  float tmpvar_64;
  tmpvar_64 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_60);
  s_58 = half(tmpvar_64);
  float tmpvar_65;
  tmpvar_65 = sign(mix (tmpvar_33.y, (float)s_58, (float)nylerp_59));
  s_58 = half(tmpvar_65);
  half3 tmpvar_66;
  tmpvar_66.xz = half2(float2(1.0, -1.0));
  tmpvar_66.y = -(s_58);
  half3 tmpvar_67;
  tmpvar_67.xz = half2(float2(1.0, -1.0));
  tmpvar_67.y = s_58;
  float3 tmpvar_68;
  tmpvar_68 = mix (((float3)tmpvar_66 * tmpvar_33.xzy), ((float3)tmpvar_67 * tmpvar_33.zxy), (float3)half3(zxlerp_60));
  detailCoords_57 = half3(tmpvar_68);
  half3 tmpvar_69;
  tmpvar_69.xy = half2(float2(1.0, 1.0));
  tmpvar_69.z = s_58;
  float3 tmpvar_70;
  tmpvar_70 = mix (((float3)tmpvar_69 * tmpvar_33.yxz), (float3)detailCoords_57, (float3)half3(nylerp_59));
  detailCoords_57 = half3(tmpvar_70);
  uv_56 = half2(((float2)((
    ((half)0.5 * detailCoords_57.yz)
   / 
    abs(detailCoords_57.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_71;
  uv_71 = float2(uv_56);
  float2 uvCont_72;
  float2 tmpvar_73;
  float tmpvar_74;
  tmpvar_74 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_73 = abs((uv_71 - tmpvar_74));
  uvCont_72.x = max (tmpvar_73.x, tmpvar_73.y);
  uvCont_72.y = min (tmpvar_73.x, tmpvar_73.y);
  float4 tmpvar_75;
  tmpvar_75.xy = dfdx(uvCont_72);
  tmpvar_75.zw = dfdy(uvCont_72);
  half4 tmpvar_76;
  tmpvar_76 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_56), gradient2d((float2)(tmpvar_75.xy), (float2)(tmpvar_75.zw)));
  half4 tmpvar_77;
  tmpvar_77 = tmpvar_76;
  citydarkoverlaydetail_3.xyz = tmpvar_77.xyz;
  half2 uv_78;
  half3 detailCoords_79;
  half s_80;
  half nylerp_81;
  half zxlerp_82;
  float3 tmpvar_83;
  tmpvar_83 = abs(tmpvar_33);
  float tmpvar_84;
  tmpvar_84 = float((tmpvar_83.z >= tmpvar_83.x));
  zxlerp_82 = half(tmpvar_84);
  float tmpvar_85;
  tmpvar_85 = float((max (tmpvar_83.x, tmpvar_83.z) >= tmpvar_83.y));
  nylerp_81 = half(tmpvar_85);
  float tmpvar_86;
  tmpvar_86 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_82);
  s_80 = half(tmpvar_86);
  float tmpvar_87;
  tmpvar_87 = sign(mix (tmpvar_33.y, (float)s_80, (float)nylerp_81));
  s_80 = half(tmpvar_87);
  half3 tmpvar_88;
  tmpvar_88.xz = half2(float2(1.0, -1.0));
  tmpvar_88.y = -(s_80);
  half3 tmpvar_89;
  tmpvar_89.xz = half2(float2(1.0, -1.0));
  tmpvar_89.y = s_80;
  float3 tmpvar_90;
  tmpvar_90 = mix (((float3)tmpvar_88 * tmpvar_33.xzy), ((float3)tmpvar_89 * tmpvar_33.zxy), (float3)half3(zxlerp_82));
  detailCoords_79 = half3(tmpvar_90);
  half3 tmpvar_91;
  tmpvar_91.xy = half2(float2(1.0, 1.0));
  tmpvar_91.z = s_80;
  float3 tmpvar_92;
  tmpvar_92 = mix (((float3)tmpvar_91 * tmpvar_33.yxz), (float3)detailCoords_79, (float3)half3(nylerp_81));
  detailCoords_79 = half3(tmpvar_92);
  uv_78 = half2(((float2)((
    ((half)0.5 * detailCoords_79.yz)
   / 
    abs(detailCoords_79.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_93;
  uv_93 = float2(uv_78);
  float2 uvCont_94;
  float2 tmpvar_95;
  tmpvar_95 = abs((uv_93 - tmpvar_74));
  uvCont_94.x = max (tmpvar_95.x, tmpvar_95.y);
  uvCont_94.y = min (tmpvar_95.x, tmpvar_95.y);
  float4 tmpvar_96;
  tmpvar_96.xy = dfdx(uvCont_94);
  tmpvar_96.zw = dfdy(uvCont_94);
  half4 tmpvar_97;
  tmpvar_97 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_78), gradient2d((float2)(tmpvar_96.xy), (float2)(tmpvar_96.zw)));
  half4 tmpvar_98;
  tmpvar_98 = tmpvar_97;
  citylightoverlaydetail_2.xyz = tmpvar_98.xyz;
  cityoverlay_4.w = (tmpvar_54 * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_77.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_98.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_98.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_99;
  tmpvar_99 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_100;
  lightDir_100 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_101;
  viewDir_101 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_102;
  atten_102 = tmpvar_99;
  half4 c_103;
  half3 tmpvar_104;
  tmpvar_104 = normalize(lightDir_100);
  lightDir_100 = tmpvar_104;
  half3 tmpvar_105;
  tmpvar_105 = normalize(viewDir_101);
  viewDir_101 = tmpvar_105;
  half3 tmpvar_106;
  tmpvar_106 = normalize(normT_5);
  half tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_104);
  float tmpvar_108;
  half tmpvar_109;
  tmpvar_109 = clamp (dot (normalize(
    (tmpvar_104 + tmpvar_105)
  ), tmpvar_106), (half)0.0, (half)1.0);
  tmpvar_108 = float(tmpvar_109);
  float tmpvar_110;
  tmpvar_110 = (pow (tmpvar_108, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_103.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_107) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_110)) * (float)(atten_102 * (half)2.0)));
  c_103.w = (tmpvar_107 * (atten_102 * (half)2.0));
  float3 tmpvar_111;
  tmpvar_111 = normalize(_mtl_u._SunDir);
  half3 lightDir_112;
  lightDir_112 = half3(tmpvar_111);
  half3 normal_113;
  normal_113 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_114;
  tmpvar_114 = dot (normal_113, lightDir_112);
  color_6 = (c_103 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_114))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_114))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_115;
  tmpvar_115 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_115;
  tmpvar_1 = tmpvar_115;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 122 math, 18 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [cube_CityOverlayTexPOS] 2D 0
SetTexture 1 [cube_CityOverlayTexNEG] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
"ps_3_0
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c6, -2, 3.14159274, 0.318309873, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
mov r0.xz, c8.xyyw
dp3 r0.w, v0, v0
rsq r0.w, r0.w
mul r1.xyz, r0.w, v0.yxzw
mad r0.w, v0.x, r0.w, -r1.z
cmp r2.xy, r0.w, r1.zyzw, r1.yzzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.z, r1.w, r1.z, r1.y
cmp r2.z, r0.w, r2.z, r1.x
cmp r2.w, -r2.z, c4.y, c4.z
cmp r2.z, r2.z, -c4.y, -c4.z
add_pp r3.y, r2.z, r2.w
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r3.xzw, r1.xyyz, r3.xyxy
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r3.xzww
mul_pp r0.yz, r0, c7.w
rcp r0.x, r0_abs.x
mul_pp r2.zw, r0.x, r0.xyyz
mad_pp r0.xy, r0.yzzw, r0.x, c7.w
add r0.z, -r2_abs.w, r2_abs.z
cmp r2.zw, r0.z, r2_abs, r2_abs.xywz
dsx r3.xz, r2.zyww
dsy r2.zw, r2
texldd_pp r4, r0, s0, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s1, r3.xzzw, r2.zwzw
mul_pp r0.xy, r0, c2.x
cmp_pp r3, r3.y, r4, r5
cmp_pp r0.z, r1.w, r3.z, r3.x
cmp_pp r0.z, r0.w, r0.z, r3.y
mov_pp r3.xyz, r3.w
mul_pp r2.zw, r3.xyxy, c0.xyxy
add_pp r0.w, r2.w, r2.z
mad_pp r0.w, r3.z, c0.z, r0.w
mad_pp r0.z, r0.z, c0.w, r0.w
add r2.zw, -r1_abs.xyzy, r1_abs.xyyz
cmp r1.yw, r2.z, r1_abs.xzzy, r1_abs.xyzz
cmp r0.w, r2.w, c4.y, c4.z
rcp r1.w, r1.w
mul r1.y, r1.w, r1.y
mul r1.w, r1.y, r1.y
mad r2.z, r1.w, c3.x, c3.y
mad r2.z, r1.w, r2.z, c3.z
mad r2.z, r1.w, r2.z, c3.w
mad r1.w, r1.w, r2.z, c4.x
mul r1.y, r1.w, r1.y
mad r1.w, r1.y, c7.x, c7.y
mad r0.w, r1.w, r0.w, r1.y
cmp r1.yz, r1.xzxw, c9.xxyw, c9.xzww
add r0.w, r0.w, r1.y
add r1.y, r0.w, r0.w
cmp r1.w, r2.y, c4.z, c4.y
cmp r1.w, r2.x, c4.y, r1.w
mad r0.w, r1.w, -r1.y, r0.w
mad r2.x, r0.w, c7.z, c7.w
mul r0.w, r0.w, c4.w
abs r0.w, r0.w
mad r1.y, r1_abs.x, c5.x, c5.y
mad r1.y, r1.y, r1_abs.x, c5.z
mad r1.y, r1.y, r1_abs.x, c5.w
add r1.x, -r1_abs.x, c4.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1.x, r1.y
mad r1.y, r1.x, c6.x, c6.y
mad r1.x, r1.y, r1.z, r1.x
mul r2.y, r1.x, c6.z
dsx r1.x, r0.w
dsy r3.x, r0.w
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s2, r1, r3
texldd_pp r1, r2, s3, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
add r0.w, r4.w, -c4.z
cmp_pp r0.w, r0.w, c4.y, c4.z
mul_pp r0.z, r0.w, r0.z
mov r0.w, c7.w
mad r2.xy, c2.x, -r0.w, r0
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0, s4, r2.zwzw, r2
texldd_pp r2, r0, s5, r2.zwzw, r2
mul_pp r0.x, r0.z, r3.w
mul_pp r2.w, r0.z, r2.w
dp2add_sat_pp r0.y, r1, r1, c4.y
add_pp r0.y, -r0.y, c4.z
rsq_pp r0.y, r0.y
rcp_pp r1.z, r0.y
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.y, r4, r1
add_pp r0.y, r0.y, r0.y
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.y, r0.y, r1.x
add_pp r0.y, -r0.y, c4.z
mul_pp r3.w, r0.y, r0.x
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 120 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_BumpMap] 2D 3
SetTexture 2 [cube_CityOverlayTexPOS] 2D 0
SetTexture 3 [cube_CityOverlayTexNEG] 2D 1
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:agabagaa
eefiecedkhmdeioacoffmfjnnjdkdnlkaiaicbleabaaaaaajabcaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchabbaaaa
eaaaaaaafmaeaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaa
acaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaacaaaaaadkaabaaaaaaaaaaa
bkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaa
abaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahocaabaaaacaaaaaaagajbaaa
abaaaaaaagaebaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
jgahbaaaacaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaa
ckaabaaaaaaaaaaaamaaaaafbcaabaaaaeaaaaaackaabaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaa
adaaaaaapgapbaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaaakaabaiaebaaaaaaadaaaaaackaabaaaadaaaaaadcaaaaaj
ecaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaadaaaaaa
aaaaaaaiecaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaackaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
adaaaaaadgaaaaafhcaabaaaacaaaaaapgapbaaaadaaaaaadiaaaaaidcaabaaa
acaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaahicaabaaa
aaaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaakicaabaaaaaaaaaaa
ckaabaaaacaaaaaackiacaaaaaaaaaaabgaaaaaadkaabaaaaaaaaaaadcaaaaak
ecaabaaaaaaaaaaackaabaaaaaaaaaaadkiacaaaaaaaaaaabgaaaaaadkaabaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaacgakbaaaabaaaaaacgakbaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagicaabaaaaaaaaaaa
dkaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
amaaaaafbcaabaaaafaaaaaadkaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahccaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaaeaaaaaabkaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaabkaabaaa
adaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaacaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaabnaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdhaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaaodcaabaaaacaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaegaabaaaaaaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaa
ddaaaaajicaabaaaabaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaa
acaaaaaaalaaaaafbcaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaa
adaaaaaadkaabaaaaaaaaaaaalaaaaafccaabaaaacaaaaaadkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaadkaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaa
egaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaa
afaaaaaaaagabaaaafaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaapaaaaahccaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaabkaabaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagajbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaa
aaaaaaaajgahbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaabkaabaaaaaaaaaaabaaaaaajecaabaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaakgakbaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaaaaaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaa
aaaaaaaaegaobaaaacaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 273 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [cube_CityOverlayTexPOS] 2D 0
SetTexture 1 [cube_CityOverlayTexNEG] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_CityOverlayTexPOS [[texture(0)]], sampler _mtlsmp_cube_CityOverlayTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexNEG [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexNEG [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexPOS.sample(_mtlsmp_cube_CityOverlayTexPOS, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexNEG.sample(_mtlsmp_cube_CityOverlayTexNEG, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, half4(half((s_30 >= (half)0.0))));
  half4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  half tmpvar_55;
  half4 v_56;
  v_56 = (tmpvar_54 * _mtl_u.alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  half4 tmpvar_57;
  tmpvar_57.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  half2 uv_58;
  half3 detailCoords_59;
  half s_60;
  half nylerp_61;
  half zxlerp_62;
  float3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = half(tmpvar_64);
  float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = half(tmpvar_65);
  float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_62);
  s_60 = half(tmpvar_66);
  float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, (float)s_60, (float)nylerp_61));
  s_60 = half(tmpvar_67);
  half3 tmpvar_68;
  tmpvar_68.xz = half2(float2(1.0, -1.0));
  tmpvar_68.y = -(s_60);
  half3 tmpvar_69;
  tmpvar_69.xz = half2(float2(1.0, -1.0));
  tmpvar_69.y = s_60;
  float3 tmpvar_70;
  tmpvar_70 = mix (((float3)tmpvar_68 * tmpvar_33.xzy), ((float3)tmpvar_69 * tmpvar_33.zxy), (float3)half3(zxlerp_62));
  detailCoords_59 = half3(tmpvar_70);
  half3 tmpvar_71;
  tmpvar_71.xy = half2(float2(1.0, 1.0));
  tmpvar_71.z = s_60;
  float3 tmpvar_72;
  tmpvar_72 = mix (((float3)tmpvar_71 * tmpvar_33.yxz), (float3)detailCoords_59, (float3)half3(nylerp_61));
  detailCoords_59 = half3(tmpvar_72);
  uv_58 = half2(((float2)((
    ((half)0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_73;
  uv_73 = float2(uv_58);
  float2 uvCont_74;
  float2 tmpvar_75;
  float tmpvar_76;
  tmpvar_76 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  float4 tmpvar_77;
  tmpvar_77.xy = dfdx(uvCont_74);
  tmpvar_77.zw = dfdy(uvCont_74);
  half4 tmpvar_78;
  tmpvar_78 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_58), gradient2d((float2)(tmpvar_77.xy), (float2)(tmpvar_77.zw)));
  half4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  half2 uv_80;
  half3 detailCoords_81;
  half s_82;
  half nylerp_83;
  half zxlerp_84;
  float3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = half(tmpvar_86);
  float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = half(tmpvar_87);
  float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_84);
  s_82 = half(tmpvar_88);
  float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, (float)s_82, (float)nylerp_83));
  s_82 = half(tmpvar_89);
  half3 tmpvar_90;
  tmpvar_90.xz = half2(float2(1.0, -1.0));
  tmpvar_90.y = -(s_82);
  half3 tmpvar_91;
  tmpvar_91.xz = half2(float2(1.0, -1.0));
  tmpvar_91.y = s_82;
  float3 tmpvar_92;
  tmpvar_92 = mix (((float3)tmpvar_90 * tmpvar_33.xzy), ((float3)tmpvar_91 * tmpvar_33.zxy), (float3)half3(zxlerp_84));
  detailCoords_81 = half3(tmpvar_92);
  half3 tmpvar_93;
  tmpvar_93.xy = half2(float2(1.0, 1.0));
  tmpvar_93.z = s_82;
  float3 tmpvar_94;
  tmpvar_94 = mix (((float3)tmpvar_93 * tmpvar_33.yxz), (float3)detailCoords_81, (float3)half3(nylerp_83));
  detailCoords_81 = half3(tmpvar_94);
  uv_80 = half2(((float2)((
    ((half)0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_95;
  uv_95 = float2(uv_80);
  float2 uvCont_96;
  float2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  float4 tmpvar_98;
  tmpvar_98.xy = dfdx(uvCont_96);
  tmpvar_98.zw = dfdy(uvCont_96);
  half4 tmpvar_99;
  tmpvar_99 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_80), gradient2d((float2)(tmpvar_98.xy), (float2)(tmpvar_98.zw)));
  half4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_101;
  lightDir_101 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_102;
  viewDir_102 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_103;
  half3 tmpvar_104;
  tmpvar_104 = normalize(lightDir_101);
  lightDir_101 = tmpvar_104;
  half3 tmpvar_105;
  tmpvar_105 = normalize(viewDir_102);
  viewDir_102 = tmpvar_105;
  half3 tmpvar_106;
  tmpvar_106 = normalize(normT_5);
  half tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_104);
  float tmpvar_108;
  half tmpvar_109;
  tmpvar_109 = clamp (dot (normalize(
    (tmpvar_104 + tmpvar_105)
  ), tmpvar_106), (half)0.0, (half)1.0);
  tmpvar_108 = float(tmpvar_109);
  float tmpvar_110;
  tmpvar_110 = (pow (tmpvar_108, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_103.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_107) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_110)) * 2.0));
  c_103.w = (tmpvar_107 * (half)2.0);
  float3 tmpvar_111;
  tmpvar_111 = normalize(_mtl_u._SunDir);
  half3 lightDir_112;
  lightDir_112 = half3(tmpvar_111);
  half3 normal_113;
  normal_113 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_114;
  tmpvar_114 = dot (normal_113, lightDir_112);
  color_6 = (c_103 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_114))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_114))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_115;
  tmpvar_115 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_115;
  tmpvar_1 = tmpvar_115;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 123 math, 19 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexPOS] 2D 1
SetTexture 2 [cube_CityOverlayTexNEG] 2D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_BumpMap] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
"ps_3_0
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c6, -2, 3.14159274, 0.318309873, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c8.xyyw
dp3 r0.w, v0, v0
rsq r0.w, r0.w
mul r1.xyz, r0.w, v0.yxzw
mad r0.w, v0.x, r0.w, -r1.z
cmp r2.xy, r0.w, r1.zyzw, r1.yzzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.z, r1.w, r1.z, r1.y
cmp r2.z, r0.w, r2.z, r1.x
cmp r2.w, -r2.z, c4.y, c4.z
cmp r2.z, r2.z, -c4.y, -c4.z
add_pp r3.y, r2.z, r2.w
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r3.xzw, r1.xyyz, r3.xyxy
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r3.xzww
mul_pp r0.yz, r0, c7.w
rcp r0.x, r0_abs.x
mul_pp r2.zw, r0.x, r0.xyyz
mad_pp r0.xy, r0.yzzw, r0.x, c7.w
add r0.z, -r2_abs.w, r2_abs.z
cmp r2.zw, r0.z, r2_abs, r2_abs.xywz
dsx r3.xz, r2.zyww
dsy r2.zw, r2
texldd_pp r4, r0, s1, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s2, r3.xzzw, r2.zwzw
mul_pp r0.xy, r0, c2.x
cmp_pp r3, r3.y, r4, r5
cmp_pp r0.z, r1.w, r3.z, r3.x
cmp_pp r0.z, r0.w, r0.z, r3.y
mov_pp r3.xyz, r3.w
mul_pp r2.zw, r3.xyxy, c0.xyxy
add_pp r0.w, r2.w, r2.z
mad_pp r0.w, r3.z, c0.z, r0.w
mad_pp r0.z, r0.z, c0.w, r0.w
add r2.zw, -r1_abs.xyzy, r1_abs.xyyz
cmp r1.yw, r2.z, r1_abs.xzzy, r1_abs.xyzz
cmp r0.w, r2.w, c4.y, c4.z
rcp r1.w, r1.w
mul r1.y, r1.w, r1.y
mul r1.w, r1.y, r1.y
mad r2.z, r1.w, c3.x, c3.y
mad r2.z, r1.w, r2.z, c3.z
mad r2.z, r1.w, r2.z, c3.w
mad r1.w, r1.w, r2.z, c4.x
mul r1.y, r1.w, r1.y
mad r1.w, r1.y, c7.x, c7.y
mad r0.w, r1.w, r0.w, r1.y
cmp r1.yz, r1.xzxw, c9.xxyw, c9.xzww
add r0.w, r0.w, r1.y
add r1.y, r0.w, r0.w
cmp r1.w, r2.y, c4.z, c4.y
cmp r1.w, r2.x, c4.y, r1.w
mad r0.w, r1.w, -r1.y, r0.w
mad r2.x, r0.w, c7.z, c7.w
mul r0.w, r0.w, c4.w
abs r0.w, r0.w
mad r1.y, r1_abs.x, c5.x, c5.y
mad r1.y, r1.y, r1_abs.x, c5.z
mad r1.y, r1.y, r1_abs.x, c5.w
add r1.x, -r1_abs.x, c4.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1.x, r1.y
mad r1.y, r1.x, c6.x, c6.y
mad r1.x, r1.y, r1.z, r1.x
mul r2.y, r1.x, c6.z
dsx r1.x, r0.w
dsy r3.x, r0.w
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s3, r1, r3
texldd_pp r1, r2, s4, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
add r0.w, r4.w, -c4.z
cmp_pp r0.w, r0.w, c4.y, c4.z
mul_pp r0.z, r0.w, r0.z
mov r0.w, c7.w
mad r2.xy, c2.x, -r0.w, r0
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0, s5, r2.zwzw, r2
texldd_pp r2, r0, s6, r2.zwzw, r2
mul_pp r0.x, r0.z, r3.w
mul_pp r2.w, r0.z, r2.w
dp2add_sat_pp r0.y, r1, r1, c4.y
add_pp r0.y, -r0.y, c4.z
rsq_pp r0.y, r0.y
rcp_pp r1.z, r0.y
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.y, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.y, r1.x, r0.y, c4.y
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.y, r0.y, r1.x
add_pp r0.y, -r0.y, c4.z
mul_pp r3.w, r0.y, r0.x
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 121 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_BumpMap] 2D 4
SetTexture 2 [cube_CityOverlayTexPOS] 2D 1
SetTexture 3 [cube_CityOverlayTexNEG] 2D 2
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:ahabahaa
eefieceddijmlcefgjheioncdjgponannddcinpnabaaaaaababdaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnibbaaaaeaaaaaaahgaeaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadlcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaa
acaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaacaaaaaadkaabaaaaaaaaaaa
bkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaa
abaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahocaabaaaacaaaaaaagajbaaa
abaaaaaaagaebaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
jgahbaaaacaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaa
ckaabaaaaaaaaaaaamaaaaafbcaabaaaaeaaaaaackaabaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaablaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaa
adaaaaaapgapbaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaaakaabaiaebaaaaaaadaaaaaackaabaaaadaaaaaadcaaaaaj
ecaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaadaaaaaa
aaaaaaaiecaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaackaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
adaaaaaadgaaaaafhcaabaaaacaaaaaapgapbaaaadaaaaaadiaaaaaidcaabaaa
acaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaahicaabaaa
aaaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaakicaabaaaaaaaaaaa
ckaabaaaacaaaaaackiacaaaaaaaaaaabgaaaaaadkaabaaaaaaaaaaadcaaaaak
ecaabaaaaaaaaaaackaabaaaaaaaaaaadkiacaaaaaaaaaaabgaaaaaadkaabaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaacgakbaaaabaaaaaacgakbaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagicaabaaaaaaaaaaa
dkaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
amaaaaafbcaabaaaafaaaaaadkaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahccaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaaeaaaaaabkaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaabkaabaaa
adaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaabnaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdhaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaaodcaabaaaacaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaegaabaaaaaaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaa
ddaaaaajicaabaaaabaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaa
acaaaaaaalaaaaafbcaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaa
adaaaaaadkaabaaaaaaaaaaaalaaaaafccaabaaaacaaaaaadkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaadkaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaa
egaabaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaa
afaaaaaaaagabaaaagaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaapaaaaahccaabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaabkaabaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagajbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaa
aaaaaaaajgahbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahmcaabaaaaaaaaaaa
agbebaaaafaaaaaapgbpbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
aaaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaaapaaaaahccaabaaaaaaaaaaa
agaabaaaabaaaaaafgafbaaaaaaaaaaabaaaaaajecaabaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaakgakbaaaaaaaaaaajgihcaaa
aaaaaaaabkaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaaaaaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaa
aaaaaaaaegaobaaaacaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 275 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexPOS] 2D 1
SetTexture 2 [cube_CityOverlayTexNEG] 2D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_BumpMap] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexPOS [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexPOS [[sampler(1)]]
  ,   texture2d<half> cube_CityOverlayTexNEG [[texture(2)]], sampler _mtlsmp_cube_CityOverlayTexNEG [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _BumpMap [[texture(4)]], sampler _mtlsmp__BumpMap [[sampler(4)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(5)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(6)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexPOS.sample(_mtlsmp_cube_CityOverlayTexPOS, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexNEG.sample(_mtlsmp_cube_CityOverlayTexNEG, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_52, tmpvar_50, half4(half((s_30 >= (half)0.0))));
  half4 tmpvar_54;
  tmpvar_54.x = tmpvar_53.w;
  tmpvar_54.y = tmpvar_53.w;
  tmpvar_54.z = tmpvar_53.w;
  tmpvar_54.w = mix (tmpvar_53.y, mix (tmpvar_53.x, tmpvar_53.z, zxlerp_32), nylerp_31);
  half tmpvar_55;
  half4 v_56;
  v_56 = (tmpvar_54 * _mtl_u.alphaMask1);
  tmpvar_55 = ((v_56.x + v_56.y) + (v_56.z + v_56.w));
  half4 tmpvar_57;
  tmpvar_57.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_57.w = tmpvar_55;
  cityoverlay_4.xyz = tmpvar_57.xyz;
  half2 uv_58;
  half3 detailCoords_59;
  half s_60;
  half nylerp_61;
  half zxlerp_62;
  float3 tmpvar_63;
  tmpvar_63 = abs(tmpvar_33);
  float tmpvar_64;
  tmpvar_64 = float((tmpvar_63.z >= tmpvar_63.x));
  zxlerp_62 = half(tmpvar_64);
  float tmpvar_65;
  tmpvar_65 = float((max (tmpvar_63.x, tmpvar_63.z) >= tmpvar_63.y));
  nylerp_61 = half(tmpvar_65);
  float tmpvar_66;
  tmpvar_66 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_62);
  s_60 = half(tmpvar_66);
  float tmpvar_67;
  tmpvar_67 = sign(mix (tmpvar_33.y, (float)s_60, (float)nylerp_61));
  s_60 = half(tmpvar_67);
  half3 tmpvar_68;
  tmpvar_68.xz = half2(float2(1.0, -1.0));
  tmpvar_68.y = -(s_60);
  half3 tmpvar_69;
  tmpvar_69.xz = half2(float2(1.0, -1.0));
  tmpvar_69.y = s_60;
  float3 tmpvar_70;
  tmpvar_70 = mix (((float3)tmpvar_68 * tmpvar_33.xzy), ((float3)tmpvar_69 * tmpvar_33.zxy), (float3)half3(zxlerp_62));
  detailCoords_59 = half3(tmpvar_70);
  half3 tmpvar_71;
  tmpvar_71.xy = half2(float2(1.0, 1.0));
  tmpvar_71.z = s_60;
  float3 tmpvar_72;
  tmpvar_72 = mix (((float3)tmpvar_71 * tmpvar_33.yxz), (float3)detailCoords_59, (float3)half3(nylerp_61));
  detailCoords_59 = half3(tmpvar_72);
  uv_58 = half2(((float2)((
    ((half)0.5 * detailCoords_59.yz)
   / 
    abs(detailCoords_59.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_73;
  uv_73 = float2(uv_58);
  float2 uvCont_74;
  float2 tmpvar_75;
  float tmpvar_76;
  tmpvar_76 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_75 = abs((uv_73 - tmpvar_76));
  uvCont_74.x = max (tmpvar_75.x, tmpvar_75.y);
  uvCont_74.y = min (tmpvar_75.x, tmpvar_75.y);
  float4 tmpvar_77;
  tmpvar_77.xy = dfdx(uvCont_74);
  tmpvar_77.zw = dfdy(uvCont_74);
  half4 tmpvar_78;
  tmpvar_78 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_58), gradient2d((float2)(tmpvar_77.xy), (float2)(tmpvar_77.zw)));
  half4 tmpvar_79;
  tmpvar_79 = tmpvar_78;
  citydarkoverlaydetail_3.xyz = tmpvar_79.xyz;
  half2 uv_80;
  half3 detailCoords_81;
  half s_82;
  half nylerp_83;
  half zxlerp_84;
  float3 tmpvar_85;
  tmpvar_85 = abs(tmpvar_33);
  float tmpvar_86;
  tmpvar_86 = float((tmpvar_85.z >= tmpvar_85.x));
  zxlerp_84 = half(tmpvar_86);
  float tmpvar_87;
  tmpvar_87 = float((max (tmpvar_85.x, tmpvar_85.z) >= tmpvar_85.y));
  nylerp_83 = half(tmpvar_87);
  float tmpvar_88;
  tmpvar_88 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_84);
  s_82 = half(tmpvar_88);
  float tmpvar_89;
  tmpvar_89 = sign(mix (tmpvar_33.y, (float)s_82, (float)nylerp_83));
  s_82 = half(tmpvar_89);
  half3 tmpvar_90;
  tmpvar_90.xz = half2(float2(1.0, -1.0));
  tmpvar_90.y = -(s_82);
  half3 tmpvar_91;
  tmpvar_91.xz = half2(float2(1.0, -1.0));
  tmpvar_91.y = s_82;
  float3 tmpvar_92;
  tmpvar_92 = mix (((float3)tmpvar_90 * tmpvar_33.xzy), ((float3)tmpvar_91 * tmpvar_33.zxy), (float3)half3(zxlerp_84));
  detailCoords_81 = half3(tmpvar_92);
  half3 tmpvar_93;
  tmpvar_93.xy = half2(float2(1.0, 1.0));
  tmpvar_93.z = s_82;
  float3 tmpvar_94;
  tmpvar_94 = mix (((float3)tmpvar_93 * tmpvar_33.yxz), (float3)detailCoords_81, (float3)half3(nylerp_83));
  detailCoords_81 = half3(tmpvar_94);
  uv_80 = half2(((float2)((
    ((half)0.5 * detailCoords_81.yz)
   / 
    abs(detailCoords_81.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_95;
  uv_95 = float2(uv_80);
  float2 uvCont_96;
  float2 tmpvar_97;
  tmpvar_97 = abs((uv_95 - tmpvar_76));
  uvCont_96.x = max (tmpvar_97.x, tmpvar_97.y);
  uvCont_96.y = min (tmpvar_97.x, tmpvar_97.y);
  float4 tmpvar_98;
  tmpvar_98.xy = dfdx(uvCont_96);
  tmpvar_98.zw = dfdy(uvCont_96);
  half4 tmpvar_99;
  tmpvar_99 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_80), gradient2d((float2)(tmpvar_98.xy), (float2)(tmpvar_98.zw)));
  half4 tmpvar_100;
  tmpvar_100 = tmpvar_99;
  citylightoverlaydetail_2.xyz = tmpvar_100.xyz;
  cityoverlay_4.w = (tmpvar_55 * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_79.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_100.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_100.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_101;
  tmpvar_101 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_102;
  lightDir_102 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_103;
  viewDir_103 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_104;
  atten_104 = tmpvar_101;
  half4 c_105;
  half3 tmpvar_106;
  tmpvar_106 = normalize(lightDir_102);
  lightDir_102 = tmpvar_106;
  half3 tmpvar_107;
  tmpvar_107 = normalize(viewDir_103);
  viewDir_103 = tmpvar_107;
  half3 tmpvar_108;
  tmpvar_108 = normalize(normT_5);
  half tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_106);
  float tmpvar_110;
  half tmpvar_111;
  tmpvar_111 = clamp (dot (normalize(
    (tmpvar_106 + tmpvar_107)
  ), tmpvar_108), (half)0.0, (half)1.0);
  tmpvar_110 = float(tmpvar_111);
  float tmpvar_112;
  tmpvar_112 = (pow (tmpvar_110, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_105.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_109) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_112)) * (float)(atten_104 * (half)2.0)));
  c_105.w = (tmpvar_109 * (atten_104 * (half)2.0));
  float3 tmpvar_113;
  tmpvar_113 = normalize(_mtl_u._SunDir);
  half3 lightDir_114;
  lightDir_114 = half3(tmpvar_113);
  half3 normal_115;
  normal_115 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_116;
  tmpvar_116 = dot (normal_115, lightDir_114);
  color_6 = (c_105 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_116))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_116))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_117;
  tmpvar_117 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_117;
  tmpvar_1 = tmpvar_117;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 118 math, 30 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [cube_CityOverlayTexxn] 2D 0
SetTexture 1 [cube_CityOverlayTexxp] 2D 1
SetTexture 2 [cube_CityOverlayTexyn] 2D 2
SetTexture 3 [cube_CityOverlayTexyp] 2D 3
SetTexture 4 [cube_CityOverlayTexzn] 2D 4
SetTexture 5 [cube_CityOverlayTexzp] 2D 5
SetTexture 6 [_MainTex] 2D 6
SetTexture 7 [_BumpMap] 2D 7
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 8
SetTexture 9 [_CityLightOverlayDetailTex] 2D 9
"ps_3_0
def c2, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c3, 0.999866009, 0, 1, 0.159154937
def c4, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c5, -2, 3.14159274, 0.318309873, 1
def c6, -2, 1.57079637, 0.159154937, 0.5
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
mov r0.xz, c7.xyyw
dp3 r0.w, v0, v0
rsq r0.w, r0.w
mul r1.xyz, r0.w, v0.yxzw
mad r0.w, v0.x, r0.w, -r1.z
cmp r2.xy, r0.w, r1.zyzw, r1.yzzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.z, r1.w, r1.z, r1.y
cmp r2.z, r0.w, r2.z, r1.x
cmp r2.w, -r2.z, c3.y, c3.z
cmp r2.z, r2.z, -c3.y, -c3.z
add_pp r3.y, r2.z, r2.w
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r3.xzw, r1.xyyz, r3.xyxy
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r3.xzww
mul_pp r0.yz, r0, c6.w
rcp r0.x, r0_abs.x
mul_pp r2.zw, r0.x, r0.xyyz
mad_pp r0.xy, r0.yzzw, r0.x, c6.w
add r0.z, -r2_abs.w, r2_abs.z
cmp r2.zw, r0.z, r2_abs, r2_abs.xywz
dsx r3.xz, r2.zyww
dsy r2.zw, r2
texldd_pp r4, r0, s0, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s1, r3.xzzw, r2.zwzw
cmp_pp r0.z, r3.y, r5.w, r4.w
texldd_pp r4, r0, s4, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s5, r3.xzzw, r2.zwzw
cmp_pp r3.w, r3.y, r5.w, r4.w
cmp_pp r0.z, r1.w, r3.w, r0.z
texldd_pp r4, r0, s2, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s3, r3.xzzw, r2.zwzw
mul_pp r0.xy, r0, c1.x
cmp_pp r1.w, r3.y, r5.w, r4.w
cmp_pp r0.z, r0.w, r0.z, r1.w
add r2.zw, -r1_abs.xyzy, r1_abs.xyyz
cmp r1.yw, r2.z, r1_abs.xzzy, r1_abs.xyzz
cmp r0.w, r2.w, c3.y, c3.z
rcp r1.w, r1.w
mul r1.y, r1.w, r1.y
mul r1.w, r1.y, r1.y
mad r2.z, r1.w, c2.x, c2.y
mad r2.z, r1.w, r2.z, c2.z
mad r2.z, r1.w, r2.z, c2.w
mad r1.w, r1.w, r2.z, c3.x
mul r1.y, r1.w, r1.y
mad r1.w, r1.y, c6.x, c6.y
mad r0.w, r1.w, r0.w, r1.y
cmp r1.yz, r1.xzxw, c8.xxyw, c8.xzww
add r0.w, r0.w, r1.y
add r1.y, r0.w, r0.w
cmp r1.w, r2.y, c3.z, c3.y
cmp r1.w, r2.x, c3.y, r1.w
mad r0.w, r1.w, -r1.y, r0.w
mad r2.x, r0.w, c6.z, c6.w
mul r0.w, r0.w, c3.w
abs r0.w, r0.w
mad r1.y, r1_abs.x, c4.x, c4.y
mad r1.y, r1.y, r1_abs.x, c4.z
mad r1.y, r1.y, r1_abs.x, c4.w
add r1.x, -r1_abs.x, c3.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1.x, r1.y
mad r1.y, r1.x, c5.x, c5.y
mad r1.x, r1.y, r1.z, r1.x
mul r2.y, r1.x, c5.z
dsx r1.x, r0.w
dsy r3.x, r0.w
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s6, r1, r3
texldd_pp r1, r2, s7, r1, r3
mad_pp r1.xy, r1.wyzw, -c5.x, -c5.w
add r0.w, r4.w, -c3.z
cmp_pp r0.z, r0.w, c3.y, r0.z
mov r0.w, c6.w
mad r2.xy, c1.x, -r0.w, r0
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0, s8, r2.zwzw, r2
texldd_pp r2, r0, s9, r2.zwzw, r2
mul_pp r0.x, r0.z, r3.w
mul_pp r2.w, r0.z, r2.w
dp2add_sat_pp r0.y, r1, r1, c3.y
add_pp r0.y, -r0.y, c3.z
rsq_pp r0.y, r0.y
rcp_pp r1.z, r0.y
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.y, r4, r1
add_pp r0.y, r0.y, r0.y
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c3.z
mul_sat_pp r0.y, r0.y, r1.x
add_pp r0.y, -r0.y, c3.z
mul_pp r3.w, r0.y, r0.x
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 120 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [_MainTex] 2D 6
SetTexture 1 [_BumpMap] 2D 7
SetTexture 2 [cube_CityOverlayTexxn] 2D 0
SetTexture 3 [cube_CityOverlayTexxp] 2D 1
SetTexture 4 [cube_CityOverlayTexyn] 2D 2
SetTexture 5 [cube_CityOverlayTexyp] 2D 3
SetTexture 6 [cube_CityOverlayTexzn] 2D 4
SetTexture 7 [cube_CityOverlayTexzp] 2D 5
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 8
SetTexture 9 [_CityLightOverlayDetailTex] 2D 9
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:akabakaa
eefiecednejnjnbdhngdjcobjdikipaphpmgjbalabaaaaaalibdaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjibcaaaa
eaaaaaaakgaeaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafkaaaaadaagabaaaajaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaa
fibiaaaeaahabaaaajaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacahaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaapgapbaaaaaaaaaaabgbgbaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
ckbabaaaacaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaaj
bcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
dkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaa
aaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaa
aaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaa
kgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
diaaaaahocaabaaaacaaaaaaagajbaaaabaaaaaaagaebaaaadaaaaaabnaaaaah
icaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaa
pgapbaaaabaaaaaaegacbaaaaaaaaaaajgahbaaaacaaaaaadiaaaaakgcaabaaa
aaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaalaaaaafbcaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafbcaabaaa
aeaaaaaackaabaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaahaaaaaaaagabaaa
afaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaa
egaabaaaaaaaaaaaeghobaaaagaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaiecaabaaaaaaaaaaadkaabaaaafaaaaaadkaabaia
ebaaaaaaagaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadkaabaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaagaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaa
dkaabaaaafaaaaaadkaabaiaebaaaaaaagaaaaaadcaaaaajccaabaaaacaaaaaa
dkaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaagaaaaaaaaaaaaaiecaabaaa
aaaaaaaackaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadcaaaaajecaabaaa
aaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaaafaaaaaaaagabaaaadaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaa
blaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaa
adaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaacaaaaaa
dkaabaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaa
abaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlo
dcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
diphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajccaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaacgakbaaaabaaaaaacgakbaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
ddaaaaahicaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
bkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaag
icaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaaeaaaaaa
dkaabaaaaaaaaaaaamaaaaafbcaabaaaafaaaaaadkaabaaaaaaaaaaadcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaa
akaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahccaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaaeaaaaaabkaabaaaadaaaaaaamaaaaafccaabaaa
afaaaaaabkaabaaaadaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaadaaaaaa
eghobaaaaaaaaaaaaagabaaaagaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
ahaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaabnaaaaahicaabaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdhaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaaodcaabaaaacaaaaaaagiacaiaebaaaaaa
aaaaaaaablaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaegaabaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaia
ibaaaaaaacaaaaaaddaaaaajicaabaaaabaaaaaabkaabaiaibaaaaaaacaaaaaa
akaabaiaibaaaaaaacaaaaaaalaaaaafbcaabaaaacaaaaaadkaabaaaaaaaaaaa
amaaaaafbcaabaaaadaaaaaadkaabaaaaaaaaaaaalaaaaafccaabaaaacaaaaaa
dkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaadkaabaaaabaaaaaaejaaaaan
pcaabaaaaeaaaaaaegaabaaaaaaaaaaaeghobaaaaiaaaaaaaagabaaaaiaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
aaaaaaaaeghobaaaajaaaaaaaagabaaaajaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaeaaaaaa
diaaaaahicaabaaaacaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaapaaaaah
ccaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaaaaaaaaa
bkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaa
bkaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaafgafbaaaaaaaaaaaagajbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaa
baaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaabkaabaaaaaaaaaaabaaaaaajecaabaaa
aaaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaakgakbaaa
aaaaaaaajgihcaaaaaaaaaaabkaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaa
adaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaakoehibdpdicaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaacambebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaa
aaaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaiccaabaaaaaaaaaaa
bkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaa
aeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 274 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [cube_CityOverlayTexxn] 2D 0
SetTexture 1 [cube_CityOverlayTexxp] 2D 1
SetTexture 2 [cube_CityOverlayTexyn] 2D 2
SetTexture 3 [cube_CityOverlayTexyp] 2D 3
SetTexture 4 [cube_CityOverlayTexzn] 2D 4
SetTexture 5 [cube_CityOverlayTexzp] 2D 5
SetTexture 6 [_MainTex] 2D 6
SetTexture 7 [_BumpMap] 2D 7
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 8
SetTexture 9 [_CityLightOverlayDetailTex] 2D 9
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_CityOverlayTexxn [[texture(0)]], sampler _mtlsmp_cube_CityOverlayTexxn [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexxp [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexxp [[sampler(1)]]
  ,   texture2d<half> cube_CityOverlayTexyn [[texture(2)]], sampler _mtlsmp_cube_CityOverlayTexyn [[sampler(2)]]
  ,   texture2d<half> cube_CityOverlayTexyp [[texture(3)]], sampler _mtlsmp_cube_CityOverlayTexyp [[sampler(3)]]
  ,   texture2d<half> cube_CityOverlayTexzn [[texture(4)]], sampler _mtlsmp_cube_CityOverlayTexzn [[sampler(4)]]
  ,   texture2d<half> cube_CityOverlayTexzp [[texture(5)]], sampler _mtlsmp_cube_CityOverlayTexzp [[sampler(5)]]
  ,   texture2d<half> _MainTex [[texture(6)]], sampler _mtlsmp__MainTex [[sampler(6)]]
  ,   texture2d<half> _BumpMap [[texture(7)]], sampler _mtlsmp__BumpMap [[sampler(7)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(8)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(8)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(9)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(9)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexxn.sample(_mtlsmp_cube_CityOverlayTexxn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexxp.sample(_mtlsmp_cube_CityOverlayTexxp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = cube_CityOverlayTexyn.sample(_mtlsmp_cube_CityOverlayTexyn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  half4 tmpvar_55;
  tmpvar_55 = cube_CityOverlayTexyp.sample(_mtlsmp_cube_CityOverlayTexyp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  half4 tmpvar_57;
  tmpvar_57 = cube_CityOverlayTexzn.sample(_mtlsmp_cube_CityOverlayTexzn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  half4 tmpvar_59;
  tmpvar_59 = cube_CityOverlayTexzp.sample(_mtlsmp_cube_CityOverlayTexzp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  half4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, half4(half(
    (s_30 >= (half)0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, half4(
    half((s_30 >= (half)0.0))
  )), mix (tmpvar_58, tmpvar_60, half4(
    half((s_30 >= (half)0.0))
  )), half4(zxlerp_32)), half4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  half2 uv_62;
  half3 detailCoords_63;
  half s_64;
  half nylerp_65;
  half zxlerp_66;
  float3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = half(tmpvar_68);
  float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = half(tmpvar_69);
  float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_66);
  s_64 = half(tmpvar_70);
  float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, (float)s_64, (float)nylerp_65));
  s_64 = half(tmpvar_71);
  half3 tmpvar_72;
  tmpvar_72.xz = half2(float2(1.0, -1.0));
  tmpvar_72.y = -(s_64);
  half3 tmpvar_73;
  tmpvar_73.xz = half2(float2(1.0, -1.0));
  tmpvar_73.y = s_64;
  float3 tmpvar_74;
  tmpvar_74 = mix (((float3)tmpvar_72 * tmpvar_33.xzy), ((float3)tmpvar_73 * tmpvar_33.zxy), (float3)half3(zxlerp_66));
  detailCoords_63 = half3(tmpvar_74);
  half3 tmpvar_75;
  tmpvar_75.xy = half2(float2(1.0, 1.0));
  tmpvar_75.z = s_64;
  float3 tmpvar_76;
  tmpvar_76 = mix (((float3)tmpvar_75 * tmpvar_33.yxz), (float3)detailCoords_63, (float3)half3(nylerp_65));
  detailCoords_63 = half3(tmpvar_76);
  uv_62 = half2(((float2)((
    ((half)0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_77;
  uv_77 = float2(uv_62);
  float2 uvCont_78;
  float2 tmpvar_79;
  float tmpvar_80;
  tmpvar_80 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  float4 tmpvar_81;
  tmpvar_81.xy = dfdx(uvCont_78);
  tmpvar_81.zw = dfdy(uvCont_78);
  half4 tmpvar_82;
  tmpvar_82 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_62), gradient2d((float2)(tmpvar_81.xy), (float2)(tmpvar_81.zw)));
  half4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  half2 uv_84;
  half3 detailCoords_85;
  half s_86;
  half nylerp_87;
  half zxlerp_88;
  float3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = half(tmpvar_90);
  float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = half(tmpvar_91);
  float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_88);
  s_86 = half(tmpvar_92);
  float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, (float)s_86, (float)nylerp_87));
  s_86 = half(tmpvar_93);
  half3 tmpvar_94;
  tmpvar_94.xz = half2(float2(1.0, -1.0));
  tmpvar_94.y = -(s_86);
  half3 tmpvar_95;
  tmpvar_95.xz = half2(float2(1.0, -1.0));
  tmpvar_95.y = s_86;
  float3 tmpvar_96;
  tmpvar_96 = mix (((float3)tmpvar_94 * tmpvar_33.xzy), ((float3)tmpvar_95 * tmpvar_33.zxy), (float3)half3(zxlerp_88));
  detailCoords_85 = half3(tmpvar_96);
  half3 tmpvar_97;
  tmpvar_97.xy = half2(float2(1.0, 1.0));
  tmpvar_97.z = s_86;
  float3 tmpvar_98;
  tmpvar_98 = mix (((float3)tmpvar_97 * tmpvar_33.yxz), (float3)detailCoords_85, (float3)half3(nylerp_87));
  detailCoords_85 = half3(tmpvar_98);
  uv_84 = half2(((float2)((
    ((half)0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_99;
  uv_99 = float2(uv_84);
  float2 uvCont_100;
  float2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  float4 tmpvar_102;
  tmpvar_102.xy = dfdx(uvCont_100);
  tmpvar_102.zw = dfdy(uvCont_100);
  half4 tmpvar_103;
  tmpvar_103 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_84), gradient2d((float2)(tmpvar_102.xy), (float2)(tmpvar_102.zw)));
  half4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_105;
  lightDir_105 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_106;
  viewDir_106 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_107;
  half3 tmpvar_108;
  tmpvar_108 = normalize(lightDir_105);
  lightDir_105 = tmpvar_108;
  half3 tmpvar_109;
  tmpvar_109 = normalize(viewDir_106);
  viewDir_106 = tmpvar_109;
  half3 tmpvar_110;
  tmpvar_110 = normalize(normT_5);
  half tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_108);
  float tmpvar_112;
  half tmpvar_113;
  tmpvar_113 = clamp (dot (normalize(
    (tmpvar_108 + tmpvar_109)
  ), tmpvar_110), (half)0.0, (half)1.0);
  tmpvar_112 = float(tmpvar_113);
  float tmpvar_114;
  tmpvar_114 = (pow (tmpvar_112, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_107.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_111) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_114)) * 2.0));
  c_107.w = (tmpvar_111 * (half)2.0);
  float3 tmpvar_115;
  tmpvar_115 = normalize(_mtl_u._SunDir);
  half3 lightDir_116;
  lightDir_116 = half3(tmpvar_115);
  half3 normal_117;
  normal_117 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_118;
  tmpvar_118 = dot (normal_117, lightDir_116);
  color_6 = (c_107 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_118))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_118))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_119;
  tmpvar_119 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_119;
  tmpvar_1 = tmpvar_119;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 119 math, 31 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
Float 1 [_CityOverlayDetailScale]
Vector 0 [_SunDir]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexxn] 2D 1
SetTexture 2 [cube_CityOverlayTexxp] 2D 2
SetTexture 3 [cube_CityOverlayTexyn] 2D 3
SetTexture 4 [cube_CityOverlayTexyp] 2D 4
SetTexture 5 [cube_CityOverlayTexzn] 2D 5
SetTexture 6 [cube_CityOverlayTexzp] 2D 6
SetTexture 7 [_MainTex] 2D 7
SetTexture 8 [_BumpMap] 2D 8
SetTexture 9 [_CityDarkOverlayDetailTex] 2D 9
SetTexture 10 [_CityLightOverlayDetailTex] 2D 10
"ps_3_0
def c2, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c3, 0.999866009, 0, 1, 0.159154937
def c4, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c5, -2, 3.14159274, 0.318309873, 1
def c6, -2, 1.57079637, 0.159154937, 0.5
def c7, 1, -1, -10, 1.00999999
def c8, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
mov r0.xz, c7.xyyw
dp3 r0.w, v0, v0
rsq r0.w, r0.w
mul r1.xyz, r0.w, v0.yxzw
mad r0.w, v0.x, r0.w, -r1.z
cmp r2.xy, r0.w, r1.zyzw, r1.yzzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.z, r1.w, r1.z, r1.y
cmp r2.z, r0.w, r2.z, r1.x
cmp r2.w, -r2.z, c3.y, c3.z
cmp r2.z, r2.z, -c3.y, -c3.z
add_pp r3.y, r2.z, r2.w
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r3.xzw, r1.xyyz, r3.xyxy
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r3.xzww
mul_pp r0.yz, r0, c6.w
rcp r0.x, r0_abs.x
mul_pp r2.zw, r0.x, r0.xyyz
mad_pp r0.xy, r0.yzzw, r0.x, c6.w
add r0.z, -r2_abs.w, r2_abs.z
cmp r2.zw, r0.z, r2_abs, r2_abs.xywz
dsx r3.xz, r2.zyww
dsy r2.zw, r2
texldd_pp r4, r0, s1, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s2, r3.xzzw, r2.zwzw
cmp_pp r0.z, r3.y, r5.w, r4.w
texldd_pp r4, r0, s5, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s6, r3.xzzw, r2.zwzw
cmp_pp r3.w, r3.y, r5.w, r4.w
cmp_pp r0.z, r1.w, r3.w, r0.z
texldd_pp r4, r0, s3, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s4, r3.xzzw, r2.zwzw
mul_pp r0.xy, r0, c1.x
cmp_pp r1.w, r3.y, r5.w, r4.w
cmp_pp r0.z, r0.w, r0.z, r1.w
add r2.zw, -r1_abs.xyzy, r1_abs.xyyz
cmp r1.yw, r2.z, r1_abs.xzzy, r1_abs.xyzz
cmp r0.w, r2.w, c3.y, c3.z
rcp r1.w, r1.w
mul r1.y, r1.w, r1.y
mul r1.w, r1.y, r1.y
mad r2.z, r1.w, c2.x, c2.y
mad r2.z, r1.w, r2.z, c2.z
mad r2.z, r1.w, r2.z, c2.w
mad r1.w, r1.w, r2.z, c3.x
mul r1.y, r1.w, r1.y
mad r1.w, r1.y, c6.x, c6.y
mad r0.w, r1.w, r0.w, r1.y
cmp r1.yz, r1.xzxw, c8.xxyw, c8.xzww
add r0.w, r0.w, r1.y
add r1.y, r0.w, r0.w
cmp r1.w, r2.y, c3.z, c3.y
cmp r1.w, r2.x, c3.y, r1.w
mad r0.w, r1.w, -r1.y, r0.w
mad r2.x, r0.w, c6.z, c6.w
mul r0.w, r0.w, c3.w
abs r0.w, r0.w
mad r1.y, r1_abs.x, c4.x, c4.y
mad r1.y, r1.y, r1_abs.x, c4.z
mad r1.y, r1.y, r1_abs.x, c4.w
add r1.x, -r1_abs.x, c3.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1.x, r1.y
mad r1.y, r1.x, c5.x, c5.y
mad r1.x, r1.y, r1.z, r1.x
mul r2.y, r1.x, c5.z
dsx r1.x, r0.w
dsy r3.x, r0.w
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s7, r1, r3
texldd_pp r1, r2, s8, r1, r3
mad_pp r1.xy, r1.wyzw, -c5.x, -c5.w
add r0.w, r4.w, -c3.z
cmp_pp r0.z, r0.w, c3.y, r0.z
mov r0.w, c6.w
mad r2.xy, c1.x, -r0.w, r0
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0, s9, r2.zwzw, r2
texldd_pp r2, r0, s10, r2.zwzw, r2
mul_pp r0.x, r0.z, r3.w
mul_pp r2.w, r0.z, r2.w
dp2add_sat_pp r0.y, r1, r1, c3.y
add_pp r0.y, -r0.y, c3.z
rsq_pp r0.y, r0.y
rcp_pp r1.z, r0.y
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.y, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.y, r1.x, r0.y, c3.y
nrm_pp r1.xyz, c0
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c7.w
mul_sat_pp r0.z, r0.z, c7.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c3.z
mul_sat_pp r0.y, r0.y, r1.x
add_pp r0.y, -r0.y, c3.z
mul_pp r3.w, r0.y, r0.x
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 121 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [_MainTex] 2D 7
SetTexture 1 [_BumpMap] 2D 8
SetTexture 2 [cube_CityOverlayTexxn] 2D 1
SetTexture 3 [cube_CityOverlayTexxp] 2D 2
SetTexture 4 [cube_CityOverlayTexyn] 2D 3
SetTexture 5 [cube_CityOverlayTexyp] 2D 4
SetTexture 6 [cube_CityOverlayTexzn] 2D 5
SetTexture 7 [cube_CityOverlayTexzp] 2D 6
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 9
SetTexture 9 [_CityLightOverlayDetailTex] 2D 10
SetTexture 10 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:alabalaa
eefiecedbbkonppnknpnhkmdffnkpdfaiiihngcpabaaaaaadibeaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaabdaaaaeaaaaaaamaaeaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafkaaaaad
aagabaaaajaaaaaafkaaaaadaagabaaaakaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaa
ffffaaaafibiaaaeaahabaaaajaaaaaaffffaaaafibiaaaeaahabaaaakaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadlcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacahaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaapgapbaaaaaaaaaaabgbgbaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
ckbabaaaacaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaaj
bcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
dkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaa
aaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaa
aaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaa
kgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
diaaaaahocaabaaaacaaaaaaagajbaaaabaaaaaaagaebaaaadaaaaaabnaaaaah
icaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaa
pgapbaaaabaaaaaaegacbaaaaaaaaaaajgahbaaaacaaaaaadiaaaaakgcaabaaa
aaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaalaaaaafbcaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafbcaabaaa
aeaaaaaackaabaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaahaaaaaaaagabaaa
agaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaa
egaabaaaaaaaaaaaeghobaaaagaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaiecaabaaaaaaaaaaadkaabaaaafaaaaaadkaabaia
ebaaaaaaagaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadkaabaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaa
eghobaaaadaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaagaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaa
dkaabaaaafaaaaaadkaabaiaebaaaaaaagaaaaaadcaaaaajccaabaaaacaaaaaa
dkaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaagaaaaaaaaaaaaaiecaabaaa
aaaaaaaackaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadcaaaaajecaabaaa
aaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaaafaaaaaaaagabaaaaeaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaa
blaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaa
adaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaacaaaaaa
dkaabaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaa
abaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlo
dcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
diphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajccaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaacgakbaaaabaaaaaacgakbaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
ddaaaaahicaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
bkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaag
icaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaaeaaaaaa
dkaabaaaaaaaaaaaamaaaaafbcaabaaaafaaaaaadkaabaaaaaaaaaaadcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaa
akaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahccaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaaeaaaaaabkaabaaaadaaaaaaamaaaaafccaabaaa
afaaaaaabkaabaaaadaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaadaaaaaa
eghobaaaaaaaaaaaaagabaaaahaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aiaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaapdcaabaaaabaaaaaa
hgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaabnaaaaahicaabaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdhaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaaodcaabaaaacaaaaaaagiacaiaebaaaaaa
aaaaaaaablaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaegaabaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaacaaaaaaakaabaia
ibaaaaaaacaaaaaaddaaaaajicaabaaaabaaaaaabkaabaiaibaaaaaaacaaaaaa
akaabaiaibaaaaaaacaaaaaaalaaaaafbcaabaaaacaaaaaadkaabaaaaaaaaaaa
amaaaaafbcaabaaaadaaaaaadkaabaaaaaaaaaaaalaaaaafccaabaaaacaaaaaa
dkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaadkaabaaaabaaaaaaejaaaaan
pcaabaaaaeaaaaaaegaabaaaaaaaaaaaeghobaaaaiaaaaaaaagabaaaajaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
aaaaaaaaeghobaaaajaaaaaaaagabaaaakaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaeaaaaaa
diaaaaahicaabaaaacaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaapaaaaah
ccaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaabaaaaaaddaaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaaaaaaaaa
bkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaabaaaaaa
bkaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaafgafbaaaaaaaaaaaagajbaaaabaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaa
baaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaah
mcaabaaaaaaaaaaaagbebaaaafaaaaaapgbpbaaaafaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaaaaaaaaaeghobaaaakaaaaaaaagabaaaaaaaaaaaapaaaaah
ccaabaaaaaaaaaaaagaabaaaabaaaaaafgafbaaaaaaaaaaabaaaaaajecaabaaa
aaaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaaaaaaaaaabkaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaakgakbaaa
aaaaaaaajgihcaaaaaaaaaaabkaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaa
adaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaakoehibdpdicaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaacambebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaa
aaaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaiccaabaaaaaaaaaaa
bkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaeaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaa
aeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 276 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexxn] 2D 1
SetTexture 2 [cube_CityOverlayTexxp] 2D 2
SetTexture 3 [cube_CityOverlayTexyn] 2D 3
SetTexture 4 [cube_CityOverlayTexyp] 2D 4
SetTexture 5 [cube_CityOverlayTexzn] 2D 5
SetTexture 6 [cube_CityOverlayTexzp] 2D 6
SetTexture 7 [_MainTex] 2D 7
SetTexture 8 [_BumpMap] 2D 8
SetTexture 9 [_CityDarkOverlayDetailTex] 2D 9
SetTexture 10 [_CityLightOverlayDetailTex] 2D 10
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
Float 8 [_SpecularPower]
VectorHalf 16 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexxn [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexxn [[sampler(1)]]
  ,   texture2d<half> cube_CityOverlayTexxp [[texture(2)]], sampler _mtlsmp_cube_CityOverlayTexxp [[sampler(2)]]
  ,   texture2d<half> cube_CityOverlayTexyn [[texture(3)]], sampler _mtlsmp_cube_CityOverlayTexyn [[sampler(3)]]
  ,   texture2d<half> cube_CityOverlayTexyp [[texture(4)]], sampler _mtlsmp_cube_CityOverlayTexyp [[sampler(4)]]
  ,   texture2d<half> cube_CityOverlayTexzn [[texture(5)]], sampler _mtlsmp_cube_CityOverlayTexzn [[sampler(5)]]
  ,   texture2d<half> cube_CityOverlayTexzp [[texture(6)]], sampler _mtlsmp_cube_CityOverlayTexzp [[sampler(6)]]
  ,   texture2d<half> _MainTex [[texture(7)]], sampler _mtlsmp__MainTex [[sampler(7)]]
  ,   texture2d<half> _BumpMap [[texture(8)]], sampler _mtlsmp__BumpMap [[sampler(8)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(9)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(9)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(10)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(10)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexxn.sample(_mtlsmp_cube_CityOverlayTexxn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexxp.sample(_mtlsmp_cube_CityOverlayTexxp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = cube_CityOverlayTexyn.sample(_mtlsmp_cube_CityOverlayTexyn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  half4 tmpvar_55;
  tmpvar_55 = cube_CityOverlayTexyp.sample(_mtlsmp_cube_CityOverlayTexyp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  half4 tmpvar_57;
  tmpvar_57 = cube_CityOverlayTexzn.sample(_mtlsmp_cube_CityOverlayTexzn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  half4 tmpvar_59;
  tmpvar_59 = cube_CityOverlayTexzp.sample(_mtlsmp_cube_CityOverlayTexzp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  half4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_54, tmpvar_56, half4(half(
    (s_30 >= (half)0.0)
  ))), mix (mix (tmpvar_50, tmpvar_52, half4(
    half((s_30 >= (half)0.0))
  )), mix (tmpvar_58, tmpvar_60, half4(
    half((s_30 >= (half)0.0))
  )), half4(zxlerp_32)), half4(nylerp_31));
  cityoverlay_4.xyz = tmpvar_61.xyz;
  half2 uv_62;
  half3 detailCoords_63;
  half s_64;
  half nylerp_65;
  half zxlerp_66;
  float3 tmpvar_67;
  tmpvar_67 = abs(tmpvar_33);
  float tmpvar_68;
  tmpvar_68 = float((tmpvar_67.z >= tmpvar_67.x));
  zxlerp_66 = half(tmpvar_68);
  float tmpvar_69;
  tmpvar_69 = float((max (tmpvar_67.x, tmpvar_67.z) >= tmpvar_67.y));
  nylerp_65 = half(tmpvar_69);
  float tmpvar_70;
  tmpvar_70 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_66);
  s_64 = half(tmpvar_70);
  float tmpvar_71;
  tmpvar_71 = sign(mix (tmpvar_33.y, (float)s_64, (float)nylerp_65));
  s_64 = half(tmpvar_71);
  half3 tmpvar_72;
  tmpvar_72.xz = half2(float2(1.0, -1.0));
  tmpvar_72.y = -(s_64);
  half3 tmpvar_73;
  tmpvar_73.xz = half2(float2(1.0, -1.0));
  tmpvar_73.y = s_64;
  float3 tmpvar_74;
  tmpvar_74 = mix (((float3)tmpvar_72 * tmpvar_33.xzy), ((float3)tmpvar_73 * tmpvar_33.zxy), (float3)half3(zxlerp_66));
  detailCoords_63 = half3(tmpvar_74);
  half3 tmpvar_75;
  tmpvar_75.xy = half2(float2(1.0, 1.0));
  tmpvar_75.z = s_64;
  float3 tmpvar_76;
  tmpvar_76 = mix (((float3)tmpvar_75 * tmpvar_33.yxz), (float3)detailCoords_63, (float3)half3(nylerp_65));
  detailCoords_63 = half3(tmpvar_76);
  uv_62 = half2(((float2)((
    ((half)0.5 * detailCoords_63.yz)
   / 
    abs(detailCoords_63.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_77;
  uv_77 = float2(uv_62);
  float2 uvCont_78;
  float2 tmpvar_79;
  float tmpvar_80;
  tmpvar_80 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_79 = abs((uv_77 - tmpvar_80));
  uvCont_78.x = max (tmpvar_79.x, tmpvar_79.y);
  uvCont_78.y = min (tmpvar_79.x, tmpvar_79.y);
  float4 tmpvar_81;
  tmpvar_81.xy = dfdx(uvCont_78);
  tmpvar_81.zw = dfdy(uvCont_78);
  half4 tmpvar_82;
  tmpvar_82 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_62), gradient2d((float2)(tmpvar_81.xy), (float2)(tmpvar_81.zw)));
  half4 tmpvar_83;
  tmpvar_83 = tmpvar_82;
  citydarkoverlaydetail_3.xyz = tmpvar_83.xyz;
  half2 uv_84;
  half3 detailCoords_85;
  half s_86;
  half nylerp_87;
  half zxlerp_88;
  float3 tmpvar_89;
  tmpvar_89 = abs(tmpvar_33);
  float tmpvar_90;
  tmpvar_90 = float((tmpvar_89.z >= tmpvar_89.x));
  zxlerp_88 = half(tmpvar_90);
  float tmpvar_91;
  tmpvar_91 = float((max (tmpvar_89.x, tmpvar_89.z) >= tmpvar_89.y));
  nylerp_87 = half(tmpvar_91);
  float tmpvar_92;
  tmpvar_92 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_88);
  s_86 = half(tmpvar_92);
  float tmpvar_93;
  tmpvar_93 = sign(mix (tmpvar_33.y, (float)s_86, (float)nylerp_87));
  s_86 = half(tmpvar_93);
  half3 tmpvar_94;
  tmpvar_94.xz = half2(float2(1.0, -1.0));
  tmpvar_94.y = -(s_86);
  half3 tmpvar_95;
  tmpvar_95.xz = half2(float2(1.0, -1.0));
  tmpvar_95.y = s_86;
  float3 tmpvar_96;
  tmpvar_96 = mix (((float3)tmpvar_94 * tmpvar_33.xzy), ((float3)tmpvar_95 * tmpvar_33.zxy), (float3)half3(zxlerp_88));
  detailCoords_85 = half3(tmpvar_96);
  half3 tmpvar_97;
  tmpvar_97.xy = half2(float2(1.0, 1.0));
  tmpvar_97.z = s_86;
  float3 tmpvar_98;
  tmpvar_98 = mix (((float3)tmpvar_97 * tmpvar_33.yxz), (float3)detailCoords_85, (float3)half3(nylerp_87));
  detailCoords_85 = half3(tmpvar_98);
  uv_84 = half2(((float2)((
    ((half)0.5 * detailCoords_85.yz)
   / 
    abs(detailCoords_85.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_99;
  uv_99 = float2(uv_84);
  float2 uvCont_100;
  float2 tmpvar_101;
  tmpvar_101 = abs((uv_99 - tmpvar_80));
  uvCont_100.x = max (tmpvar_101.x, tmpvar_101.y);
  uvCont_100.y = min (tmpvar_101.x, tmpvar_101.y);
  float4 tmpvar_102;
  tmpvar_102.xy = dfdx(uvCont_100);
  tmpvar_102.zw = dfdy(uvCont_100);
  half4 tmpvar_103;
  tmpvar_103 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_84), gradient2d((float2)(tmpvar_102.xy), (float2)(tmpvar_102.zw)));
  half4 tmpvar_104;
  tmpvar_104 = tmpvar_103;
  citylightoverlaydetail_2.xyz = tmpvar_104.xyz;
  cityoverlay_4.w = (tmpvar_61.w * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_83.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_104.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_104.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_105;
  tmpvar_105 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_106;
  lightDir_106 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_107;
  viewDir_107 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_108;
  atten_108 = tmpvar_105;
  half4 c_109;
  half3 tmpvar_110;
  tmpvar_110 = normalize(lightDir_106);
  lightDir_106 = tmpvar_110;
  half3 tmpvar_111;
  tmpvar_111 = normalize(viewDir_107);
  viewDir_107 = tmpvar_111;
  half3 tmpvar_112;
  tmpvar_112 = normalize(normT_5);
  half tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_110);
  float tmpvar_114;
  half tmpvar_115;
  tmpvar_115 = clamp (dot (normalize(
    (tmpvar_110 + tmpvar_111)
  ), tmpvar_112), (half)0.0, (half)1.0);
  tmpvar_114 = float(tmpvar_115);
  float tmpvar_116;
  tmpvar_116 = (pow (tmpvar_114, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_109.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_113) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_116)) * (float)(atten_108 * (half)2.0)));
  c_109.w = (tmpvar_113 * (atten_108 * (half)2.0));
  float3 tmpvar_117;
  tmpvar_117 = normalize(_mtl_u._SunDir);
  half3 lightDir_118;
  lightDir_118 = half3(tmpvar_117);
  half3 normal_119;
  normal_119 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_120;
  tmpvar_120 = dot (normal_119, lightDir_118);
  color_6 = (c_109 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_120))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_120))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_121;
  tmpvar_121 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_121;
  tmpvar_1 = tmpvar_121;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 123 math, 30 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [cube_CityOverlayTexxn] 2D 0
SetTexture 1 [cube_CityOverlayTexxp] 2D 1
SetTexture 2 [cube_CityOverlayTexyn] 2D 2
SetTexture 3 [cube_CityOverlayTexyp] 2D 3
SetTexture 4 [cube_CityOverlayTexzn] 2D 4
SetTexture 5 [cube_CityOverlayTexzp] 2D 5
SetTexture 6 [_MainTex] 2D 6
SetTexture 7 [_BumpMap] 2D 7
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 8
SetTexture 9 [_CityLightOverlayDetailTex] 2D 9
"ps_3_0
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c6, -2, 3.14159274, 0.318309873, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
mov r0.xz, c8.xyyw
dp3 r0.w, v0, v0
rsq r0.w, r0.w
mul r1.xyz, r0.w, v0.yxzw
mad r0.w, v0.x, r0.w, -r1.z
cmp r2.xy, r0.w, r1.zyzw, r1.yzzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.z, r1.w, r1.z, r1.y
cmp r2.z, r0.w, r2.z, r1.x
cmp r2.w, -r2.z, c4.y, c4.z
cmp r2.z, r2.z, -c4.y, -c4.z
add_pp r3.y, r2.z, r2.w
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r3.xzw, r1.xyyz, r3.xyxy
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r3.xzww
mul_pp r0.yz, r0, c7.w
rcp r0.x, r0_abs.x
mul_pp r2.zw, r0.x, r0.xyyz
mad_pp r0.xy, r0.yzzw, r0.x, c7.w
add r0.z, -r2_abs.w, r2_abs.z
cmp r2.zw, r0.z, r2_abs, r2_abs.xywz
dsx r3.xz, r2.zyww
dsy r2.zw, r2
texldd_pp r4, r0, s0, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s1, r3.xzzw, r2.zwzw
cmp_pp r4, r3.y, r5, r4
texldd_pp r5, r0, s4, r3.xzzw, r2.zwzw
texldd_pp r6, r0, s5, r3.xzzw, r2.zwzw
cmp_pp r5, r3.y, r6, r5
cmp_pp r4, r1.w, r5, r4
texldd_pp r5, r0, s2, r3.xzzw, r2.zwzw
texldd_pp r6, r0, s3, r3.xzzw, r2.zwzw
mul_pp r0.xy, r0, c2.x
cmp_pp r3, r3.y, r6, r5
cmp_pp r3, r0.w, r4, r3
mul_pp r0.zw, r3.xyxy, c0.xyxy
add_pp r0.z, r0.w, r0.z
mad_pp r0.z, r3.z, c0.z, r0.z
mad_pp r0.z, r3.w, c0.w, r0.z
add r2.zw, -r1_abs.xyzy, r1_abs.xyyz
cmp r1.yw, r2.z, r1_abs.xzzy, r1_abs.xyzz
cmp r0.w, r2.w, c4.y, c4.z
rcp r1.w, r1.w
mul r1.y, r1.w, r1.y
mul r1.w, r1.y, r1.y
mad r2.z, r1.w, c3.x, c3.y
mad r2.z, r1.w, r2.z, c3.z
mad r2.z, r1.w, r2.z, c3.w
mad r1.w, r1.w, r2.z, c4.x
mul r1.y, r1.w, r1.y
mad r1.w, r1.y, c7.x, c7.y
mad r0.w, r1.w, r0.w, r1.y
cmp r1.yz, r1.xzxw, c9.xxyw, c9.xzww
add r0.w, r0.w, r1.y
add r1.y, r0.w, r0.w
cmp r1.w, r2.y, c4.z, c4.y
cmp r1.w, r2.x, c4.y, r1.w
mad r0.w, r1.w, -r1.y, r0.w
mad r2.x, r0.w, c7.z, c7.w
mul r0.w, r0.w, c4.w
abs r0.w, r0.w
mad r1.y, r1_abs.x, c5.x, c5.y
mad r1.y, r1.y, r1_abs.x, c5.z
mad r1.y, r1.y, r1_abs.x, c5.w
add r1.x, -r1_abs.x, c4.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1.x, r1.y
mad r1.y, r1.x, c6.x, c6.y
mad r1.x, r1.y, r1.z, r1.x
mul r2.y, r1.x, c6.z
dsx r1.x, r0.w
dsy r3.x, r0.w
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s6, r1, r3
texldd_pp r1, r2, s7, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
add r0.w, r4.w, -c4.z
cmp_pp r0.w, r0.w, c4.y, c4.z
mul_pp r0.z, r0.w, r0.z
mov r0.w, c7.w
mad r2.xy, c2.x, -r0.w, r0
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0, s8, r2.zwzw, r2
texldd_pp r2, r0, s9, r2.zwzw, r2
mul_pp r0.x, r0.z, r3.w
mul_pp r2.w, r0.z, r2.w
dp2add_sat_pp r0.y, r1, r1, c4.y
add_pp r0.y, -r0.y, c4.z
rsq_pp r0.y, r0.y
rcp_pp r1.z, r0.y
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.y, r4, r1
add_pp r0.y, r0.y, r0.y
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.y, r0.y, r1.x
add_pp r0.y, -r0.y, c4.z
mul_pp r3.w, r0.y, r0.x
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 124 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [_MainTex] 2D 6
SetTexture 1 [_BumpMap] 2D 7
SetTexture 2 [cube_CityOverlayTexxn] 2D 0
SetTexture 3 [cube_CityOverlayTexxp] 2D 1
SetTexture 4 [cube_CityOverlayTexyn] 2D 2
SetTexture 5 [cube_CityOverlayTexyp] 2D 3
SetTexture 6 [cube_CityOverlayTexzn] 2D 4
SetTexture 7 [cube_CityOverlayTexzp] 2D 5
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 8
SetTexture 9 [_CityLightOverlayDetailTex] 2D 9
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:akabakaa
eefiecedefmlohjfnnnemhdhjnfnogkfnbpbhainabaaaaaaeebeaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebdaaaa
eaaaaaaamjaeaaaafjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafkaaaaadaagabaaaajaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaa
fibiaaaeaahabaaaajaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaiaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaapgapbaaaaaaaaaaabgbgbaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
ckbabaaaacaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaaj
bcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
dkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaa
aaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaa
aaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaa
kgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
diaaaaahocaabaaaacaaaaaaagajbaaaabaaaaaaagaebaaaadaaaaaabnaaaaah
icaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaa
pgapbaaaabaaaaaaegacbaaaaaaaaaaajgahbaaaacaaaaaadiaaaaakgcaabaaa
aaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaalaaaaafbcaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafbcaabaaa
aeaaaaaackaabaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaahaaaaaaaagabaaa
afaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaa
egaabaaaaaaaaaaaeghobaaaagaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaia
ebaaaaaaagaaaaaadcaaaaajpcaabaaaafaaaaaapgapbaaaaaaaaaaaegaobaaa
afaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaaaaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaahaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaagaaaaaa
egaobaaaagaaaaaaegaobaiaebaaaaaaahaaaaaadcaaaaajpcaabaaaagaaaaaa
pgapbaaaaaaaaaaaegaobaaaagaaaaaaegaobaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaa
acaaaaaaagaabaaaacaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaafaaaaaaaagabaaaadaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaa
blaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaadaaaaaapgapbaaaaaaaaaaaegaobaaaaeaaaaaa
egaobaaaadaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaaegaobaaaadaaaaaadiaaaaaimcaabaaaaaaaaaaaagaebaaaacaaaaaa
agiecaaaaaaaaaaabgaaaaaaaaaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaakecaabaaaaaaaaaaackaabaaaacaaaaaackiacaaa
aaaaaaaabgaaaaaackaabaaaaaaaaaaadcaaaaakecaabaaaaaaaaaaadkaabaaa
acaaaaaadkiacaaaaaaaaaaabgaaaaaackaabaaaaaaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
bkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaa
cgakbaaaabaaaaaacgakbaiaebaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaabaaaaaadeaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodgaaaaagicaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaa
alaaaaafbcaabaaaaeaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaaafaaaaaa
dkaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdp
aaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahccaabaaaabaaaaaa
bkaabaaaacaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaaeaaaaaabkaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaabkaabaaaadaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaahaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaabnaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdhaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaodcaabaaa
acaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaegaabaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaddaaaaajicaabaaaabaaaaaa
bkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaalaaaaafbcaabaaa
acaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaaadaaaaaadkaabaaaaaaaaaaa
alaaaaafccaabaaaacaaaaaadkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaa
dkaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaaaaaaaaaeghobaaa
aiaaaaaaaagabaaaaiaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaaajaaaaaaaagabaaaajaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaahbcaabaaaaaaaaaaackaabaaa
aaaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaaaaaaaaa
dkaabaaaacaaaaaaapaaaaahccaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaabkaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaaagajbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaabkaabaaa
aaaaaaaabaaaaaajecaabaaaaaaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaa
aaaaaaaabkaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaakgakbaaaaaaaaaaajgihcaaaaaaaaaaabkaaaaaabaaaaaah
ecaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdicaaaahccaabaaaaaaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
aaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaaeaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaai
pcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaaj
pccabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 279 math, 10 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [cube_CityOverlayTexxn] 2D 0
SetTexture 1 [cube_CityOverlayTexxp] 2D 1
SetTexture 2 [cube_CityOverlayTexyn] 2D 2
SetTexture 3 [cube_CityOverlayTexyp] 2D 3
SetTexture 4 [cube_CityOverlayTexzn] 2D 4
SetTexture 5 [cube_CityOverlayTexzp] 2D 5
SetTexture 6 [_MainTex] 2D 6
SetTexture 7 [_BumpMap] 2D 7
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 8
SetTexture 9 [_CityLightOverlayDetailTex] 2D 9
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_CityOverlayTexxn [[texture(0)]], sampler _mtlsmp_cube_CityOverlayTexxn [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexxp [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexxp [[sampler(1)]]
  ,   texture2d<half> cube_CityOverlayTexyn [[texture(2)]], sampler _mtlsmp_cube_CityOverlayTexyn [[sampler(2)]]
  ,   texture2d<half> cube_CityOverlayTexyp [[texture(3)]], sampler _mtlsmp_cube_CityOverlayTexyp [[sampler(3)]]
  ,   texture2d<half> cube_CityOverlayTexzn [[texture(4)]], sampler _mtlsmp_cube_CityOverlayTexzn [[sampler(4)]]
  ,   texture2d<half> cube_CityOverlayTexzp [[texture(5)]], sampler _mtlsmp_cube_CityOverlayTexzp [[sampler(5)]]
  ,   texture2d<half> _MainTex [[texture(6)]], sampler _mtlsmp__MainTex [[sampler(6)]]
  ,   texture2d<half> _BumpMap [[texture(7)]], sampler _mtlsmp__BumpMap [[sampler(7)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(8)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(8)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(9)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(9)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexxn.sample(_mtlsmp_cube_CityOverlayTexxn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexxp.sample(_mtlsmp_cube_CityOverlayTexxp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = cube_CityOverlayTexyn.sample(_mtlsmp_cube_CityOverlayTexyn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  half4 tmpvar_55;
  tmpvar_55 = cube_CityOverlayTexyp.sample(_mtlsmp_cube_CityOverlayTexyp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  half4 tmpvar_57;
  tmpvar_57 = cube_CityOverlayTexzn.sample(_mtlsmp_cube_CityOverlayTexzn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  half4 tmpvar_59;
  tmpvar_59 = cube_CityOverlayTexzp.sample(_mtlsmp_cube_CityOverlayTexzp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  half tmpvar_61;
  half4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, half4(
    half((s_30 >= (half)0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, half4(half((s_30 >= (half)0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, half4(half((s_30 >= (half)0.0))))
  , half4(zxlerp_32)), half4(nylerp_31)) * _mtl_u.alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  half4 tmpvar_63;
  tmpvar_63.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  half2 uv_64;
  half3 detailCoords_65;
  half s_66;
  half nylerp_67;
  half zxlerp_68;
  float3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = half(tmpvar_70);
  float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = half(tmpvar_71);
  float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_68);
  s_66 = half(tmpvar_72);
  float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, (float)s_66, (float)nylerp_67));
  s_66 = half(tmpvar_73);
  half3 tmpvar_74;
  tmpvar_74.xz = half2(float2(1.0, -1.0));
  tmpvar_74.y = -(s_66);
  half3 tmpvar_75;
  tmpvar_75.xz = half2(float2(1.0, -1.0));
  tmpvar_75.y = s_66;
  float3 tmpvar_76;
  tmpvar_76 = mix (((float3)tmpvar_74 * tmpvar_33.xzy), ((float3)tmpvar_75 * tmpvar_33.zxy), (float3)half3(zxlerp_68));
  detailCoords_65 = half3(tmpvar_76);
  half3 tmpvar_77;
  tmpvar_77.xy = half2(float2(1.0, 1.0));
  tmpvar_77.z = s_66;
  float3 tmpvar_78;
  tmpvar_78 = mix (((float3)tmpvar_77 * tmpvar_33.yxz), (float3)detailCoords_65, (float3)half3(nylerp_67));
  detailCoords_65 = half3(tmpvar_78);
  uv_64 = half2(((float2)((
    ((half)0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_79;
  uv_79 = float2(uv_64);
  float2 uvCont_80;
  float2 tmpvar_81;
  float tmpvar_82;
  tmpvar_82 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  float4 tmpvar_83;
  tmpvar_83.xy = dfdx(uvCont_80);
  tmpvar_83.zw = dfdy(uvCont_80);
  half4 tmpvar_84;
  tmpvar_84 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_64), gradient2d((float2)(tmpvar_83.xy), (float2)(tmpvar_83.zw)));
  half4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  half2 uv_86;
  half3 detailCoords_87;
  half s_88;
  half nylerp_89;
  half zxlerp_90;
  float3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = half(tmpvar_92);
  float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = half(tmpvar_93);
  float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_90);
  s_88 = half(tmpvar_94);
  float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, (float)s_88, (float)nylerp_89));
  s_88 = half(tmpvar_95);
  half3 tmpvar_96;
  tmpvar_96.xz = half2(float2(1.0, -1.0));
  tmpvar_96.y = -(s_88);
  half3 tmpvar_97;
  tmpvar_97.xz = half2(float2(1.0, -1.0));
  tmpvar_97.y = s_88;
  float3 tmpvar_98;
  tmpvar_98 = mix (((float3)tmpvar_96 * tmpvar_33.xzy), ((float3)tmpvar_97 * tmpvar_33.zxy), (float3)half3(zxlerp_90));
  detailCoords_87 = half3(tmpvar_98);
  half3 tmpvar_99;
  tmpvar_99.xy = half2(float2(1.0, 1.0));
  tmpvar_99.z = s_88;
  float3 tmpvar_100;
  tmpvar_100 = mix (((float3)tmpvar_99 * tmpvar_33.yxz), (float3)detailCoords_87, (float3)half3(nylerp_89));
  detailCoords_87 = half3(tmpvar_100);
  uv_86 = half2(((float2)((
    ((half)0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_101;
  uv_101 = float2(uv_86);
  float2 uvCont_102;
  float2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  float4 tmpvar_104;
  tmpvar_104.xy = dfdx(uvCont_102);
  tmpvar_104.zw = dfdy(uvCont_102);
  half4 tmpvar_105;
  tmpvar_105 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_86), gradient2d((float2)(tmpvar_104.xy), (float2)(tmpvar_104.zw)));
  half4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half3 lightDir_107;
  lightDir_107 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_108;
  viewDir_108 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_109;
  half3 tmpvar_110;
  tmpvar_110 = normalize(lightDir_107);
  lightDir_107 = tmpvar_110;
  half3 tmpvar_111;
  tmpvar_111 = normalize(viewDir_108);
  viewDir_108 = tmpvar_111;
  half3 tmpvar_112;
  tmpvar_112 = normalize(normT_5);
  half tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_110);
  float tmpvar_114;
  half tmpvar_115;
  tmpvar_115 = clamp (dot (normalize(
    (tmpvar_110 + tmpvar_111)
  ), tmpvar_112), (half)0.0, (half)1.0);
  tmpvar_114 = float(tmpvar_115);
  float tmpvar_116;
  tmpvar_116 = (pow (tmpvar_114, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_109.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_113) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_116)) * 2.0));
  c_109.w = (tmpvar_113 * (half)2.0);
  float3 tmpvar_117;
  tmpvar_117 = normalize(_mtl_u._SunDir);
  half3 lightDir_118;
  lightDir_118 = half3(tmpvar_117);
  half3 normal_119;
  normal_119 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_120;
  tmpvar_120 = dot (normal_119, lightDir_118);
  color_6 = (c_109 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_120))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_120))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_121;
  tmpvar_121 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_121;
  tmpvar_1 = tmpvar_121;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 124 math, 31 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
Float 2 [_CityOverlayDetailScale]
Vector 1 [_SunDir]
Vector 0 [alphaMask1]
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexxn] 2D 1
SetTexture 2 [cube_CityOverlayTexxp] 2D 2
SetTexture 3 [cube_CityOverlayTexyn] 2D 3
SetTexture 4 [cube_CityOverlayTexyp] 2D 4
SetTexture 5 [cube_CityOverlayTexzn] 2D 5
SetTexture 6 [cube_CityOverlayTexzp] 2D 6
SetTexture 7 [_MainTex] 2D 7
SetTexture 8 [_BumpMap] 2D 8
SetTexture 9 [_CityDarkOverlayDetailTex] 2D 9
SetTexture 10 [_CityLightOverlayDetailTex] 2D 10
"ps_3_0
def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
def c4, 0.999866009, 0, 1, 0.159154937
def c5, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c6, -2, 3.14159274, 0.318309873, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, 1, -1, -10, 1.00999999
def c9, -0, 0, -3.14159274, 1
dcl_texcoord2 v0.xyz
dcl_texcoord3_pp v1.xyz
dcl_texcoord5_pp v2.xyz
dcl_texcoord6 v3
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
mov r0.xz, c8.xyyw
dp3 r0.w, v0, v0
rsq r0.w, r0.w
mul r1.xyz, r0.w, v0.yxzw
mad r0.w, v0.x, r0.w, -r1.z
cmp r2.xy, r0.w, r1.zyzw, r1.yzzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.z, r1.w, r1.z, r1.y
cmp r2.z, r0.w, r2.z, r1.x
cmp r2.w, -r2.z, c4.y, c4.z
cmp r2.z, r2.z, -c4.y, -c4.z
add_pp r3.y, r2.z, r2.w
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r3.xzw, r1.xyyz, r3.xyxy
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r3.xzww
mul_pp r0.yz, r0, c7.w
rcp r0.x, r0_abs.x
mul_pp r2.zw, r0.x, r0.xyyz
mad_pp r0.xy, r0.yzzw, r0.x, c7.w
add r0.z, -r2_abs.w, r2_abs.z
cmp r2.zw, r0.z, r2_abs, r2_abs.xywz
dsx r3.xz, r2.zyww
dsy r2.zw, r2
texldd_pp r4, r0, s1, r3.xzzw, r2.zwzw
texldd_pp r5, r0, s2, r3.xzzw, r2.zwzw
cmp_pp r4, r3.y, r5, r4
texldd_pp r5, r0, s5, r3.xzzw, r2.zwzw
texldd_pp r6, r0, s6, r3.xzzw, r2.zwzw
cmp_pp r5, r3.y, r6, r5
cmp_pp r4, r1.w, r5, r4
texldd_pp r5, r0, s3, r3.xzzw, r2.zwzw
texldd_pp r6, r0, s4, r3.xzzw, r2.zwzw
mul_pp r0.xy, r0, c2.x
cmp_pp r3, r3.y, r6, r5
cmp_pp r3, r0.w, r4, r3
mul_pp r0.zw, r3.xyxy, c0.xyxy
add_pp r0.z, r0.w, r0.z
mad_pp r0.z, r3.z, c0.z, r0.z
mad_pp r0.z, r3.w, c0.w, r0.z
add r2.zw, -r1_abs.xyzy, r1_abs.xyyz
cmp r1.yw, r2.z, r1_abs.xzzy, r1_abs.xyzz
cmp r0.w, r2.w, c4.y, c4.z
rcp r1.w, r1.w
mul r1.y, r1.w, r1.y
mul r1.w, r1.y, r1.y
mad r2.z, r1.w, c3.x, c3.y
mad r2.z, r1.w, r2.z, c3.z
mad r2.z, r1.w, r2.z, c3.w
mad r1.w, r1.w, r2.z, c4.x
mul r1.y, r1.w, r1.y
mad r1.w, r1.y, c7.x, c7.y
mad r0.w, r1.w, r0.w, r1.y
cmp r1.yz, r1.xzxw, c9.xxyw, c9.xzww
add r0.w, r0.w, r1.y
add r1.y, r0.w, r0.w
cmp r1.w, r2.y, c4.z, c4.y
cmp r1.w, r2.x, c4.y, r1.w
mad r0.w, r1.w, -r1.y, r0.w
mad r2.x, r0.w, c7.z, c7.w
mul r0.w, r0.w, c4.w
abs r0.w, r0.w
mad r1.y, r1_abs.x, c5.x, c5.y
mad r1.y, r1.y, r1_abs.x, c5.z
mad r1.y, r1.y, r1_abs.x, c5.w
add r1.x, -r1_abs.x, c4.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1.x, r1.y
mad r1.y, r1.x, c6.x, c6.y
mad r1.x, r1.y, r1.z, r1.x
mul r2.y, r1.x, c6.z
dsx r1.x, r0.w
dsy r3.x, r0.w
dsx r1.y, r2.y
dsy r3.y, r2.y
texldd_pp r4, r2, s7, r1, r3
texldd_pp r1, r2, s8, r1, r3
mad_pp r1.xy, r1.wyzw, -c6.x, -c6.w
add r0.w, r4.w, -c4.z
cmp_pp r0.w, r0.w, c4.y, c4.z
mul_pp r0.z, r0.w, r0.z
mov r0.w, c7.w
mad r2.xy, c2.x, -r0.w, r0
add r0.w, -r2_abs.y, r2_abs.x
cmp r2.xy, r0.w, r2_abs, r2_abs.yxzw
dsx r2.zw, r2.xyxy
dsy r2.xy, r2
texldd_pp r3, r0, s9, r2.zwzw, r2
texldd_pp r2, r0, s10, r2.zwzw, r2
mul_pp r0.x, r0.z, r3.w
mul_pp r2.w, r0.z, r2.w
dp2add_sat_pp r0.y, r1, r1, c4.y
add_pp r0.y, -r0.y, c4.z
rsq_pp r0.y, r0.y
rcp_pp r1.z, r0.y
nrm_pp r4.xyz, r1
nrm_pp r1.xyz, v2
dp3_pp r0.y, r4, r1
texldp_pp r1, v3, s0
dp2add_pp r0.y, r1.x, r0.y, c4.y
nrm_pp r1.xyz, c1
dp3_pp r0.z, v1, r1
add_pp r0.w, r0.z, c8.w
mul_sat_pp r0.z, r0.z, c8.z
frc_pp r1.x, r0.w
add_sat_pp r0.w, r0.w, -r1.x
lrp_pp r1.x, r0.z, r0.w, c4.z
mul_sat_pp r0.y, r0.y, r1.x
add_pp r0.y, -r0.y, c4.z
mul_pp r3.w, r0.y, r0.x
add_pp r0, -r2, r3
mad_pp oC0, r3.w, r0, r2

"
}
SubProgram "d3d11 " {
// Stats: 125 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [_MainTex] 2D 7
SetTexture 1 [_BumpMap] 2D 8
SetTexture 2 [cube_CityOverlayTexxn] 2D 1
SetTexture 3 [cube_CityOverlayTexxp] 2D 2
SetTexture 4 [cube_CityOverlayTexyn] 2D 3
SetTexture 5 [cube_CityOverlayTexyp] 2D 4
SetTexture 6 [cube_CityOverlayTexzn] 2D 5
SetTexture 7 [cube_CityOverlayTexzp] 2D 6
SetTexture 8 [_CityDarkOverlayDetailTex] 2D 9
SetTexture 9 [_CityLightOverlayDetailTex] 2D 10
SetTexture 10 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 448
Vector 352 [alphaMask1]
Vector 420 [_SunDir] 3
Float 432 [_CityOverlayDetailScale]
BindCB  "$Globals" 0
"ps_4_0
root12:alabalaa
eefiecednlibkadkjaildlfljfnjhmcklhpifefgabaaaaaamebeaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcimbdaaaaeaaaaaaaodaeaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafkaaaaad
aagabaaaajaaaaaafkaaaaadaagabaaaakaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaaeaahabaaaaiaaaaaa
ffffaaaafibiaaaeaahabaaaajaaaaaaffffaaaafibiaaaeaahabaaaakaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadlcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaiaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaapgapbaaaaaaaaaaabgbgbaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
ckbabaaaacaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaaj
bcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
dkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaa
aaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaa
aaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaa
kgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
diaaaaahocaabaaaacaaaaaaagajbaaaabaaaaaaagaebaaaadaaaaaabnaaaaah
icaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaa
pgapbaaaabaaaaaaegacbaaaaaaaaaaajgahbaaaacaaaaaadiaaaaakgcaabaaa
aaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaalaaaaafbcaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafbcaabaaa
aeaaaaaackaabaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaahaaaaaaaagabaaa
agaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaa
egaabaaaaaaaaaaaeghobaaaagaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaia
ebaaaaaaagaaaaaadcaaaaajpcaabaaaafaaaaaapgapbaaaaaaaaaaaegaobaaa
afaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaaaaaaaaa
eghobaaaadaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaahaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaagaaaaaa
egaobaaaagaaaaaaegaobaiaebaaaaaaahaaaaaadcaaaaajpcaabaaaagaaaaaa
pgapbaaaaaaaaaaaegaobaaaagaaaaaaegaobaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaa
acaaaaaaagaabaaaacaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaafaaaaaaaagabaaaaeaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaa
blaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaadaaaaaapgapbaaaaaaaaaaaegaobaaaaeaaaaaa
egaobaaaadaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaaegaobaaaadaaaaaadiaaaaaimcaabaaaaaaaaaaaagaebaaaacaaaaaa
agiecaaaaaaaaaaabgaaaaaaaaaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaakecaabaaaaaaaaaaackaabaaaacaaaaaackiacaaa
aaaaaaaabgaaaaaackaabaaaaaaaaaaadcaaaaakecaabaaaaaaaaaaadkaabaaa
acaaaaaadkiacaaaaaaaaaaabgaaaaaackaabaaaaaaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
bkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaa
cgakbaaaabaaaaaacgakbaiaebaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaabaaaaaadeaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodgaaaaagicaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaa
alaaaaafbcaabaaaaeaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaaafaaaaaa
dkaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdp
aaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahccaabaaaabaaaaaa
bkaabaaaacaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaaeaaaaaabkaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaabkaabaaaadaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaahaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaaiaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaapdcaabaaaabaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaabnaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdhaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaodcaabaaa
acaaaaaaagiacaiaebaaaaaaaaaaaaaablaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaegaabaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaddaaaaajicaabaaaabaaaaaa
bkaabaiaibaaaaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaalaaaaafbcaabaaa
acaaaaaadkaabaaaaaaaaaaaamaaaaafbcaabaaaadaaaaaadkaabaaaaaaaaaaa
alaaaaafccaabaaaacaaaaaadkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaa
dkaabaaaabaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaaaaaaaaaeghobaaa
aiaaaaaaaagabaaaajaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaaaaaaaaaeghobaaaajaaaaaaaagabaaaakaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaahbcaabaaaaaaaaaaackaabaaa
aaaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaaaaaaaaa
dkaabaaaacaaaaaaapaaaaahccaabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
abaaaaaaddaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaabaaaaaabkaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaaagajbaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaa
egacbaaaabaaaaaaaoaaaaahmcaabaaaaaaaaaaaagbebaaaafaaaaaapgbpbaaa
afaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaaaaaaaaaeghobaaaakaaaaaa
aagabaaaaaaaaaaaapaaaaahccaabaaaaaaaaaaaagaabaaaabaaaaaafgafbaaa
aaaaaaaabaaaaaajecaabaaaaaaaaaaajgihcaaaaaaaaaaabkaaaaaajgihcaaa
aaaaaaaabkaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaakgakbaaaaaaaaaaajgihcaaaaaaaaaaabkaaaaaabaaaaaah
ecaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdicaaaahccaabaaaaaaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
aaaaaaaiccaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaaeaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaai
pcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaaj
pccabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GL3x"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 281 math, 11 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [cube_CityOverlayTexxn] 2D 1
SetTexture 2 [cube_CityOverlayTexxp] 2D 2
SetTexture 3 [cube_CityOverlayTexyn] 2D 3
SetTexture 4 [cube_CityOverlayTexyp] 2D 4
SetTexture 5 [cube_CityOverlayTexzn] 2D 5
SetTexture 6 [cube_CityOverlayTexzp] 2D 6
SetTexture 7 [_MainTex] 2D 7
SetTexture 8 [_BumpMap] 2D 8
SetTexture 9 [_CityDarkOverlayDetailTex] 2D 9
SetTexture 10 [_CityLightOverlayDetailTex] 2D 10
ConstBuffer "$Globals" 52
VectorHalf 0 [_LightColor0] 4
VectorHalf 8 [alphaMask1] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Vector 32 [_SunDir] 3
Float 48 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  half4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightColor0;
  half4 alphaMask1;
  float _SpecularPower;
  half4 _SpecularColor;
  float3 _SunDir;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> cube_CityOverlayTexxn [[texture(1)]], sampler _mtlsmp_cube_CityOverlayTexxn [[sampler(1)]]
  ,   texture2d<half> cube_CityOverlayTexxp [[texture(2)]], sampler _mtlsmp_cube_CityOverlayTexxp [[sampler(2)]]
  ,   texture2d<half> cube_CityOverlayTexyn [[texture(3)]], sampler _mtlsmp_cube_CityOverlayTexyn [[sampler(3)]]
  ,   texture2d<half> cube_CityOverlayTexyp [[texture(4)]], sampler _mtlsmp_cube_CityOverlayTexyp [[sampler(4)]]
  ,   texture2d<half> cube_CityOverlayTexzn [[texture(5)]], sampler _mtlsmp_cube_CityOverlayTexzn [[sampler(5)]]
  ,   texture2d<half> cube_CityOverlayTexzp [[texture(6)]], sampler _mtlsmp_cube_CityOverlayTexzp [[sampler(6)]]
  ,   texture2d<half> _MainTex [[texture(7)]], sampler _mtlsmp__MainTex [[sampler(7)]]
  ,   texture2d<half> _BumpMap [[texture(8)]], sampler _mtlsmp__BumpMap [[sampler(8)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(9)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(9)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(10)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(10)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half3 normT_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_8;
  float tmpvar_9;
  float tmpvar_10;
  tmpvar_10 = (min (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0) / max (abs(
    (tmpvar_7.x / tmpvar_7.z)
  ), 1.0));
  float tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  tmpvar_11 = (((
    ((((
      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)
     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)
   * tmpvar_11) + 0.9999793) * tmpvar_10);
  tmpvar_11 = (tmpvar_11 + (float(
    (abs((tmpvar_7.x / tmpvar_7.z)) > 1.0)
  ) * (
    (tmpvar_11 * -2.0)
   + 1.570796)));
  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.z)));
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.141593;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.141593);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);
  };
  uv_8.x = (0.5 + (0.1591549 * tmpvar_9));
  uv_8.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_7.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.570796 + (
      abs(tmpvar_7.y)
     * 
      (-0.2146018 + (abs(tmpvar_7.y) * (0.08656672 + (
        abs(tmpvar_7.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_12;
  uvCont_12.y = uv_8.y;
  uvCont_12.x = abs((uv_8.x - 0.5));
  float2 tmpvar_13;
  tmpvar_13 = dfdx(uvCont_12);
  float2 tmpvar_14;
  tmpvar_14 = dfdy(uvCont_12);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13), (float2)(tmpvar_14)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_17.x / tmpvar_17.z)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_17.x / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);
  };
  uv_18.x = (0.5 + (0.1591549 * tmpvar_19));
  uv_18.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_17.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.570796 + (
      abs(tmpvar_17.y)
     * 
      (-0.2146018 + (abs(tmpvar_17.y) * (0.08656672 + (
        abs(tmpvar_17.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_22;
  uvCont_22.y = uv_18.y;
  uvCont_22.x = abs((uv_18.x - 0.5));
  float2 tmpvar_23;
  tmpvar_23 = dfdx(uvCont_22);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_18), gradient2d((float2)(tmpvar_23), (float2)(tmpvar_24)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 packednormal_27;
  packednormal_27 = tmpvar_26;
  half3 normal_28;
  normal_28.xy = ((packednormal_27.wy * (half)2.0) - (half)1.0);
  normal_28.z = sqrt(((half)1.0 - clamp (
    dot (normal_28.xy, normal_28.xy)
  , (half)0.0, (half)1.0)));
  normT_5 = normal_28;
  half3 detailCoords_29;
  half s_30;
  half nylerp_31;
  half zxlerp_32;
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD2);
  float3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_32 = half(tmpvar_35);
  float tmpvar_36;
  tmpvar_36 = float((max (tmpvar_34.x, tmpvar_34.z) >= tmpvar_34.y));
  nylerp_31 = half(tmpvar_36);
  float tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_32);
  s_30 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = sign(mix (tmpvar_33.y, (float)s_30, (float)nylerp_31));
  s_30 = half(tmpvar_38);
  half3 tmpvar_39;
  tmpvar_39.xz = half2(float2(1.0, -1.0));
  tmpvar_39.y = -(s_30);
  half3 tmpvar_40;
  tmpvar_40.xz = half2(float2(1.0, -1.0));
  tmpvar_40.y = s_30;
  float3 tmpvar_41;
  tmpvar_41 = mix (((float3)tmpvar_39 * tmpvar_33.xzy), ((float3)tmpvar_40 * tmpvar_33.zxy), (float3)half3(zxlerp_32));
  detailCoords_29 = half3(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xy = half2(float2(1.0, 1.0));
  tmpvar_42.z = s_30;
  float3 tmpvar_43;
  tmpvar_43 = mix (((float3)tmpvar_42 * tmpvar_33.yxz), (float3)detailCoords_29, (float3)half3(nylerp_31));
  detailCoords_29 = half3(tmpvar_43);
  half2 tmpvar_44;
  tmpvar_44 = ((((half)0.5 * detailCoords_29.yz) / abs(detailCoords_29.x)) + (half)0.5);
  float2 uv_45;
  uv_45 = float2(tmpvar_44);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((uv_45 - 0.5));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = cube_CityOverlayTexxn.sample(_mtlsmp_cube_CityOverlayTexxn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half4 tmpvar_51;
  tmpvar_51 = cube_CityOverlayTexxp.sample(_mtlsmp_cube_CityOverlayTexxp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  half4 tmpvar_53;
  tmpvar_53 = cube_CityOverlayTexyn.sample(_mtlsmp_cube_CityOverlayTexyn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  half4 tmpvar_55;
  tmpvar_55 = cube_CityOverlayTexyp.sample(_mtlsmp_cube_CityOverlayTexyp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  half4 tmpvar_57;
  tmpvar_57 = cube_CityOverlayTexzn.sample(_mtlsmp_cube_CityOverlayTexzn, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  half4 tmpvar_59;
  tmpvar_59 = cube_CityOverlayTexzp.sample(_mtlsmp_cube_CityOverlayTexzp, (float2)(tmpvar_44), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  half tmpvar_61;
  half4 v_62;
  v_62 = (mix (mix (tmpvar_54, tmpvar_56, half4(
    half((s_30 >= (half)0.0))
  )), mix (
    mix (tmpvar_50, tmpvar_52, half4(half((s_30 >= (half)0.0))))
  , 
    mix (tmpvar_58, tmpvar_60, half4(half((s_30 >= (half)0.0))))
  , half4(zxlerp_32)), half4(nylerp_31)) * _mtl_u.alphaMask1);
  tmpvar_61 = ((v_62.x + v_62.y) + (v_62.z + v_62.w));
  half4 tmpvar_63;
  tmpvar_63.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_63.w = tmpvar_61;
  cityoverlay_4.xyz = tmpvar_63.xyz;
  half2 uv_64;
  half3 detailCoords_65;
  half s_66;
  half nylerp_67;
  half zxlerp_68;
  float3 tmpvar_69;
  tmpvar_69 = abs(tmpvar_33);
  float tmpvar_70;
  tmpvar_70 = float((tmpvar_69.z >= tmpvar_69.x));
  zxlerp_68 = half(tmpvar_70);
  float tmpvar_71;
  tmpvar_71 = float((max (tmpvar_69.x, tmpvar_69.z) >= tmpvar_69.y));
  nylerp_67 = half(tmpvar_71);
  float tmpvar_72;
  tmpvar_72 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_68);
  s_66 = half(tmpvar_72);
  float tmpvar_73;
  tmpvar_73 = sign(mix (tmpvar_33.y, (float)s_66, (float)nylerp_67));
  s_66 = half(tmpvar_73);
  half3 tmpvar_74;
  tmpvar_74.xz = half2(float2(1.0, -1.0));
  tmpvar_74.y = -(s_66);
  half3 tmpvar_75;
  tmpvar_75.xz = half2(float2(1.0, -1.0));
  tmpvar_75.y = s_66;
  float3 tmpvar_76;
  tmpvar_76 = mix (((float3)tmpvar_74 * tmpvar_33.xzy), ((float3)tmpvar_75 * tmpvar_33.zxy), (float3)half3(zxlerp_68));
  detailCoords_65 = half3(tmpvar_76);
  half3 tmpvar_77;
  tmpvar_77.xy = half2(float2(1.0, 1.0));
  tmpvar_77.z = s_66;
  float3 tmpvar_78;
  tmpvar_78 = mix (((float3)tmpvar_77 * tmpvar_33.yxz), (float3)detailCoords_65, (float3)half3(nylerp_67));
  detailCoords_65 = half3(tmpvar_78);
  uv_64 = half2(((float2)((
    ((half)0.5 * detailCoords_65.yz)
   / 
    abs(detailCoords_65.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_79;
  uv_79 = float2(uv_64);
  float2 uvCont_80;
  float2 tmpvar_81;
  float tmpvar_82;
  tmpvar_82 = (0.5 * _mtl_u._CityOverlayDetailScale);
  tmpvar_81 = abs((uv_79 - tmpvar_82));
  uvCont_80.x = max (tmpvar_81.x, tmpvar_81.y);
  uvCont_80.y = min (tmpvar_81.x, tmpvar_81.y);
  float4 tmpvar_83;
  tmpvar_83.xy = dfdx(uvCont_80);
  tmpvar_83.zw = dfdy(uvCont_80);
  half4 tmpvar_84;
  tmpvar_84 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(uv_64), gradient2d((float2)(tmpvar_83.xy), (float2)(tmpvar_83.zw)));
  half4 tmpvar_85;
  tmpvar_85 = tmpvar_84;
  citydarkoverlaydetail_3.xyz = tmpvar_85.xyz;
  half2 uv_86;
  half3 detailCoords_87;
  half s_88;
  half nylerp_89;
  half zxlerp_90;
  float3 tmpvar_91;
  tmpvar_91 = abs(tmpvar_33);
  float tmpvar_92;
  tmpvar_92 = float((tmpvar_91.z >= tmpvar_91.x));
  zxlerp_90 = half(tmpvar_92);
  float tmpvar_93;
  tmpvar_93 = float((max (tmpvar_91.x, tmpvar_91.z) >= tmpvar_91.y));
  nylerp_89 = half(tmpvar_93);
  float tmpvar_94;
  tmpvar_94 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_90);
  s_88 = half(tmpvar_94);
  float tmpvar_95;
  tmpvar_95 = sign(mix (tmpvar_33.y, (float)s_88, (float)nylerp_89));
  s_88 = half(tmpvar_95);
  half3 tmpvar_96;
  tmpvar_96.xz = half2(float2(1.0, -1.0));
  tmpvar_96.y = -(s_88);
  half3 tmpvar_97;
  tmpvar_97.xz = half2(float2(1.0, -1.0));
  tmpvar_97.y = s_88;
  float3 tmpvar_98;
  tmpvar_98 = mix (((float3)tmpvar_96 * tmpvar_33.xzy), ((float3)tmpvar_97 * tmpvar_33.zxy), (float3)half3(zxlerp_90));
  detailCoords_87 = half3(tmpvar_98);
  half3 tmpvar_99;
  tmpvar_99.xy = half2(float2(1.0, 1.0));
  tmpvar_99.z = s_88;
  float3 tmpvar_100;
  tmpvar_100 = mix (((float3)tmpvar_99 * tmpvar_33.yxz), (float3)detailCoords_87, (float3)half3(nylerp_89));
  detailCoords_87 = half3(tmpvar_100);
  uv_86 = half2(((float2)((
    ((half)0.5 * detailCoords_87.yz)
   / 
    abs(detailCoords_87.x)
  ) + (half)0.5) * _mtl_u._CityOverlayDetailScale));
  float2 uv_101;
  uv_101 = float2(uv_86);
  float2 uvCont_102;
  float2 tmpvar_103;
  tmpvar_103 = abs((uv_101 - tmpvar_82));
  uvCont_102.x = max (tmpvar_103.x, tmpvar_103.y);
  uvCont_102.y = min (tmpvar_103.x, tmpvar_103.y);
  float4 tmpvar_104;
  tmpvar_104.xy = dfdx(uvCont_102);
  tmpvar_104.zw = dfdy(uvCont_102);
  half4 tmpvar_105;
  tmpvar_105 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(uv_86), gradient2d((float2)(tmpvar_104.xy), (float2)(tmpvar_104.zw)));
  half4 tmpvar_106;
  tmpvar_106 = tmpvar_105;
  citylightoverlaydetail_2.xyz = tmpvar_106.xyz;
  cityoverlay_4.w = (tmpvar_61 * ((half)1.0 - half(
    (tmpvar_16.w >= (half)1.0)
  )));
  citydarkoverlaydetail_3.w = (tmpvar_85.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_106.w * cityoverlay_4.w);
  color_6.xyz = (tmpvar_106.xyz * citylightoverlaydetail_2.www);
  color_6.w = half(0.0);
  half tmpvar_107;
  tmpvar_107 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  half3 lightDir_108;
  lightDir_108 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_109;
  viewDir_109 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_110;
  atten_110 = tmpvar_107;
  half4 c_111;
  half3 tmpvar_112;
  tmpvar_112 = normalize(lightDir_108);
  lightDir_108 = tmpvar_112;
  half3 tmpvar_113;
  tmpvar_113 = normalize(viewDir_109);
  viewDir_109 = tmpvar_113;
  half3 tmpvar_114;
  tmpvar_114 = normalize(normT_5);
  half tmpvar_115;
  tmpvar_115 = dot (tmpvar_114, tmpvar_112);
  float tmpvar_116;
  half tmpvar_117;
  tmpvar_117 = clamp (dot (normalize(
    (tmpvar_112 + tmpvar_113)
  ), tmpvar_114), (half)0.0, (half)1.0);
  tmpvar_116 = float(tmpvar_117);
  float tmpvar_118;
  tmpvar_118 = (pow (tmpvar_116, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w);
  c_111.xyz = half3((((float3)(
    (color_6.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_115) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * tmpvar_118)) * (float)(atten_110 * (half)2.0)));
  c_111.w = (tmpvar_115 * (atten_110 * (half)2.0));
  float3 tmpvar_119;
  tmpvar_119 = normalize(_mtl_u._SunDir);
  half3 lightDir_120;
  lightDir_120 = half3(tmpvar_119);
  half3 normal_121;
  normal_121 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_122;
  tmpvar_122 = dot (normal_121, lightDir_120);
  color_6 = (c_111 * mix ((half)1.0, clamp (
    floor(((half)1.01 + tmpvar_122))
  , (half)0.0, (half)1.0), clamp (
    ((half)10.0 * -(tmpvar_122))
  , (half)0.0, (half)1.0)));
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (color_6.w, (half)0.0, (half)1.0)));
  half4 tmpvar_123;
  tmpvar_123 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_6 = tmpvar_123;
  tmpvar_1 = tmpvar_123;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
}
 }
}
}